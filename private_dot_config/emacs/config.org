#+Title: Calum's Emacs Config
#+Author: Calum Sieppert
#+Date: 2021
# Allow evaluation of src blocks without results blocks popping up
#+PROPERTY: header-args :results silent
#+STARTUP: nolatexpreview

This config is based off [[https://github.com/ianpan870102/yay-evil-emacs/blob/master/config.org][this file]].

[[https://github.com/noctuid/general.el/][general.el]] had to be loaded upfront so that the ~:general~ keyword
works.

#+begin_src emacs-lisp
(use-package general
 :config
 (defconst calum/leader "C-c")
 (defconst calum/leader-non-normal "C-c")
 (general-create-definer calum/leader-def
   :prefix calum/leader)
 (general-override-mode)
)
  #+end_src

* General Emacs Configuration

#+begin_src emacs-lisp
(use-package emacs
  :preface
  (defvar calum/indent-width 4)
  (defvar calum/code-font "JetBrains Mono")
  (defvar calum/code-font-height 120)
  (defvar calum/magit-mode nil)

  ;; Like the kill-word functions, but don't yank
  (defun delete-word (arg)
    "Delete characters forward until encountering the end of a word.
With argument ARG, do this that many times."
    (interactive "p")
    (delete-region (point) (progn (forward-word arg) (point))))

  (defun backward-delete-word (arg)
    "Delete characters backward until encountering the beginning of a word.
With argument ARG, do this that many times."
    (interactive "p")
    (delete-word (- arg)))

  (defun calum/copy-current-kill-to-clipboard ()
    "https://emacs.stackexchange.com/a/52179"
    (interactive)
    (gui-set-selection 'CLIPBOARD (current-kill 0)))
  (defun recentf-ido-find-file ()
    "Find a recent file using Ido. From https://www.emacswiki.org/emacs/RecentFiles#h5o-8"
    (interactive)
    (let ((file (ido-completing-read "Choose recent file: " recentf-list nil t)))
      (when file
        (find-file file))))

  (defun calum/edit-config ()
    (interactive)
    (chezmoi-find (concat user-emacs-directory "config.org")))
  (defun calum/open-terminal-here ()
    "Based on https://emacs.stackexchange.com/a/7652 for opening a terminal in the folder of the current file"
    (interactive "@")
    (shell-command (concat "terminal --working-directory "
                           (file-name-directory (or load-file-name buffer-file-name))
                           " > /dev/null 2>&1 & disown") nil nil))

  (defun buffer-backed-by-file-p (buffer)
    "https://emacs.stackexchange.com/a/35907"
    (let ((backing-file (buffer-file-name buffer)))
      (if (buffer-modified-p buffer)
          t
        (if backing-file
            (file-exists-p (buffer-file-name buffer))
          t))))

  (defun kill-removed-buffers ()
    "Kill all buffers whose files have been deleted/moved, from
https://emacs.stackexchange.com/a/35907"
    (interactive)
    (require 'dash)
    (let ((to-kill (-remove 'buffer-backed-by-file-p (buffer-list))))
      (mapc 'kill-buffer to-kill)
      (message "Killed %s buffers" (length to-kill))))

  (defun replace-buffer-with-shell-command (command)
    "Pipe the buffer's contents to a shell a command and replace them with its output."
    (let ((temp-point (point)))
      (mark-whole-buffer)
      (shell-command-on-region
       (region-beginning) (region-end) command :replace t)
      (goto-char temp-point)))

  (defun wrap-with-direnv-disabled (orig-fun &rest args)
    "Disable direnv for the current folder before calling the function, then re-enable it"
    (direnv-update-directory-environment "~/" nil)
    (apply orig-fun args)
    (direnv-update-environment))

  :general
  ("C-<down-mouse-1>" ;; Ctrl click to open a link
   (lambda (event)
     (interactive (list last-command-event))
     (posn-set-point (event-end event))
     (browse-url (thing-at-point 'url t))))

  ("<XF86Paste>" (general-key "<paste>"))
  ("<XF86Copy>" (general-key "<copy>"))
  ("<XF86Cut>" (general-key "<cut>"))
  ("C-<backspace>" 'backward-delete-word)
  ("M-d" 'delete-word)
  ("C-S-p" 'execute-extended-command)
  ("C-s" 'save-buffer)
  ("<f7>" 'calum/edit-config)
  ("C-M-c" nil)
  ("C-M-c" 'meow-comment)
  ;; Ensure this isn't mapped to a command already
  ("C-c w" nil)
  (calum/leader-def "t" 'calum/open-terminal-here)
  (calum/leader-def :infix "w"
    ;; prefix-command is needed for meow to show a description for the "w" key
    :prefix-command 'windows-map
    ;; Use built-in window moving for cases where evil isn't available
    "h" 'windmove-left
    "l" 'windmove-right
    "k" 'windmove-up
    "j" 'windmove-down
    "w" 'kill-this-buffer
    "c" 'delete-window
    "u" 'winner-undo
    "y" 'winner-redo
    "o" 'delete-other-windows)
  :config
  (advice-add 'browse-url :around #'wrap-with-direnv-disabled)

  (setq-default word-wrap t)

  (setq
   ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
   read-extended-command-predicate #'command-completion-default-include-p
   enable-recursive-minibuffers t
   ;; Emacs 28; recommended by embark
   y-or-n-p-use-read-key t
   ;; Don't use system clipboard by default
   select-enable-clipboard t
   select-enable-primary nil
   mouse-drag-copy-region nil
   initial-scratch-message ""
   set-mark-command-repeat-pop t
   kill-read-only-ok t
   kill-do-not-save-duplicates t
   )

  (if (member "--magit" command-line-args)
      (progn
        (setq command-line-args (delete "--magit" command-line-args))
        (setq calum/magit-mode t)
        ;; Shows "magit <git repo>" as the frame title when Magit is open
        (setq frame-title-format "%b")))

  (setq ring-bell-function 'ignore
        frame-resize-pixelwise t ; Allow the emacs window to resize more precisely
        mouse-wheel-tilt-scroll t       ; Horizontal mouse scrolling
        mouse-wheel-flip-direction t    ; Flip horizontal scrolling
        tab-always-indent 'complete ; Enable indentation+completion using the TAB key
        completion-cycle-threshold nil ; Don't TAB cycle if there are only a few completion candidates
        )

  ;; https://www.emacswiki.org/emacs/TransparentEmacs#h5o-1
  (set-frame-parameter (selected-frame) 'alpha '(95 . 95))
  ;; Make sure emacsclient frames are made transparent as well
  (add-hook 'after-make-frame-functions
            '(lambda (frame)
               (set-frame-parameter frame 'alpha '(95 . 95))
               (set-scroll-bar-mode nil)))
  (add-to-list 'default-frame-alist '(alpha . (95 . 95)))

  ;; Clean unused buffer every day at midnight
  (midnight-mode 1)

  ;; Save command history between sessions
  (savehist-mode 1)
  ;; Restore buffer point position when reopening buffers
  (save-place-mode 1)

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  ;; Hide title bar
  (setq default-frame-alist '((undecorated . t)))

  ;; better scrolling experience
  (setq scroll-margin 0
        scroll-conservatively 101
        scroll-preserve-screen-position t
        auto-window-vscroll nil)

  ;; Allow opening recent files
  ;; https://www.emacswiki.org/emacs/RecentFiles
  (recentf-mode 1)
  (setq recentf-max-menu-items 100
        recentf-max-saved-items 100)

  ;; Always use spaces for indentation
  (setq-default indent-tabs-mode nil
                tab-width calum/indent-width)

  ;; Omit default startup screen
  (setq inhibit-startup-screen t)

  ;; Split windows horizontally
  ;; https://stackoverflow.com/a/2081978/14703577
  (setq split-width-threshold 1)

  ;; Increased because desktop mode was running into the limit after
  ;; adding dirvish
  (setq max-lisp-eval-depth 5000)

  ;; Recommended by lsp-mode https://emacs-lsp.github.io/lsp-mode/page/performance/
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb

                                        ;(server-start)
  )
#+END_SRC

* Configuration for built-in packages

** Simple completion with dabbrev
#+begin_src emacs-lisp
(use-package dabbrev
  :custom
  (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'"))
  (dabbrev-case-replace nil))
#+end_src

** Window config history
Undo/redo window configuration changes using ~C-c <left>~ / ~C-c <right>~.
#+begin_src emacs-lisp
(use-package winner
  :ensure nil
  :config
  (winner-mode 1))
#+end_src

** Compilation colours
Enable terminal colours in the compilation buffer. From https://stackoverflow.com/a/71785402
#+begin_src emacs-lisp
(use-package ansi-color
    :hook (compilation-filter . ansi-color-compilation-filter))
#+end_src

** Disable scroll-bar

#+BEGIN_SRC emacs-lisp
(use-package scroll-bar
  :ensure nil
  :config (set-scroll-bar-mode nil))
#+END_SRC

** File-related tweaks

Don’t bother confirming killing processes and don’t let backup~ files scatter around.

#+begin_src emacs-lisp
(use-package files
  :ensure nil
  :config
  (setq confirm-kill-processes nil
        create-lockfiles nil ; don't create .# files
        make-backup-files nil))
#+end_src

** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :ensure nil
  :hook (before-save . whitespace-cleanup))
#+END_SRC
** Auto-pairing quotes and parentheses etc.
This also takes care of the new-line-and-push-brace feature.
#+BEGIN_SRC emacs-lisp
(use-package elec-pair
  :ensure nil
  :hook (prog-mode . electric-pair-mode))
#+END_SRC
** Font

See [[*Load theme][Load theme]] for additional font selection with the poet theme.
#+BEGIN_SRC emacs-lisp
(use-package frame
  :ensure nil
  :config
  (set-face-attribute 'default nil
                      :family calum/code-font
                      :height calum/code-font-height
                      :weight 'normal))
#+END_SRC
** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
(use-package paren
  :ensure nil
  :init (setq show-paren-delay 0)
  :config (show-paren-mode +1))
#+END_SRC
** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful,
let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
(use-package mwheel
  :ensure nil
  :config (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
                mouse-wheel-progressive-speed nil))
#+END_SRC
** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don't forget to refresh the version
control status as well.
#+BEGIN_SRC emacs-lisp
(use-package autorevert
  :ensure nil
  :config
  (global-auto-revert-mode +1)
  (setq auto-revert-interval 2
        auto-revert-check-vc-info t
        global-auto-revert-non-file-buffers t
        auto-revert-verbose nil))
#+END_SRC
** Spell Check

Turn on spell checking for text modes and configure keybindings under
~C-c s~.
#+begin_src emacs-lisp
(use-package flyspell
  :ensure nil
  :delight
  :preface
  (defun flyspell-check-next-highlighted-word ()
    "Custom function to spell check next highlighted word
Based off https://www.emacswiki.org/emacs/FlySpell#h5o-7"
    (interactive)
    (let ((previous-point (point)))
      (flyspell-goto-next-error)
      (ispell-word)
      (goto-char previous-point)))
  :general
  (calum/leader-def
    :infix "s"
    :prefix-command 'spell-check-map
    "t" '(flyspell-mode
          :which-key "toggle spell check")
    "p" '(flyspell-check-previous-highlighted-word
          :which-key "spell check previous word")
    "n" '(flyspell-check-next-highlighted-word
          :which-key "spell check next word")
    "b" '(ispell-buffer
          :which-key "spell check buffer")))
#+end_src
** Eldoc
Just disabling the display in the mode-bar.
#+begin_src emacs-lisp
(use-package eldoc
  :delight)
#+end_src
** Ediff
Make ediff not use a new frame for the control window, it doesn't play
nicely with xmonad.
#+begin_src emacs-lisp
(use-package ediff
  :config
  (setq ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src
** Latex
#+begin_src emacs-lisp
(use-package tex-mode
  :preface
  (defun latexindent-format-buffer ()
    (interactive)
    (replace-buffer-with-shell-command "latexindent")
    (recenter))
  :hook
  (TeX-mode . visual-line-mode)
  (TeX-mode . visual-fill-column-mode)
  ;; Format before save, based on https://emacs.stackexchange.com/a/5777
  (TeX-mode . (lambda () (add-hook 'before-save-hook 'latexindent-format-buffer nil 'local)))
  :config
  (setq tab-width 4))
#+end_src
* Third-party packages

** GUI enhancements
*** Load theme
Doom Nord theme
#+begin_src emacs-lisp
(use-package doom-themes
  :custom
  (doom-nord-brighter-modeline nil)
  (doom-nord-brighter-comments t)
  (doom-nord-comment-bg nil)
  (doom-nord-region-highlight t)
  :config
  (load-theme 'doom-nord t))
#+end_src

*** Syntax highlighting
Lightweight syntax highlighting improvement for numbers and escape
sequences (e.g. ~\n, \t~).
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))

  (use-package highlight-escape-sequences
    :hook (prog-mode . hes-mode))
#+END_SRC

*** Unicode fonts
Makes sure fonts for various icons are found:
https://github.com/rolandwalker/unicode-fonts

#+begin_src emacs-lisp
(use-package unicode-fonts
  :config
  (unicode-fonts-setup))
#+end_src

** Git Integration
*** Magit
See [[https://github.com/emacs-evil/evil-collection/blob/d1dec4ef730554a2b9d5b96098abf166685aaa38/modes/magit/evil-collection-magit.el#L289][here]] for useful mappings and commands
#+BEGIN_SRC emacs-lisp
(use-package magit
  :init
  (setq forge-add-default-bindings t)
  :general
  (calum/leader-def
    :keymaps 'override
    "g" '(magit-status :which-key "magit"))
  (:keymaps 'magit-mode-map
            "C-SPC" 'magit-diff-show-or-scroll-up
            "x" 'magit-delete-thing
            ;; Shift-tab
            "<backtab>" 'magit-section-cycle)
  :delight magit-wip-mode
  :preface
  (defun magit-choose ()
    "Choose git repo then open magit status
  From here https://github.com/magit/magit/issues/3139#issuecomment-319047034"
    (interactive)
    (let ((current-prefix-arg t))
      (call-interactively 'magit-status)))
  :config
  (if calum/magit-mode
      (progn
        ;; Open Magit in full screen
        (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)))

  ;; Automatically put us in full insert mode for commit editing
  (add-hook 'with-editor-mode-hook #'meow-insert)

  ;; Update commit views when scrolling through commits in status
  (add-hook 'magit-section-movement-hook 'magit-status-maybe-update-revision-buffer)

  ;; https://magit.vc/manual/magit/Wip-Modes.html
  (magit-wip-mode 1)

  (setq magit-diff-refine-hunk t
        )

  ;; From the mamual on magit-branch-or-checkout
  (transient-replace-suffix 'magit-branch 'magit-checkout
    '("b" "dwim" magit-branch-or-checkout))
  (transient-append-suffix 'magit-log "-L"
    '("-m" "Omit merge commits" "--no-merges"))
  (transient-append-suffix 'magit-log-refresh "-L"
    '("-m" "Omit merge commits" "--no-merges"))
  )
#+END_SRC

https://github.com/dandavison/magit-delta
Slows down magit alot, and breaks the display, seemingly due to large
file (a package-lock.json)
#+begin_src emacs-lisp
;; (use-package magit-delta
;;   :hook (magit-mode . magit-delta-mode))
#+end_src

*** Forge
[[https://magit.vc/manual/forge/index.html#Top][Forge]] for Github integration in Magit. Expects the ~~/.authinfo~ file
to have been properly filled with the Github key (see the forge
documentation).
#+begin_src emacs-lisp
  (use-package forge
    :after magit
    :config
    (setq auth-sources '("~/.config/emacs/.authinfo")
          forge-owned-accounts '(("rynoV") nil)))
#+end_src

*** Code Review
#+begin_src emacs-lisp
(use-package code-review
  :general
  (calum/leader-def :keymaps 'forge-topic-mode-map
            "r" 'code-review-forge-pr-at-point
            )
  (calum/leader-def :keymaps 'code-review-mode-map
            "M-n" 'code-review-comment-jump-next
            "M-p" 'code-review-comment-jump-previous
            )
  :config
  (add-hook 'code-review-mode-hook #'emojify-mode)
  (setq code-review-fill-column 80)
  (setq code-review-auth-login-marker 'forge))
#+end_src

*** Git Gutter
#+begin_src emacs-lisp
(use-package git-gutter
  :config
  (global-git-gutter-mode +1))
#+end_src

** Text editing
*** Meow
#+begin_src emacs-lisp
(general-define-key
  "C-M-n" nil
  "C-M-p" nil
  "C-M-n" 'next-line
  "C-M-p" 'previous-line)
(use-package meow
  :demand t                             ; Necessary because :hook defers loading
  :preface
  (defun calum/meow-escape ()
    "Quit INSERT or quit minibuffer or do nothing. From https://github.com/meow-edit/meow/discussions/186#discussioncomment-1999930"
    (interactive)
    (cond
     ((meow-insert-mode-p)
      (meow-insert-exit))
     ((minibufferp)
      (keyboard-escape-quit))
     (t)))
  (defun calum/meow-setup ()
    (interactive)
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty
          meow--kbd-forward-line "C-M-n"
          meow--kbd-backward-line "C-M-p"
          meow-use-dynamic-face-color t
          meow-expand-exclude-mode-list nil)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("'" . calum/avy-map)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("/" . isearch-forward)
     '("?" . isearch-backward)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '(">" . meow-indent)
     '("<" . meow-pop-to-mark)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . undo-tree-redo)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . calum/avy-map)
     '("<escape>" . calum/meow-escape)))

  (defun calum/meow--minibuffer-setup ()
    "meow--minibuffer-setup but without the code to disable meow text editing"
    (when (or (member this-command meow-grab-fill-commands)
              (member meow--keypad-this-command meow-grab-fill-commands))
      (when-let ((s (meow--second-sel-get-string)))
        (insert s)))
    (meow-insert-mode))

  (defun calum/meow-setup-extra ()
    "From https://github.com/meow-edit/meow/discussions/186#discussioncomment-1999930"
    ;; Don't ignore cursor shape changes in minibuffer
    (delete (cons 'minibufferp 'meow--update-cursor-default)
            meow-update-cursor-functions-alist)
    ;; Remove default minibuffer setup
    (remove-hook 'minibuffer-setup-hook 'meow--minibuffer-setup)
    ;; Use INSERT state in minibuffer by default, then later we can
    ;; switch to NORMAL with ESC
    (add-hook 'minibuffer-setup-hook 'calum/meow--minibuffer-setup))
  :config
  (setq meow-keypad-leader-dispatch calum/leader)
  (calum/meow-setup)
  (add-hook 'meow-global-mode-hook #'calum/meow-setup-extra)
  (meow-global-mode 1))
#+end_src

*** Edit surrounding pairs
#+BEGIN_SRC emacs-lisp
(use-package emacs-surround
  :quelpa (emacs-surround :fetcher github :repo "ganmacs/emacs-surround")
  :general
  ("C-q" 'emacs-surround)
  :config
  (add-to-list 'emacs-surround-alist '("*" . ("*" . "*")))
  (add-to-list 'emacs-surround-alist '("`" . ("`" . "`")))
  )
#+END_SRC

** Org Mode
:PROPERTIES:
:ID:       14d53b60-22e4-416a-807d-33d001476862
:END:
*** General Setup
Documentation:
- [[help:org-capture-templates][Capture templates]]
- [[help:org-refile-targets][Org refile]]
- [[https://github.com/cdominik/cdlatex][CDLatex]]
- [[https://orgmode.org/manual/CDLaTeX-mode.html][CDLatex Org Mode]]
- [[info:org#Setting options][info:org#Setting options]]


Configures [[https://mobileorg.github.io/][Org Mobile]] syncing so I can write and view notes on my
IPhone. This requires [[https://rclone.org/docs/][rclone]] to be setup with a Dropbox provider named
~dropbox~.

#+begin_src emacs-lisp
(use-package cdlatex
  :if (not calum/magit-mode)
  :custom
  (cdlatex-make-sub-superscript-roman-if-pressed-twice t)
  (cdlatex-math-symbol-alist '((?\" ("\\cap"))))
  )
#+end_src

#+begin_src emacs-lisp
(use-package org
  :if (not calum/magit-mode)
  :ensure auctex
  :ensure cdlatex
  :hook ((org-mode . visual-line-mode)
         (org-mode . org-indent-mode)
         ;; Auto wrap lines while typing if they get too long
         (org-mode . turn-on-org-cdlatex)
         ;; org-cdlatex-mode is useful for working with latex in org
         (org-mode . turn-on-auto-fill)
         (org-mode . calum/set-keyword-faces-org)
         (org-metaleft . calum/org-metaleft-hook)
         (org-metaright . calum/org-metaright-hook))
  :delight
  (visual-line-mode)
  (auto-fill-function) ; Hide auto fill mode
  :preface
  (defun calum/set-keyword-faces-org ()
    "https://hugocisneros.com/org-config/#hide-face-characters"
    (mapc (lambda (pair) (push pair prettify-symbols-alist))
          '(("TODO" .     "")
            ("DONE" .     "")
            ("#+begin_quote" . "“")
            ("#+end_quote" . "”")))
    (prettify-symbols-mode +1)
    )

  (defun calum/paste-html-to-org ()
    "Take content from clipboard that can be converted to HTML and paste it as Org mode text using Pandoc

Based off this https://github.com/howardabrams/dot-files/blob/master/emacs-org.org#better-pasting"
    (interactive)
    (let ((text (shell-command-to-string "xclip -out -selection 'clipboard' -t text/html | pandoc -f html -t org")))
      (kill-new text)
      (yank)))
  (defun calum/org-at-item-p ()
    (or (org-at-item-p)
        (and (org-region-active-p)
             (save-excursion
               (goto-char (region-beginning))
               (org-at-item-p)))))

  (defun calum/org-metaleft-hook ()
    (if (calum/org-at-item-p)
        (call-interactively 'org-outdent-item-tree)))

  (defun calum/org-metaright-hook ()
    (if (calum/org-at-item-p)
        (call-interactively 'org-indent-item-tree)))

  (defun calum/insert-subscript (arg)
    "Insert org/latex subscript
Intended for use with 'cdlatex-tab'.
Use numeric prefix arg to insert number."
    (interactive "P")
    (insert (concat "_{" (if arg (format "%s" arg)) "}"))
    (backward-char 1))

  (defun calum/insert-superscript (arg)
    "Insert org/latex superscript
Intended for use with 'cdlatex-tab'
Use numeric prefix arg to insert number."
    (interactive "P")
    (insert (concat "^{" (if arg (format "%s" arg)) "}"))
    (backward-char 1))

  (defun calum/org-mobile-pull ()
    "Uses dropbox and rclone to pull changes from org mobile"
    (interactive)
    (message "Pulling changes from dropbox")
    (call-process-shell-command "rclone sync --fast-list dropbox: ~/Dropbox")
    (message "Done pulling")
    (org-mobile-pull)
    (org-save-all-org-buffers))

  (defun calum/org-mobile-push ()
    "Uses dropbox and rclone to push changes to org mobile"
    (interactive)
    (org-super-agenda-mode 0)
    (org-mobile-push)
    (message "Pushing changes to dropbox")
    (call-process-shell-command "rclone sync --fast-list ~/Dropbox dropbox:")
    (message "Done")
    (org-super-agenda-mode 1))

  (defun calum/org-mobile-sync ()
    "Uses dropbox and rclone to pull then push changes to org mobile"
    (interactive)
    (calum/org-mobile-pull)
    (calum/org-mobile-push))

  (defun calum/open-heading-links ()
    (interactive)
    (save-excursion
      (call-interactively 'org-previous-visible-heading)
      (org-open-at-point)))

  (defun calum/capture-frame-finish (&rest args)
    (interactive)
    (if (equal "Org Capture" (frame-parameter nil 'name))
        (delete-frame)))

  (defun calum/capture-frame-delete-other-windows (&rest args)
    (interactive)
    (if (equal "Org Capture" (frame-parameter nil 'name))
        (delete-other-windows)))

  (defun calum/capture-frame (keys)
    (interactive)
    (require 'org-capture)
    (advice-add 'org-capture-finalize :after #'calum/capture-frame-finish)
    (advice-add 'org-switch-to-buffer-other-window :after #'calum/capture-frame-delete-other-windows)
    (org-capture nil keys))

  :general
  (calum/leader-def
    :keymaps 'override
    "v" 'calc-dispatch)
  (calum/leader-def
    :infix "o"
    :prefix-command 'org-actions-map
    "a" 'org-agenda
    "l" 'org-store-link
    "c" 'org-capture
    "j" '(org-journal-new-entry :which-key "new journal entry")
    "d" 'org-decrypt-entry
    "e" 'org-encrypt-entry
    "p" 'calum/org-mobile-push
    "f" 'calum/org-mobile-pull
    "s" 'calum/org-mobile-sync
    "o" 'calum/open-heading-links
    "i" 'org-download-clipboard)
  (:keymaps 'org-mode-map
            :predicate '(meow-insert-mode-p)
            "C-d" 'cdlatex-tab
            "C-s" 'calum/insert-superscript
            "C-M-s" 'calum/insert-subscript)
  :custom-face
  ;; set basic title font
  (org-level-8 ((nil :weight bold :inherit 'default)))
  ;; Low levels are unimportant => no scaling
  (org-level-7 ((nil :inherit 'org-level-8)))
  (org-level-6 ((nil :inherit 'org-level-8)))
  (org-level-5 ((nil :inherit 'org-level-8)))
  (org-level-4 ((nil :inherit 'org-level-8)))
  (org-level-3 ((nil :inherit 'org-level-8 :height 1.1)))
  (org-level-2 ((nil :inherit 'org-level-8 :height 1.2)))  (org-level-1 ((nil :inherit 'org-level-8 :height 1.3)))  :config
  (setq org-ellipsis " ⤸ "
        org-hidden-keywords '(title)
        org-cycle-level-faces nil
        org-n-level-faces 4
        org-pretty-entities t
        org-startup-indented t)

  (setq org-format-latex-options
        '(:foreground default
                      :background default
                      :scale 1.4
                      :html-foreground "Black"
                      :html-background "Transparent"
                      :html-scale 1.0
                      :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))

  ;; Use org-agenda-file-to-front (C-c [) to add the current file to
  ;; the list of agenda files
  (setq org-directory "~/org")
  (make-directory org-directory t)
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  ;; Set to the name of the file where notes captured on mobile will
  ;; be stored
  (setq org-mobile-inbox-for-pull org-default-notes-file)
  (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
  (make-directory org-mobile-directory t)

  ;; setsid required for xdg-open to work, from here
  ;; https://askubuntu.com/a/883905
  (setq org-file-apps '((auto-mode . emacs)
                        (directory . "setsid -w xdg-open %s")
                        ("\\.mm\\'" . default)
                        ("\\.x?html?\\'" . default)
                        ("\\.pdf\\'" . "setsid -w xdg-open %s")
                        (t . "setsid -w xdg-open %s")))

  (org-link-set-parameters "editpdf"
                           :follow (lambda (path)
                                     (start-process "" nil
                                                    "xournalpp" (expand-file-name path)))
                           :complete 'org-link-complete-file)

  ;; Don't keep indenting when adding whitespace
  (setq org-src-preserve-indentation t)
  ;; Tab indents using the src block's language's behaviour
  (setq org-src-tab-acts-natively t)
  ;; Don't ask for confirmation when evaluating src blocks
  (setq org-confirm-babel-evaluate nil)
  ;; Configure capture templates
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "" "Tasks")
           "* TODO %?\n  %i\n")
          ("n" "Note" entry (file+headline "" "Quick Notes")
           "* %U\n%?\n")
          ("m" "Meeting" entry (file+headline "mlabs.org" "Meetings")
           "* %U\n%?\n" :prepend t)
          ))
  ;; Custom agenda views based on org files
  (setq org-agenda-custom-commands
        '(("p" "Personal" todo ""
           ((org-agenda-category-filter-preset '("+calum"))))
          ("w" . "MLabs")
          ("wc" "CTL" todo ""
           ((org-agenda-category-filter-preset '("+ctl"))
            (org-agenda-files '("~/org/mlabs.org"))
            ))
          ("ww" "Other" todo ""
           ((org-agenda-category-filter-preset '("+mlabs"))
            (org-agenda-files '("~/org/mlabs.org"))
            ))
          ("s" . "School")
          ("so" "One Week School Agenda" agenda ""
           ((org-agenda-span 7)
            (org-super-agenda-groups nil)))
          ("st" "Two Week School Agenda" agenda ""
           ((org-agenda-span 14)
            (org-super-agenda-groups nil)))
          ("ss" "School Agenda" agenda ""
           ((org-agenda-span 21)
            (org-super-agenda-groups nil)))
          ("sm" "School Tasks without Assessments" todo ""
           ((org-agenda-category-filter-preset '("+school"))
            (org-agenda-files '("~/org/school.org"))
            ))
          ("sn" "School Tasks with Assessments" todo ""
           ((org-agenda-category-filter-preset '("+school" "+assessments"))
            (org-agenda-files '("~/org/school.org"))
            ))
          ("u" "Unscheduled TODO" todo ""
           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))
            (org-agenda-files '("~/org/school.org"))
            ))))
  ;; Look across all agenda files for refiling
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 3))))
  ;; Allow specifying refile location using a full path including file name
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-completion-use-ido t)

  ;; Automatically create a header if it doesn't already exist in the refile target path
  (setq org-refile-allow-creating-parent-nodes t)

  ;; Don't start clock from the previous clock out
  (setq org-clock-continuously nil)
  ;; Save clock history and the current clock when emacs closes
  (setq org-clock-persist t)
  (org-clock-persistence-insinuate)

  ;; After refiling something, save all the buffers automatically
  (advice-add 'org-refile :after '(lambda (&rest _)
                                    (org-save-all-org-buffers)))

  (setq org-M-RET-may-split-line nil)

  ;; Start agenda on current day
  (setq org-agenda-start-on-weekday nil)
  (org-babel-do-load-languages
   'org-babel-load-languages '((emacs-lisp . t)
                               (python . t)))

  ;; Don't show inline images with their actual width
  (setq org-image-actual-width nil)
  )
#+end_src

*** Additional Packages
Show nicer bullet points for headers: https://github.com/integral-dw/org-superstar-mode

#+begin_src emacs-lisp
(use-package org-superstar
  :after org
  :preface
  (defun superstar-auto-lightweight-mode ()
    "Start Org Superstar differently depending on the number of lists items. From https://github.com/integral-dw/org-superstar-mode#fast-plain-list-items"
    (let ((list-items
           (count-matches "^[ \t]*?\\([+-]\\|[ \t]\\*\\)"
                          (point-min) (point-max))))
      (unless (< list-items 100)
        (org-superstar-toggle-lightweight-lists)))
    (org-superstar))
  :hook
  (org-mode . superstar-auto-lightweight-mode)
  :custom-face
  (org-superstar-first ((nil :foreground "#B48EAD")))
  :custom
  ;; Set different bullets, with one getting a terminal fallback.
  (org-superstar-headline-bullets-list '("◉" ("🞛" ?◈) "○" "▷"))
  ;; Don't show headline bullets
  ;; (org-superstar-headline-bullets-list nil)
  ;; Set up a different marker for graphic display.
  (org-superstar-first-inlinetask-bullet ?🞸)
  ;; Stop cycling bullets to emphasize hierarchy of headlines.
  (org-superstar-cycle-headline-bullets nil)
  (org-superstar-leading-fallback ?.)
  (org-superstar-item-bullet-alist
   '((?* . ?•)
     (?+ . ?➤)
     (?- . ?–)))
  (org-superstar-special-todo-items t)
  (org-superstar-remove-leading-stars nil)
  )
#+end_src

https://github.com/amluto/org-mode/blob/master/lisp/org-inlinetask.el
#+begin_src emacs-lisp
(use-package org-inlinetask
  :after org
  :ensure nil
  :custom
  (org-inlinetask-show-first-star t)
  :custom-face
  (org-inlinetask ((nil :foreground nil :inherit 'bold))))
#+end_src

[[https://emacs.stackexchange.com/a/22552][Org-indent must be diminished after loading.]]
#+begin_src emacs-lisp
(use-package org-indent
  :if (not calum/magit-mode)
  :ensure nil
  :delight org-indent-mode)
#+end_src

#+begin_src emacs-lisp
(require 'ox-md)
#+end_src

#+begin_src emacs-lisp
(use-package ox-gfm)
#+end_src

#+begin_src emacs-lisp
(require 'ox-latex)
(add-to-list 'org-latex-classes
             '("awesome-cv"
               "\\documentclass[11pt, a4paper]{awesome-cv}
               [NO-DEFAULT-PACKAGES]"
               ("\\cvsection{%s}" . "\\cvsection*{%s}")
               ("\\cvparagraph{%s}" . "\\cvparagraph*{%s}")))
(add-to-list 'org-latex-classes
             '("cpsc433"
               "\\documentclass[11pt, a4paper]{article}
               \\usepackage[margin=0.9in,bmargin=1.0in,tmargin=1.0in]{geometry}
               \\usepackage{tikzit}
               \\input{paper.tikzstyles}
               \\newcommand{\\N}{\\mathbb{N}}
               \\newcommand{\\Z}{\\mathbb{Z}}
               \\newcommand{\\As}{A_{\\text{set}}}
               \\newcommand{\\Ss}{S_{\\text{set}}}
               \\newcommand{\\Ts}{T_{\\text{set}}}
               \\newcommand{\\Ps}{P_{\\text{set}}}
               \\newcommand{\\Ks}{K_{\\text{set}}}
               \\newcommand{\\Gs}{G_{\\text{set}}}
               \\newcommand{\\fv}{f_{\\text{Wert}}}
               \\newcommand{\\fs}{f_{\\text{select}}}
               \\newcommand{\\Ext}{\\text{Ext}}
               \\newcommand{\\Env}{\\text{Env}}
               \\newcommand{\\Inss}{\\text{Ins}_{set}}
               \\newcommand{\\Prob}{\\mathsf{Prob}}
               \\newcommand{\\Div}{\\mathsf{Div}}
               \\newcommand{\\Andmodel}{\\mathsf{A}_{\\wedge}}
               \\newcommand{\\Andstate}{\\mathsf{S}_{\\wedge}}
               \\newcommand{\\Andtrans}{\\mathsf{T}_{\\wedge}}
               \\newcommand{\\Anderw}{\\mathsf{Erw}_{\\wedge}}
               \\newcommand{\\Anderws}{\\mathsf{Erw}^{*}_{\\wedge}}
               \\newcommand{\\Atree}{\\mathsf{Atree}}
               \\newcommand{\\fleaf}{f_{\\mathsf{leaf}}}
               \\newcommand{\\ftrans}{f_{\\mathsf{trans}}}
               \\newcommand{\\pr}{\\mathsf{pr}}
               \\newcommand{\\sol}{\\mathsf{sol}}
               \\newcommand{\\yes}{\\mathsf{yes}}
               \\newcommand{\\Courses}{\\mathsf{Courses}}
               \\newcommand{\\Labs}{\\mathsf{Labs}}
               \\newcommand{\\Slots}{\\mathsf{Slots}}
               \\newcommand{\\coursemax}{\\mathsf{coursemax}}
               \\newcommand{\\labmax}{\\mathsf{labmax}}
               \\newcommand{\\assign}{\\mathsf{assign}}
               \\newcommand{\\BestCase}{\\mathsf{BestCase}}
               \\newcommand{\\Valid}{\\mathsf{Valid}}
               \\newcommand{\\Complete}{\\mathsf{Complete}}
               \\newcommand{\\Possibilities}{\\mathsf{Possibilities}}
               \\newcommand{\\Depth}{\\mathsf{Depth}}
               \\newcommand{\\theTreeSoFar}{\\mathsf{theTreeSoFar}}
               \\newcommand{\\Constr}{\\mathsf{Constr}}
               \\newcommand{\\Eval}{\\mathsf{Eval}}
               \\usepackage[shortcuts]{extdash} % allow hyphenation with \\-/
               \\newcommand{\\ncompat}{\\mathsf{not\\-/compat}}
               \\newcommand{\\partassign}{\\mathsf{partassign}}
               \\newcommand{\\unwanted}{\\mathsf{unwanted}}
               \\newcommand{\\coursemin}{\\mathsf{coursemin}}
               \\newcommand{\\labmin}{\\mathsf{labmin}}
               \\newcommand{\\pencoursemin}{\\mathsf{pen\\_coursemin}}
               \\newcommand{\\penlabmin}{\\mathsf{pen\\_labmin}}
               \\newcommand{\\pref}{\\mathsf{preference}}
               \\newcommand{\\pair}{\\mathsf{pair}}
               \\newcommand{\\pennotpaired}{\\mathsf{pen\\_notpaired}}
               \\newcommand{\\pensection}{\\mathsf{pen\\_section}}
               \\usepackage{fontspec}
               \\usepackage{unicode-math}
               \\usepackage{amsmath}
               \\usepackage{hyperref}
               \\usepackage{braket}
               \\usepackage{amsthm}
               \\theoremstyle{definition}
               \\newtheorem{defn}{Definition}[section]
               [NO-DEFAULT-PACKAGES]
               "
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(add-to-list 'org-latex-classes
             '("cpsc413"
               "\\documentclass[11pt, a4paper]{article}
               \\usepackage[margin=0.9in,bmargin=1.0in,tmargin=1.0in]{geometry}
               \\usepackage[ruled,linesnumbered]{algorithm2e}
               \\usepackage{amsmath}
               \\usepackage{amsthm}
               \\usepackage{hyperref}
               \\theoremstyle{definition}
               \\newtheorem{defn}{Definition}[section]
               \\newtheorem{lemma}{Lemma}[section]
               \\newtheorem{property}{Property}[section]
               \\theoremstyle{remark}
               \\newtheorem*{remark}{Remark}
               \\SetKwComment{Comment}{/* }{ */}
               \\newcommand{\\pluseq}{\\mathrel{+}=}
               \\newcommand{\\minuseq}{\\mathrel{-}=}
               \\newcommand{\\var}{\\texttt}
               \\newcommand{\\NP}{\\mathcal{NP}}
               \\newcommand{\\pred}{\\leq_P}
               \\usepackage{mathtools}
               \\DeclarePairedDelimiter\\ceil{\\lceil}{\\rceil}
               \\DeclarePairedDelimiter\\floor{\\lfloor}{\\rfloor}
               "
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

To allow for ignoring headlines with an "ignore" tag in when exporting
from Org Mode, from [[https://emacs.stackexchange.com/a/41685][here]].
#+begin_src emacs-lisp
(use-package org-contrib
  :config
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))
  )
#+end_src

Call ~org-download-clipboard~ to paste the most recent screenshot.
#+begin_src emacs-lisp
(use-package org-download
  :config
  (setq-default org-download-image-dir "screenshots")
  (setq org-download-screenshot-method "xclip"
        org-download-display-inline-images nil
        org-download-image-org-width 900))
#+end_src

*** Super Agenda
[[https://github.com/alphapapa/org-super-agenda][Org super agenda]] for organizing the agenda view in different ways.
#+begin_src emacs-lisp
(use-package org-super-agenda
  :if (not calum/magit-mode)
  :after org
  :config
  (setq org-super-agenda-groups
        '(
          ;; Organize by headers
          (:auto-outline-path t)))
  ;; Note: To get the empty group hiding to work, I had to add the following line to org-super-agenda.el after line 308 in org-super-agenda--make-agenda-header:
  ;; (put-text-property 0 (length header) 'org-super-agenda-header t header)
  ;; This is because the org-super-agenda--hide-or-show-groups function relies on the text property, and line 308 did not seem to be adding the property correctly
  ;; After editing that file, run byte-recompile-directory
  (setq org-super-agenda-hide-empty-groups t)
  (org-super-agenda-mode 1)
  ;; Ensure evil-org bindings work on super agenda headers
  ;; From https://github.com/alphapapa/org-super-agenda/issues/50#issuecomment-446272744
  (setq org-super-agenda-header-map (make-sparse-keymap)))
#+end_src

*** Org Journal
#+begin_src emacs-lisp
(use-package org-journal
  :custom
  (org-journal-dir "~/org/journal/")
  (org-journal-file-type 'weekly)
  :config
  (setq org-crypt-key "Calum Sieppert <sieppertcalum@gmail.com>"
        org-tags-exclude-from-inheritance '("crypt")))
#+end_src

*** Ledger
https://github.com/ledger/ledger-mode
https://github.com/atheriel/evil-ledger
#+begin_src emacs-lisp
(use-package ledger-mode
  :mode ("\\.dat\\'"
         "\\.ledger\\'")
  :custom (ledger-clear-whole-transactions t)
  :preface
  ; Clean up the ledger buffer before saving. `save-excursion' doesn't
  ; work for some reason.
  (defun calum/ledger-before-save-hook ()
    (when (eq major-mode 'ledger-mode)
      (let ((temp-point (point)))
        (when (buffer-modified-p)
          (with-demoted-errors "Error: %S" (ledger-mode-clean-buffer)))
        (goto-char temp-point)
        (recenter))))
  :config
  (add-hook 'before-save-hook #'calum/ledger-before-save-hook)
  (add-hook 'ledger-mode-hook #'ledger-flymake-enable))
#+end_src

** Snippets with tempel
- https://github.com/minad/tempel
- https://github.com/Crandel/tempel-collection
  - https://github.com/Crandel/tempel-collection/blob/main/templates/org.eld
  - https://github.com/Crandel/tempel-collection/blob/main/templates/fundamental.eld
  - https://github.com/Crandel/tempel-collection/blob/main/templates/emacs-lisp.eld
#+begin_src emacs-lisp
(use-package tempel
  :preface
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))
  (defun tempel-reload ()
    "From https://github.com/minad/tempel/issues/74"
    (interactive)
    (setq tempel--path-templates nil))
  :hook
  (prog-mode . tempel-setup-capf)
  (text-mode . tempel-setup-capf)
  )

(use-package tempel-collection)
#+end_src

** Completion and search
*** Minibuffer completion with consult
- [ ] Make sure lsp is setup properly
  - [ ] Replace lsp-ido-workspace-symbol

#+begin_src emacs-lisp
(use-package consult
  :general
  (calum/leader-def
    "b" 'consult-buffer)
  ;; C-c bindings (mode-specific-map)
  ("C-c h" 'consult-history)
  ("C-c m" 'consult-mode-command)
  ("C-c k" 'consult-kmacro)
  ;; C-x bindings (ctl-x-map)
  ("C-x M-:" 'consult-complex-command) ;; orig. repeat-complex-command
  ("C-x C-b" nil)
  ("C-x C-b" 'consult-bookmark)
  ("C-x 4 b" 'consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
  ("C-x 5 b" 'consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame
  ("C-x m" 'consult-man)
  ;; Custom M-# bindings for fast register access
  ("M-#" 'consult-register-load)
  ("M-'" 'consult-register-store) ;; orig. abbrev-prefix-mark (unrelated)
  ("C-M-#" 'consult-register)
  ;; Other custom bindings
  ("M-y" 'consult-yank-pop)     ;; orig. yank-pop
  ("<help> a" 'consult-apropos) ;; orig. apropos-command
  ;; M-g bindings (goto-map)
  ("M-g e" 'consult-compile-error)
  ("M-g f" 'consult-flycheck)     ;; Alternative: consult-flymake
  ("M-g g" 'consult-goto-line)   ;; orig. goto-line
  ("M-g M-g" 'consult-goto-line) ;; orig. goto-line
  ("M-g o" 'consult-org-heading)
  ("M-g a" 'consult-org-agenda)
  ("M-g j" 'consult-mark)
  ("M-g k" 'consult-global-mark)
  ("M-g i" 'consult-imenu)
  ("M-g I" 'consult-imenu-multi)
  ;; M-s bindings (search-map)
  ("M-s d" 'consult-find)
  ("M-s D" 'consult-locate)
  ("M-s g" 'consult-grep)
  ("M-s G" 'consult-git-grep)
  ("M-s r" 'consult-ripgrep)
  ("M-s l" 'consult-line)
  ("M-s L" 'consult-line-multi)
  ("M-s m" 'consult-multi-occur)
  ("M-s k" 'consult-keep-lines)
  ("M-s u" 'consult-focus-lines)
  ;; Isearch integration
  ("M-s e" 'consult-isearch-history)
  (:keymaps 'isearch-mode-map
            "M-e" 'consult-isearch-history ;; orig. isearch-edit-string
            "M-s e" 'consult-isearch-history ;; orig. isearch-edit-string
            )
  ;; Minibuffer history
  (:keymaps 'minibuffer-local-map
            "M-s" 'consult-history ;; orig. next-matching-history-element
            "M-r" 'consult-history) ;; orig. previous-matching-history-element
  :init
  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-recent-file
   consult--source-project-recent-file
   :preview-key (kbd "M-."))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key (kbd "C-+"))

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-function (lambda (_) (projectile-project-root))))
#+end_src
**** Consult extensions
#+begin_src emacs-lisp
(use-package consult-projectile
  :config
  (setq consult-projectile-sources
        '(consult-projectile--source-projectile-buffer
          consult-projectile--source-projectile-file
          consult-projectile--source-projectile-recentf
          consult-projectile--source-projectile-dir
          consult-projectile--source-projectile-project
          )))
#+end_src

#+begin_src emacs-lisp
(use-package consult-dir
  :ensure t
  :bind (("C-x C-d" . consult-dir)
         :map minibuffer-local-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file))
  :config
  (setq consult-dir-project-list-function #'consult-dir-projectile-dirs))
#+end_src

#+begin_src emacs-lisp
(use-package wgrep)
#+end_src

#+begin_src emacs-lisp
(use-package consult-lsp)
#+end_src

#+begin_src emacs-lisp
(use-package consult-flycheck)
#+end_src
*** Completion UI
[[https://github.com/minad/vertico][Vertical completion UI]]; [[https://github.com/minad/vertico/wiki][Wiki]]
#+begin_src emacs-lisp
(use-package vertico
  :hook
  (minibuffer-setup . vertico-repeat-save)
  :init
  (vertico-mode)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)

  (setq completion-in-region-function
        (lambda (&rest args)
          (apply (if vertico-mode
                     #'consult-completion-in-region
                   #'completion--in-region)
                 args)))

  ;; Show arrow before current candidate
  (advice-add #'vertico--format-candidate :around
              (lambda (orig cand prefix suffix index _start)
                (setq cand (funcall orig cand prefix suffix index _start))
                (concat
                 (if (= vertico--index index)
                     (propertize "» " 'face 'vertico-current)
                   "  ")
                 cand)))


  ;; Show input below candidates
  (defun vertico-bottom--display-candidates (lines)
    "Display LINES in bottom."
    (move-overlay vertico--candidates-ov (point-min) (point-min))
    (unless (eq vertico-resize t)
      (setq lines (nconc (make-list (max 0 (- vertico-count (length lines))) "\n") lines)))
    (let ((string (apply #'concat lines)))
      (add-face-text-property 0 (length string) 'default 'append string)
      (overlay-put vertico--candidates-ov 'before-string string)
      (overlay-put vertico--candidates-ov 'after-string nil))
    (vertico--resize-window (length lines)))

  (advice-add #'vertico--display-candidates :override #'vertico-bottom--display-candidates)
  :general
  (:keymaps 'vertico-map
            "C-' '" 'vertico-quick-exit
            "C-' j" 'vertico-quick-jump
            "C-' i" 'vertico-quick-insert
            )
  )
#+end_src

Enable richer annotations using the [[https://github.com/minad/marginalia][Marginalia]] package
#+begin_src emacs-lisp
(use-package marginalia
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))
#+end_src

https://github.com/oantolin/embark
#+begin_src emacs-lisp
(use-package embark
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :general
  (:keymaps 'override "C-," 'embark-act-noquit)
  (:keymaps 'override "C-;" 'embark-dwim)
  ("C-h B" 'embark-bindings) ;; alternative for `describe-bindings'
  (:keymaps 'embark-general-map
            :prefix-command 'my-embark-actions-map
            :prefix "C-SPC"
            "c" '(calum/copy-embark-target-to-clipboard
                  :which-key "copy to clipboard"))

  :preface
  (defun calum/copy-embark-target-to-clipboard (target)
    "Copy the embark target to the system clipboard"
    (gui-set-selection 'CLIPBOARD target))
  (defun embark-act-noquit ()
    "Run action but don't quit the minibuffer afterwards."
    (interactive)
    (let ((embark-quit-after-action nil))
      (embark-act)))
  (defun embark-which-key-indicator ()
    "An embark indicator that displays keymaps using which-key.
The which-key help message will show the type and value of the
current target followed by an ellipsis if there are further
targets. https://github.com/oantolin/embark/wiki/Additional-Configuration#use-which-key-like-a-key-menu-prompt"
    (lambda (&optional keymap targets prefix)
      (if (null keymap)
          (which-key--hide-popup-ignore-command)
        (which-key--show-keymap
         (if (eq (plist-get (car targets) :type) 'embark-become)
             "Become"
           (format "Act on %s '%s'%s"
                   (plist-get (car targets) :type)
                   (embark--truncate-target (plist-get (car targets) :target))
                   (if (cdr targets) "…" "")))
         (if prefix
             (pcase (lookup-key keymap prefix 'accept-default)
               ((and (pred keymapp) km) km)
               (_ (key-binding prefix 'accept-default)))
           keymap)
         nil nil t (lambda (binding)
                     (not (string-suffix-p "-argument" (cdr binding))))))))

  (defun embark-hide-which-key-indicator (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))

  ;; Use a minimal indicator, and type C-h for help
  (setq embark-indicators
        '(embark-which-key-indicator
          embark-highlight-indicator
          embark-isearch-highlight-indicator))

  (advice-add #'embark-completing-read-prompter
              :around #'embark-hide-which-key-indicator)
  )

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
*** Completion style
https://github.com/oantolin/orderless

Config based on:
https://github.com/minad/consult/wiki#minads-orderless-configuration

Use %pattern to try out variants of characters in pattern, for example
%2 to match 2 or unicode superscript 2 (and probably other things).
#+begin_src emacs-lisp
(use-package orderless
  :config
  (defvar +orderless-dispatch-alist
    '((?% . char-fold-to-regexp)
      (?! . orderless-without-literal)
      (?`. orderless-initialism)
      (?= . orderless-literal)
      (?~ . orderless-flex)))

  (defun +orderless--suffix-regexp ()
    (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
        (format "[%c-%c]*$"
                consult--tofu-char
                (+ consult--tofu-char consult--tofu-range -1))
      "$"))

  ;; Recognizes the following patterns:
  ;; * ~flex flex~
  ;; * =literal literal=
  ;; * %char-fold char-fold%
  ;; * `initialism initialism`
  ;; * !without-literal without-literal!
  ;; * .ext (file extension)
  ;; * regexp$ (regexp matching at end)
  (defun +orderless-dispatch (word _index _total)
    (cond
     ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
     ((string-suffix-p "$" word)
      `(orderless-regexp . ,(concat (substring word 0 -1) (+orderless--suffix-regexp))))
     ;; File extensions
     ((and (or minibuffer-completing-file-name
               (derived-mode-p 'eshell-mode))
           (string-match-p "\\`\\.." word))
      `(orderless-regexp . ,(concat "\\." (substring word 1) (+orderless--suffix-regexp))))
     ;; Ignore single !
     ((equal "!" word) `(orderless-literal . ""))
     ;; Prefix and suffix
     ((if-let (x (assq (aref word 0) +orderless-dispatch-alist))
          (cons (cdr x) (substring word 1))
        (when-let (x (assq (aref word (1- (length word))) +orderless-dispatch-alist))
          (cons (cdr x) (substring word 0 -1)))))))

  ;; Define orderless style with initialism by default
  (orderless-define-completion-style +calum/orderless-completion-style
    (orderless-matching-styles
     '(orderless-flex
       orderless-initialism
       orderless-prefixes
       orderless-literal
       orderless-regexp)))

  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides
        '((file (styles partial-completion)) ;; partial-completion is tried first
          ;; (buffer (styles +calum/orderless-completion-style))
          ;; (command (styles +calum/orderless-completion-style))
          ;; (variable (styles +calum/orderless-completion-style))
          ;; (symbol (styles +calum/orderless-completion-style))
          )
        orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
        orderless-style-dispatchers '(+orderless-dispatch)
        ))
#+end_src
*** Corfu for autocompletion
https://github.com/minad/corfu
https://github.com/minad/corfu/wiki

#+begin_src emacs-lisp
(use-package corfu
  :demand t
  ;; Optional customizations
  :custom
  (corfu-cycle t) ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-quit-at-boundary nil) ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  (corfu-preselect-first nil) ;; Disable candidate preselection
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin
  (corfu-popupinfo-delay nil)

  :general
  ("C-n" (general-predicate-dispatch nil
           (bound-and-true-p vertico--input) 'vertico-next
           t 'completion-at-point))
  (:keymaps 'corfu-map
            "C-n" 'corfu-next
            "C-p" 'corfu-previous
            "M-m" 'corfu-move-to-minibuffer
            "C-'" nil
            "C-' '" 'corfu-quick-complete
            "C-' i" 'corfu-quick-insert
            "C-' j" 'corfu-quick-jump
            [remap move-beginning-of-line] 'corfu-beginning-of-prompt
            [remap move-end-of-line] 'corfu-end-of-prompt
            ;; For popupinfo:
            ;; M-d, M-l, M-t: docs, location, toggle
            ;; scroll-other-window(-down) (C-M-v, C-M-S-v)
            )

  :preface
  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active. https://github.com/minad/corfu#completing-in-the-minibuffer"
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input))
      (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                  corfu-popupinfo-delay nil)
      (corfu-mode 1)))

  (defun corfu-move-to-minibuffer ()
    "Function to transfer the current corfu completion list to the minibuffer. https://github.com/minad/corfu#transfer-completion-to-the-minibuffer"
    (interactive)
    (let ((completion-extra-properties corfu--extra)
          completion-cycle-threshold completion-cycling)
      (apply #'consult-completion-in-region completion-in-region--data)))

  (defun corfu-beginning-of-prompt ()
    "Move to beginning of completion input."
    (interactive)
    (corfu--goto -1)
    (goto-char (car completion-in-region--data)))

  (defun corfu-end-of-prompt ()
    "Move to end of completion input."
    (interactive)
    (corfu--goto -1)
    (goto-char (cadr completion-in-region--data)))
  :config
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

  (global-corfu-mode)
  (corfu-echo-mode)
  (corfu-history-mode)
  (corfu-popupinfo-mode)
  )
#+end_src

**** Cape for autocomplete extensions
#+begin_src emacs-lisp
(use-package cape
  :general
  (calum/leader-def
    :infix "c"
    "p"  'completion-at-point ;; capf
    "t"  'complete-tag        ;; etags
    "d"  'cape-dabbrev        ;; or dabbrev-completion
    "h"  'cape-history
    "f"  'cape-file
    "k"  'cape-keyword
    "s"  'cape-symbol
    "a"  'cape-abbrev
    "i"  'cape-ispell
    "l"  'cape-line
    "w"  'cape-dict
    "n"  'tempel-complete
    "\\" 'cape-tex
    "_"  'cape-tex
    "^"  'cape-tex
    "&"  'cape-sgml
    "r"  'cape-rfc1345 ;; Complete unicode char using RFC 1345 mnemonics.
    )
  :config
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)

  ;; Sanitize the `pcomplete-completions-at-point' Capf. The Capf has
  ;; undesired side effects on Emacs 28 and earlier. From
  ;; https://github.com/minad/cape#other-capf-transformers
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)
  )
#+end_src

**** Kind icons for autocomplete icons
#+begin_src emacs-lisp
(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
*** Project support
#+begin_src emacs-lisp
(use-package rg)
(use-package projectile
  :delight
  :ensure t
  :init
  (projectile-mode +1)
  :preface
  (defun calum/select-project-magit ()
    (interactive)
    (setq current-prefix-arg '(4))
    (call-interactively 'projectile-vc))
  :general
  (calum/leader-def
    :keymaps 'projectile-mode-map
    "p" '(:keymap projectile-command-map :which-key "project")
    "p w" 'calum/select-project-magit)
  :config
  (add-to-list 'projectile-other-file-alist '("purs" "js"))
  (add-to-list 'projectile-other-file-alist '("js" "purs"))
  )
(use-package treemacs-projectile)
#+end_src
*** TODO File manager
Note: for all-the-icons, needed to run ~all-the-icons-install-fonts~.
#+begin_src emacs-lisp
(use-package dirvish
  :init
  ;; Let Dirvish take over Dired globally
  (dirvish-override-dired-mode)
  :custom
  (dirvish-attributes '(all-the-icons file-size collapse subtree-state vc-state))
  (dirvish-bookmark-entries
   '(("h" "~/"                          "Home")
     ("d" "~/Downloads/"                "Downloads")))
  (dirvish-reuse-session t)
  :config
  (dirvish-peek-mode)
  (setq dired-dwim-target t)
  :bind
  ;; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
  (:map dired-mode-map ; Dirvish respects all the keybindings in this map
   ("h" . dired-up-directory)
   ("j" . dired-next-line)
   ("k" . dired-previous-line)
   ("l" . dired-find-file)
   ("i" . wdired-change-to-wdired-mode)
   ("." . dired-omit-mode)
   ("b"   . dirvish-bookmark-jump)
   ("f"   . dirvish-file-info-menu)
   ("y"   . dirvish-yank-menu)
   ("N"   . dirvish-narrow)
   ("^"   . dirvish-history-last)
   ("s"   . dirvish-quicksort) ; remapped `dired-sort-toggle-or-edit'
   ("?"   . dirvish-dispatch)  ; remapped `dired-summary'
   ("TAB" . dirvish-subtree-toggle)
   ("SPC" . dirvish-history-jump)
   ("M-n" . dirvish-history-go-forward)
   ("M-p" . dirvish-history-go-backward)
   ("M-l" . dirvish-ls-switches-menu)
   ("M-m" . dirvish-mark-menu)
   ("M-f" . dirvish-toggle-fullscreen)
   ("M-s" . dirvish-setup-menu)
   ("M-e" . dirvish-emerge-menu)
   ("M-j" . dirvish-fd-jump)))
#+end_src

*** Icons
https://github.com/iyefrat/all-the-icons-completion/

#+begin_src emacs-lisp
(use-package all-the-icons
  :demand t
  :config
  (add-to-list 'all-the-icons-extension-icon-alist
               '("purs" all-the-icons-fileicon "purescript" :v-adjust 0.0 :height 1.0))
  )

(use-package all-the-icons-completion
  :after all-the-icons
  :config
  (all-the-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src
** Programming Languages/Tools
*** Lisp
Setup completion for elisp to include words from the buffer and file
paths, based on https://github.com/minad/corfu/wiki#using-cape-to-tweak-and-combine-capfs.
#+begin_src emacs-lisp
(use-package emacs-lisp
  :ensure nil
  :preface
  (defun calum/setup-elisp ()
    (setq-local completion-at-point-functions
                `(tempel-expand
                  ,(cape-super-capf
                    #'elisp-completion-at-point
                    #'cape-dabbrev)
                  cape-file)
                cape-dabbrev-min-length 4))
  :hook (emacs-lisp-mode . calum/setup-elisp))
#+end_src

#+begin_src emacs-lisp
(use-package lispy
  :if (not calum/magit-mode)
  :hook (emacs-lisp-mode . lispy-mode))
#+end_src
*** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode
  :config
  ;; A hack to make evil indent with "o" and "O" a little nicer by
  ;; indenting to the previous non-blank line instead of using the
  ;; haskell indent function
  (add-to-list 'indent-line-ignored-functions 'haskell-indentation-indent-line)
  (add-hook 'haskell-mode-hook 'haskell-auto-insert-module-template)
  ;; Use C-M-a/e/h to move to previous/next function/select the
  ;; current function
  (add-hook 'haskell-mode-hook 'haskell-decl-scan-mode)
  (require 'speedbar)
  (speedbar-add-supported-extension ".hs")
  (require 'haskell-interactive-mode)
  (require 'haskell-process)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
  (add-hook 'haskell-mode-hook 'haskell-collapse-mode)
  (add-hook 'haskell-mode-hook '(lambda ()
                                  (setq-local tab-width 2)))
  (setq haskell-process-use-presentation-mode t
        haskell-interactive-mode-eval-mode 'haskell-mode))
(use-package lsp-haskell
  :hook
  (haskell-mode . lsp-deferred)
  :config
  (setq lsp-haskell-completion-in-comments nil
        lsp-haskell-server-path "haskell-language-server"))
(use-package direnv
  :custom (direnv-always-show-summary nil)
  :config
  (add-to-list 'direnv-non-file-modes 'haskell-interactive-mode)
  (direnv-mode))
#+end_src
*** Purescript
#+begin_src emacs-lisp
(use-package purescript-mode
  :hook
  (purescript-mode . lsp-deferred)
  (purescript-mode . (lambda ()
                       (turn-on-purescript-indentation)

                       (setq minor-mode-map-alist
                             (cons '(electric-pair-mode . electric-pair-mode-map)
                                   (remove
                                    (assoc 'electric-pair-mode electric-pair-mode-map)
                                    minor-mode-map-alist)))
                       (purescript-decl-scan-mode t)
                       (setq-local tab-width 2)))
  )
#+end_src
*** Dhall
#+begin_src emacs-lisp
(use-package dhall-mode
  :ensure t
  :mode "\\.dhall\\'")
#+end_src
*** Nix
#+begin_src emacs-lisp
(use-package nix-mode
  :hook
  (nix-mode . lsp-deferred))
#+end_src
*** YAML
#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src
*** LSP Mode
#+begin_src emacs-lisp
(use-package flycheck
  :delight)
(use-package lsp-mode
  :delight
  :delight lsp-lens-mode
  :commands (lsp lsp-deferred)
  :init
  ;; This essentially just let's the which-key integration know where to look
  (setq lsp-keymap-prefix "C-c i")
  (lsp-enable-which-key-integration)
  (defcustom-lsp lsp-purescript-formatter "purs-tidy"
    "Formatter to use for purescript. See https://github.com/nwolverson/vscode-ide-purescript/blob/master/package.json"
    :type 'string
    :group 'lsp-purescript
    :package-version '(lsp-mode . "8.0.1")
    :lsp-path "purescript.formatter")
  (defcustom-lsp lsp-purescript-censor-warnings ["WildcardInferredType"]
    "Warnings to censor for purescript. See https://github.com/nwolverson/vscode-ide-purescript/blob/master/package.json"
    :type '(lsp-repeatable-vector string)
    :group 'lsp-purescript
    :package-version '(lsp-mode . "8.0.1")
    :lsp-path "purescript.censorWarnings")
  :preface
  (defun calum/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless))
    (setq-local completion-at-point-functions
                (list
                 'tempel-expand
                 ;; When deleting the original completion input, refetch from LSP
                 (cape-capf-buster #'lsp-completion-at-point)
                 ;; Also try file paths
                 'cape-file)
                ))
  :hook
  (lsp-completion-mode . calum/lsp-mode-setup-completion)
  :general
  (:keymaps 'lsp-mode-map
            "C-." 'lsp-execute-code-action)
  ;; This is what actually sets up the binding
  (calum/leader-def :keymaps 'lsp-mode-map
    "f" 'lsp-format-buffer
    "i" '(:keymap lsp-command-map :which-key "lsp")
    "i g s" '(lsp-treemacs-symbols :which-key "symbols")
    "i g a" nil
    "i g a" '(lsp-ido-workspace-symbol :which-key "find symbol"))
  :config
  (setq lsp-log-io nil ; good for debugging, but if set to true can cause a performance hit
        lsp-modeline-code-actions-segments '(count icon name)
        lsp-modeline-diagnostics-enable t
        lsp-modeline-diagnostics-scope :workspace
        lsp-purescript-server-executable "purescript-language-server"
        lsp-auto-execute-action nil
        lsp-completion-provider :none
        )
  )

(use-package lsp-ui
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-sideline-show-hover nil
        lsp-ui-sideline-show-diagnostics t
        lsp-ui-sideline-show-symbol nil
        lsp-ui-sideline-update-mode nil
        lsp-ui-idle-delay 0.5
        lsp-ui-sideline-delay 0.5))

(use-package lsp-treemacs
  :commands lsp-treemacs-errors-list
  :config
  (lsp-treemacs-sync-mode 1))
#+end_src
*** Flex & Bison
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.ll\\'" . c-mode))
(add-to-list 'auto-mode-alist '("\\.yy\\'" . c-mode))
#+end_src
*** Fish
#+begin_src emacs-lisp
(use-package fish-mode)
#+end_src
*** Docker
#+begin_src emacs-lisp
(use-package docker)
#+end_src
*** Typescript
#+begin_src emacs-lisp
(use-package typescript-mode
  :config
  (add-to-list 'auto-mode-alist '("\.tsx" . typescript-mode)))
#+end_src
*** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :hook
  (markdown-mode . imenu-add-menubar-index)
  (markdown-mode . visual-line-mode)
  (markdown-mode . visual-fill-column-mode)
  :config
  (setq imenu-auto-rescan t))
#+end_src
*** GraphQL
#+begin_src emacs-lisp
(use-package graphql-mode)
#+end_src

** Miscellaneous

*** Chezmoi
#+begin_src emacs-lisp
(use-package chezmoi
  :general
  (calum/leader-def
    :infix "d"
    :prefix-command 'chezmoi-actions-map
    "f" 'chezmoi-find
    "g" 'chezmoi-magit-status
    "s" 'chezmoi-write
    "d" 'chezmoi-diff
    "e" 'chezmoi-ediff
    "i" 'chezmoi-write-files
    "o" 'chezmoi-open-other
    "t" 'chezmoi-template-buffer-display
    "c" 'chezmoi-mode)
  :config
  ;; Turn off ligatures because they show up poorly.
  (add-hook 'chezmoi-mode-hook #'(lambda () (when (require 'ligature)
                                              (ligature-mode (if chezmoi-mode 0 1)))))

  (setq-default chezmoi-template-display-p t) ;; Display template values in all source buffers.
  )
#+end_src

*** Diminish minor modes
#+BEGIN_SRC emacs-lisp
  (use-package delight
    :demand t)
#+END_SRC

*** Undoing

[[https://www.emacswiki.org/emacs/UndoTree][Undo Tree]] package for visualizing undo/redo chain and to allow evil to use ~C-r~.
#+begin_src emacs-lisp
(use-package undo-tree
  :delight undo-tree-mode
  :config
  (setq undo-tree-history-directory-alist '(("." . "~/.config/emacs/undotree")))
  (global-undo-tree-mode))
#+end_src

*** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :delight which-key-mode
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC

*** Restart Emacs
[[https://github.com/iqbalansari/restart-emacs][Package]] that allows for restarting Emacs by running ~restart-emacs~.
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  ;; Restart with ctrl-super-r
  :general
  ("C-M-r" 'restart-emacs))
#+END_SRC

*** MRU Buffer Switching
[[https://www.emacswiki.org/emacs/iflipb][Package]] for flipping through buffers in most recently used order.
#+begin_src emacs-lisp
(use-package iflipb
  :config
  (setq iflipb-ignore-buffers (lambda (buffer-name)
                                (and (and
                                      (not (string-match-p "\*Org Agenda\*" buffer-name))
                                      (not (string-match-p "\*Code Review\*" buffer-name)))
                                     (string-match-p "^[*]" buffer-name))))
  ;; This should work everywhere, including magit buffers for example
  (general-def
    :keymaps 'override
    "C-<tab>" 'iflipb-next-buffer
    (if (featurep 'xemacs) (kbd "<C-iso-left-tab>") (kbd "<C-S-iso-lefttab>")) 'iflipb-previous-buffer))
#+end_src

*** Jumping

#+begin_src emacs-lisp
(use-package evil-easymotion
  :general
  ;; leader leader to access easy motion
  (calum/leader-def
   :infix calum/leader
   "" '(:keymap evilem-map :which-key "easy motion"))
  :config
  ;; Make motions use everything visible in the window
  ;; https://github.com/PythonNut/evil-easymotion/pull/56#issuecomment-826142248
  (put 'visible 'bounds-of-thing-at-point (lambda () (cons (window-start) (window-end))))
  (evilem-make-motion evilem-motion-forward-word-begin #'evil-forward-word-begin :scope 'visible)
  (evilem-make-motion evilem-motion-forward-WORD-begin #'evil-forward-WORD-begin :scope 'visible)
  (evilem-make-motion evilem-motion-forward-word-end #'evil-forward-word-end :scope 'visible)
  (evilem-make-motion evilem-motion-forward-WORD-end #'evil-forward-WORD-end :scope 'visible)
  (evilem-make-motion evilem-motion-backward-word-begin #'evil-backward-word-begin :scope 'visible)
  (evilem-make-motion evilem-motion-backward-WORD-begin #'evil-backward-WORD-begin :scope 'visible)
  (evilem-make-motion evilem-motion-backward-word-end #'evil-backward-word-end :scope 'visible)
  (evilem-make-motion evilem-motion-backward-WORD-end #'evil-backward-WORD-end :scope 'visible)
  (cl-loop for (key . value) in (cdr evilem-map)
           do (evil-add-command-properties value :jump t)))
*** Jumping

#+begin_src emacs-lisp
(use-package avy
  :init
  (define-prefix-command 'calum/avy-map)
  :general
  (:keymaps 'calum/avy-map
            "C" 'avy-goto-char
            "c" 'avy-goto-char-timer
            "/" 'avy-isearch
            "l" 'avy-goto-line
            "L" 'avy-goto-end-of-line
            "j" 'avy-goto-line-below
            "k" 'avy-goto-line-above
            "e" 'avy-goto-whitespace-end
            "[" 'avy-pop-mark
            "r" 'avy-resume
            "n" 'avy-next
            "p" 'avy-prev)
  (:keymaps 'calum/avy-map
            :prefix "o"
            :prefix-command 'avy-org-command-map
            "h" 'avy-org-goto-heading-timer
            "r" 'avy-org-refile-as-child
            )
  (:keymaps 'calum/avy-map
            :prefix "y"
            :prefix-command 'avy-copy-command-map
            "l" 'avy-copy-line
            "r" 'avy-copy-region
            )
  (:keymaps 'calum/avy-map
            :prefix "<backspace>"
            :prefix-command 'avy-kill-command-map
            "r" 'avy-kill-region
            "l" 'avy-kill-whole-line
            )
  (:keymaps 'calum/avy-map
            :prefix "s"
            :prefix-command 'avy-save-command-map
            "r" 'avy-kill-ring-save-region
            "l" 'avy-kill-ring-save-whole-line
            )
  (:keymaps 'calum/avy-map
            :prefix "m"
            :prefix-command 'avy-move-command-map
            "r" 'avy-move-region
            "l" 'avy-move-line
            "t" 'avy-transpose-lines-in-region
            )
  :custom
  (avy-all-windows nil)
  (avy-style 'words)
  (avy-indent-line-overlay t))
#+end_src

*** Zen Mode

#+begin_src emacs-lisp
(use-package writeroom-mode
  :config
  (setq writeroom-global-effects
        (remove 'writeroom-set-fullscreen
                (remove 'writeroom-set-alpha writeroom-global-effects))
        writeroom-width 100))
#+end_src


#  LocalWords:  tpope's Ido ido flx MRU LocalWords el

*** Ligatures
[[https://github.com/mickeynp/ligature.el]]
#+begin_src emacs-lisp
(use-package ligature
  :load-path "/home/calum/.config/emacs/manual-plugins/ligature.el"
  :config
  ;; Enable all JetBrains Mono ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->" "///" "/=" "/=="
                                      "/>" "//" "/*" "*>" "***" "*/" "<-" "<<-" "<=>" "<=" "<|" "<||"
                                      "<|||" "<|>" "<:" "<>" "<-<" "<<<" "<==" "<<=" "<=<" "<==>" "<-|"
                                      "<<" "<~>" "<=|" "<~~" "<~" "<$>" "<$" "<+>" "<+" "</>" "</" "<*"
                                      "<*>" "<->" "<!--" ":>" ":<" ":::" "::" ":?" ":?>" ":=" "::=" "=>>"
                                      "==>" "=/=" "=!=" "=>" "===" "=:=" "==" "!==" "!!" "!=" ">]" ">:"
                                      ">>-" ">>=" "=<<" ">=>" ">>>" ">-" ">=" "&&&" "&&" "|||>" "||>" "|>" "|]"
                                      "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||" ".." ".?" ".=" ".-" "..<"
                                      "..." "+++" "+>" "++" "[||]" "[<" "[|" "{|" "??" "?." "?=" "?:" "##"
                                      "###" "####" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" ";;" "_|_"
                                      "__" "~~" "~~>" "~>" "~-" "~@" "$>" "^=" "]#"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))
#+end_src

*** Sudo edit
#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src

*** Minimap
#+begin_src emacs-lisp
(use-package minimap
  :custom (minimap-window-location 'right
           minimap-hide-cursor t))
#+end_src

*** Slack
See [[https://github.com/yuya373/emacs-slack#how-to-get-token-and-cookie][here]] for instructions on getting the slack token and cookie.
#+begin_src emacs-lisp
(use-package slack
  :commands (slack-start)
  :init
  (setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
  (setq slack-prefer-current-team t)
  :config
  (slack-register-team
   :name "mlabs-corp"
   :default t
   :token "xoxc-1974274253845-3554162517520-3557821842192-0105cdaec51cf0d48965904df6424bb1acae5d90f10d2f3d71d20008dafd1215"
   :cookie "xoxd-i0LaH9nsgPgXYDRi8Iz2%2BA7Xe2jNmLIAD0Ar5BjjOGgyYbvcYVsAdFFuEm0wQSU%2BDsbV24bbtmiF3zCY%2FucHc%2BOEly0d%2FlE6czE7Re%2BvPv4n%2FUJh8%2FK4OEg%2BIQR2Ibus2o0Ol8XII9ST%2BVPfuOsXvXnF0eTH1q%2F4gBVwQ1VCyIi5GktiX2jh8EZUSw%3D%3D"
   :subscribed-channels '(iohk)
   :full-and-display-names t)
)

(use-package alert
  :commands (alert)
  :init
  (setq alert-default-style 'notifier))
#+end_src

*** Open GitHub
#+begin_src emacs-lisp
(use-package git-link
  :preface
  (defun calum/git-link ()
    (interactive)
    (call-interactively 'git-link)
    (calum/copy-current-kill-to-clipboard))
  (defun calum/git-permalink ()
    (interactive)
    (let ((git-link-use-commit t))
      (calum/git-link))))
#+end_src

*** IMenu
https://github.com/bmag/imenu-list, show imenu in a sidebar
#+begin_src emacs-lisp
(use-package imenu-list
  :bind (("C-\"" . imenu-list-smart-toggle))
  :config
  (setq imenu-list-focus-after-activation t
        imenu-list-auto-resize nil))
#+end_src

* Keybinds
- [[https://github.com/syl20bnr/spacemacs/wiki/Keymaps-guide][Keymap hierarchy]], also [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Searching-Keymaps.html][see]] for a more thorough list, but the former
  covers the main ones
- Evil's maps are in emulation mode maps, in order of precedence:
  - Intercept keymaps - evil-make-intercept-map
  - Local state keymap - evil-local-set-key
  - Minor-mode keymaps - evil-define-minor-mode-key
  - Auxiliary keymaps - evil-define-key
  - Overriding keymaps - evil-make-overriding-map
  - Global state keymap - evil-global-set-key
- Keys bound in "motion" state are inherited in the normal, visual, and
  operator state keymaps if they are not shadowed
