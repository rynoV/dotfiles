# -*- visual-fill-column-mode: nil -*-
#+Title: Calum's Emacs Config
#+Author: Calum Sieppert
#+Date: 2021
# Allow evaluation of src blocks without results blocks popping up
#+PROPERTY: header-args :results silent :tangle yes
#+STARTUP: nolatexpreview

This config is based off [[https://github.com/ianpan870102/yay-evil-emacs/blob/master/config.org][this file]].

[[https://github.com/noctuid/general.el/][general.el]] had to be loaded upfront so that the ~:general~ keyword
works.

#+begin_src emacs-lisp
(use-package general
  :config
  (defconst calum/leader "C-c")
  (defconst calum/leader-non-normal "C-c")
  (general-create-definer calum/leader-def
    :prefix calum/leader)
  (general-override-mode)
  )

(use-package delight)
#+end_src

https://github.com/radian-software/el-patch for modifying packages.

#+begin_src emacs-lisp
(use-package el-patch
  :config
  (el-patch-feature hledger-mode))
#+end_src


* General Emacs Configuration

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
(use-package emacs
<<emacs-config>>
)
#+END_SRC

** ~<<emacs-config>>~
:PROPERTIES:
:header-args: :noweb-ref emacs-config :tangle no :results silent
:END:

*** Definitions
#+begin_src emacs-lisp
:preface
(defvar calum/indent-width 4)
(defvar calum/code-font "JetBrains Mono")
(defvar calum/code-font-height 120)
(defvar calum/magit-mode nil)

(defun calum/advise-around-visual-fill-column-off (orig-fun &rest args)
  "Can be used as advice for a function to turn
visual-fill-column-mode off temporarily."
  (let ((visual-fill-column-mode-active visual-fill-column-mode))
    (unwind-protect
        (progn
          (when visual-fill-column-mode-active
            (visual-fill-column-mode -1))
          (apply orig-fun args))
      (when visual-fill-column-mode-active
        (visual-fill-column-mode 1)))))

(defun calum/reload-theme ()
  (interactive)
  (load-theme 'doom-nord)
  (centaur-tabs-mode -1)
  (centaur-tabs-mode 1)
  )

(defun calum/advise-push-mark-before (func)
  "Advise FUNC to push the current mark before executing."
  (advice-add func :before #'(lambda (&rest _) "push-mark" (push-mark))))

(defun calum/bounds-of-number-at-point ()
  "Based on thingatpt.el's =number-at-point="
  (cond
   ((thing-at-point-looking-at "\\(0x\\|#x\\)\\([a-fA-F0-9]+\\)" 500)
    (cons (match-beginning 2) (match-end 2)))
   ((thing-at-point-looking-at "-?[0-9]+\\.?[0-9]*" 500)
    (cons (match-beginning 0) (match-end 0)))))

(defun calum/copy-binding-for-key (key-list)
  "Prompt for a key and save it's bound command to the kill ring."
  (interactive (list (help--read-key-sequence)))
  (kill-new (symbol-name (key-binding
                          (mapcan (lambda (x) (pcase-let* ((`(,seq . ,raw-seq) x)) raw-seq)) key-list)))))

(defun calum/copy-and-insert-binding-for-key (key-list)
  "Prompt for a key, save it's bound command to the kill ring, and insert it."
  (interactive (list (help--read-key-sequence)))
  (calum/copy-binding-for-key key-list)
  (yank))

(defun unpop-to-mark-command ()
  "Unpop off mark ring. Does nothing if mark ring is empty. https://stackoverflow.com/a/14539202"
  (interactive)
  (when mark-ring
    (setq mark-ring (cons (copy-marker (mark-marker)) mark-ring))
    (set-marker (mark-marker) (car (last mark-ring)) (current-buffer))
    (when (null (mark t)) (ding))
    (setq mark-ring (nbutlast mark-ring))
    (goto-char (marker-position (car (last mark-ring))))))

;; Like the kill-word functions, but don't yank
(defun delete-word (arg)
  "Delete characters forward until encountering the end of a word.
With argument ARG, do this that many times."
  (interactive "p")
  (delete-region (point) (progn (forward-word arg) (point))))

(defun backward-delete-word (arg)
  "Delete characters backward until encountering the beginning of a word.
With argument ARG, do this that many times."
  (interactive "p")
  (delete-word (- arg)))

(defun calum/copy-current-kill-to-clipboard ()
  "https://emacs.stackexchange.com/a/52179"
  (interactive)
  (gui-set-selection 'CLIPBOARD (current-kill 0)))
(defun recentf-ido-find-file ()
  "Find a recent file using Ido. From https://www.emacswiki.org/emacs/RecentFiles#h5o-8"
  (interactive)
  (let ((file (ido-completing-read "Choose recent file: " recentf-list nil t)))
    (when file
      (find-file file))))

(defun calum/edit-config ()
  (interactive)
  (chezmoi-find (concat user-emacs-directory "config.org")))
(defun calum/open-terminal-here ()
  "Based on https://emacs.stackexchange.com/a/7652 for opening a terminal in the folder of the current file"
  (interactive "@")
  (shell-command (concat "terminal --working-directory "
                         (file-name-directory (or load-file-name buffer-file-name))
                         " > /dev/null 2>&1 & disown") nil nil))

(defun buffer-backed-by-file-p (buffer)
  "https://emacs.stackexchange.com/a/35907"
  (let ((backing-file (buffer-file-name buffer)))
    (if (buffer-modified-p buffer)
        t
      (if backing-file
          (file-exists-p (buffer-file-name buffer))
        t))))

(defun kill-removed-buffers ()
  "Kill all buffers whose files have been deleted/moved, from
https://emacs.stackexchange.com/a/35907"
  (interactive)
  (require 'dash)
  (let ((to-kill (-remove 'buffer-backed-by-file-p (buffer-list))))
    (mapc 'kill-buffer to-kill)
    (message "Killed %s buffers" (length to-kill))))

(defun replace-buffer-with-shell-command (command)
  "Pipe the buffer's contents to a shell a command and replace them with its output."
  (let ((temp-point (point)))
    (mark-whole-buffer)
    (shell-command-on-region
     (region-beginning) (region-end) command :replace t)
    (goto-char temp-point)))

(defun wrap-with-direnv-disabled (orig-fun &rest args)
  "Disable direnv for the current folder before calling the function, then re-enable it"
  (direnv-update-directory-environment "~/" nil)
  (apply orig-fun args)
  (direnv-update-environment))

(defun advice-unadvice (sym)
  "Remove all advices from symbol SYM. https://emacs.stackexchange.com/a/24658"
  (interactive "aFunction symbol: ")
  (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))

(defun recenter-advice (&rest args) "Recenter the window" (recenter))

(defun w()
  "Save the buffer. For vim muscle memory."
  (interactive)
  (save-buffer))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
:general
("C-<down-mouse-1>" ;; Ctrl click to open a link
 (lambda (event)
   (interactive (list last-command-event))
   (posn-set-point (event-end event))
   (browse-url (thing-at-point 'url t))))

("S-<delete>" (general-key "<cut>"))
("C-<insert>" (general-key "<copy>"))
("S-<insert>" (general-key "<paste>"))

("<XF86Paste>" (general-key "<paste>"))
("<XF86Copy>" (general-key "<copy>"))
("<XF86Cut>" (general-key "<cut>"))
("C-<backspace>" 'backward-delete-word)
("C-w" 'backward-delete-word)
("M-d" 'delete-word)
("C-s" 'save-buffer)
("<f7>" 'calum/edit-config)
("C-M-c" nil)
("C-M-c" 'meow-comment)
(calum/leader-def :infix "w"
  ;; prefix-command is needed for meow to show a description for the "w" key
  :prefix-command 'windows-map
  "" nil
  ;; Use built-in window moving for cases where evil isn't available
  "h" 'windmove-left
  "l" 'windmove-right
  "k" 'windmove-up
  "j" 'windmove-down
  "w" 'kill-this-buffer
  "c" 'delete-window
  "u" 'winner-undo
  "y" 'winner-redo
  "o" 'delete-other-windows
  "s" 'split-window-horizontally
  "v" 'split-window-vertically)
(calum/leader-def :infix "M"
  :prefix-command 'misc-map
  "" nil
  "w" 'writeroom-mode
  "v" 'calum/copy-current-kill-to-clipboard
  "g" 'calum/git-permalink
  "l" 'calum/git-link
  "i" 'calum/copy-and-insert-binding-for-key
  "c" 'calum/copy-binding-for-key
  "T" 'calum/open-terminal-here
  "R" 'calum/reload-theme
  )
  #+end_src

*** Variables
#+begin_src emacs-lisp
:custom
;; Some config to reduce prompting from
;; https://www.masteringemacs.org/article/disabling-prompts-emacs
(use-short-answers t)
(confirm-nonexistent-file-or-buffer nil)
(fill-column 70)
(visual-fill-column-width 70)
(visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
(enable-recursive-minibuffers t)
;; Emacs 28: Hide commands in M-x which do not work in the current mode.
(read-extended-command-predicate #'command-completion-default-include-p)
;; Emacs 28; recommended by embark
(y-or-n-p-use-read-key t)
;; Don't use system clipboard by default
(select-enable-clipboard t)
(select-enable-primary nil)
(mouse-drag-copy-region nil)
(initial-scratch-message "")
(set-mark-command-repeat-pop t)
(kill-read-only-ok t)
(kill-do-not-save-duplicates t)
(ring-bell-function 'ignore)
; Allow the emacs window to resize more precisely
(frame-resize-pixelwise t)
; Horizontal mouse scrolling
(mouse-wheel-tilt-scroll t)
; Flip horizontal scrolling
(mouse-wheel-flip-direction t)
; Enable indentation+completion using the TAB key
(tab-always-indent 'complete)
; Don't TAB cycle if there are only a few completion candidates
(completion-cycle-threshold nil)
;; Hide title bar
(default-frame-alist '((undecorated . t)))

;; better scrolling experience
(scroll-margin 0)
(scroll-conservatively 101)
(scroll-preserve-screen-position t)
(auto-window-vscroll nil)

(recentf-max-menu-items 100)
(recentf-max-saved-items 100)

;; Omit default startup screen
(inhibit-startup-screen t)

;; Split windows horizontally
;; https://stackoverflow.com/a/2081978/14703577
(split-width-threshold 0)
(split-height-threshold nil)
;; Windows at the time of writing are 192 columns, so this ensures
;; that windows can be split horizontally only once, and (with the
;; above settings) when another window is opened for whatever reason,
;; it either splits the frame in two horizontally, or takes the other
;; half of the frame.
(window-min-width 80)

;; Increased because desktop mode was running into the limit after
;; adding dirvish
(max-lisp-eval-depth 5000)

;; Recommended by lsp-mode https://emacs-lsp.github.io/lsp-mode/page/performance/
(gc-cons-threshold 100000000)
(read-process-output-max (* 1024 1024)) ;; 1mb

;; Recommended here: https://github.com/integral-dw/org-superstar-mode#this-mode-causes-significant-slowdown
(inhibit-compacting-font-caches t)

(compilation-scroll-output t)

;; Don't keep =kill-this-buffer= in =repeat= blacklist
(repeat-too-dangerous nil)
#+end_src

*** Config
#+begin_src emacs-lisp
:config
(put 'number 'bounds-of-thing-at-point 'calum/bounds-of-number-at-point)

;; This is mainly for the agenda window split, but also anything else
;; the uses 'split-window-sensibly' (seemingly not the message buffer
;; split for some reason)
(advice-add 'window-splittable-p :around #'calum/advise-around-visual-fill-column-off)

(advice-add 'browse-url :around #'wrap-with-direnv-disabled)

(advice-add 'compile-goto-error :after #'recenter-advice)
(advice-add 'next-error :after #'recenter-advice)
(advice-add 'previous-error :after #'recenter-advice)

(setq-default
 word-wrap t
 ;; Always use spaces for indentation
 indent-tabs-mode nil
 tab-width calum/indent-width)

(if (member "--magit" command-line-args)
    (progn
      (setq command-line-args (delete "--magit" command-line-args))
      (setq calum/magit-mode t)
      ;; Shows "magit <git repo>" as the frame title when Magit is open
      (setq frame-title-format "%b")))

;; https://www.emacswiki.org/emacs/TransparentEmacs#h5o-1
(set-frame-parameter (selected-frame) 'alpha '(95 . 95))
;; Make sure emacsclient frames are made transparent as well
(add-hook 'after-make-frame-functions
          #'(lambda (frame)
              (set-frame-parameter frame 'alpha '(95 . 95))
              (set-scroll-bar-mode nil)
              (calum/reload-theme)))
(add-to-list 'default-frame-alist '(alpha . (95 . 95)))

;; Clean unused buffer every day at midnight
(midnight-mode 1)

;; Save command history between sessions
(savehist-mode 1)
;; Restore buffer point position when reopening buffers
(save-place-mode 1)

(tool-bar-mode -1)
(menu-bar-mode -1)
;; Allow opening recent files
;; https://www.emacswiki.org/emacs/RecentFiles
(recentf-mode 1)

;; Windows terminal scroll with mouse wheel
(xterm-mouse-mode 1)
#+END_SRC

* Configuration for built-in packages

** Auth
#+begin_src emacs-lisp
(use-package auth-source
  :straight (:type built-in)
  :preface
  (defun auth-source-get-password (host username)
  "Retrieve the password for a given host and username from auth-source."
  (let ((entry (car (auth-source-search :host host
                                        :user username
                                        :max 1))))
    (when entry
      (let ((secret (plist-get entry :secret)))
        (if (functionp secret)
            (funcall secret)
          secret)))))
  :custom
  (auth-sources '("~/.config/emacs/.authinfo")))
#+end_src
** Tramp
#+begin_src emacs-lisp
(use-package tramp
  :straight (:type built-in)
  :custom
  (tramp-default-method "ssh"))
#+end_src

** Calc
#+begin_src emacs-lisp
(use-package calc
  :straight nil
  :custom
  (calc-context-sensitive-enter t))
#+end_src

** Project.el
#+begin_src emacs-lisp
(use-package project
  :straight nil)
#+end_src

** Syntax checking with flymake
#+begin_src emacs-lisp
(use-package flymake
  :straight nil
  :general
  (:keymaps 'flymake-mode-map
            "M-n" 'flymake-goto-next-error
            "M-p" 'flymake-goto-prev-error)
  :config
  (calum/advise-push-mark-before 'flymake-goto-next-error)
  (calum/advise-push-mark-before 'flymake-goto-prev-error))
#+end_src

** Simple completion with dabbrev
#+begin_src emacs-lisp
(use-package dabbrev
  :custom
  (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'"))
  (dabbrev-case-replace nil))
#+end_src

** Window config history
Undo/redo window configuration changes using ~C-c <left>~ / ~C-c <right>~.
#+begin_src emacs-lisp
(use-package winner
  :straight nil
  :config
  (winner-mode 1))
#+end_src

** Compilation colours
Enable terminal colours in the compilation buffer. From https://stackoverflow.com/a/71785402
#+begin_src emacs-lisp
(use-package ansi-color
    :hook (compilation-filter . ansi-color-compilation-filter))
#+end_src

** Disable scroll-bar

#+BEGIN_SRC emacs-lisp
(use-package scroll-bar
  :straight nil
  :config (set-scroll-bar-mode nil))
#+END_SRC

** File-related tweaks

Don’t bother confirming killing processes and don’t let backup~ files scatter around.

#+begin_src emacs-lisp
(use-package files
  :straight nil
  :config
  (setq confirm-kill-processes nil
        create-lockfiles nil ; don't create .# files
        make-backup-files nil))
#+end_src

** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :straight nil
  :hook (before-save . whitespace-cleanup))
#+END_SRC
** Font

See [[*Load theme][Load theme]] for additional font selection with the poet theme.
#+BEGIN_SRC emacs-lisp
(use-package frame
  :straight nil
  :config
  (set-face-attribute 'default nil
                      :family calum/code-font
                      :height calum/code-font-height
                      :weight 'normal))
#+END_SRC
** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful,
let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
(use-package mwheel
  :straight nil
  :config (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
                mouse-wheel-progressive-speed nil))
#+END_SRC
** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don't forget to refresh the version
control status as well.
#+BEGIN_SRC emacs-lisp
(use-package autorevert
  :straight nil
  :config
  (global-auto-revert-mode +1)
  (setq auto-revert-interval 2
        auto-revert-check-vc-info t
        global-auto-revert-non-file-buffers t
        auto-revert-verbose nil))
#+END_SRC
** Spell Check

Turn on spell checking for text modes and configure keybindings under
~C-c s~.
#+begin_src emacs-lisp
(use-package flyspell
  :straight nil
  :delight
  :preface
  (defun flyspell-check-next-highlighted-word ()
    "Custom function to spell check next highlighted word
Based off https://www.emacswiki.org/emacs/FlySpell#h5o-7"
    (interactive)
    (let ((previous-point (point)))
      (flyspell-goto-next-error)
      (ispell-word)
      (goto-char previous-point)))
  :general
  (calum/leader-def
    :infix "s"
    :prefix-command 'spell-check-map
    "l" '(calum/enable-ltex
          :which-key "Enable ltex")
    "t" '(flyspell-mode
          :which-key "toggle spell check")
    "p" '(flyspell-check-previous-highlighted-word
          :which-key "spell check previous word")
    "n" '(flyspell-check-next-highlighted-word
          :which-key "spell check next word")
    "b" '(ispell-buffer
          :which-key "spell check buffer")))
#+end_src
** Eldoc
Just disabling the display in the mode-bar.
#+begin_src emacs-lisp
(use-package eldoc
  :delight)
#+end_src
** Ediff
Make ediff not use a new frame for the control window, it doesn't play
nicely with xmonad.
#+begin_src emacs-lisp
(use-package ediff
  :config
  (setq ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src
** Latex
#+begin_src emacs-lisp
(use-package tex-mode
  :preface
  (defun latexindent-format-buffer ()
    (interactive)
    (replace-buffer-with-shell-command "latexindent")
    (recenter))
  :hook
  (TeX-mode . visual-line-mode)
  (TeX-mode . visual-fill-column-mode)
  ;; Format before save, based on https://emacs.stackexchange.com/a/5777
  (TeX-mode . (lambda () (add-hook 'before-save-hook 'latexindent-format-buffer nil 'local)))
  :config
  (setq tab-width 4))
#+end_src
* Third-party packages

** GUI enhancements
*** Load theme
Doom Nord theme
#+begin_src emacs-lisp
(use-package doom-themes
  ;; :disabled
  :custom-face
  (lsp-face-highlight-read ((t (:background "#363c4a" :foreground "#F0F4FC" :weight bold))))
  (lsp-ui-sideline-symbol-info ((t (:extend t :background "#2E3440" :foreground "#656c7c"))))
  (meow-region-cursor-1 ((t (:background "#6eee88c8a463" :foreground "#ECEFF4"))))
  (meow-region-cursor-2 ((t (:background "#5c5c6fef8706" :foreground "#ECEFF4"))))
  (meow-region-cursor-3 ((t (:background "#49c9571669a9" :foreground "#ECEFF4"))))
  (org-block ((t (:extend t :background unspecified))))
  (org-block-begin-line ((t (:inherit org-block :extend t :background "#373E4C" :foreground "#6f7787"))))
  (org-hide ((t nil)))
  (region ((t (:extend t :background "#373e4c"))))
  (secondary-selection ((t (:extend t :background "#373e4c"))))
  (show-paren-match ((t (:background "dim gray" :foreground "white"))))
  :custom
  (doom-nord-brighter-modeline nil)
  (doom-nord-brighter-comments t)
  (doom-nord-comment-bg nil)
  (doom-nord-region-highlight t)
  :config
  (load-theme 'doom-nord t))
#+end_src

[[https://github.com/sashimacs/os1-theme][Os1 theme]]

#+begin_src emacs-lisp
(use-package os1-theme
  :disabled
  :straight (os1-theme :type git :host github :repo "sashimacs/os1-theme"))
#+end_src
*** Modeline
[[https://github.com/TheBB/spaceline][Spaceline]]
#+begin_src emacs-lisp
(use-package spaceline
  :custom
  (powerline-default-separator 'wave)
  (spaceline-workspace-numbers-unicode t)
  (spaceline-window-numbers-unicode t)
  :config
  (spaceline-emacs-theme))
#+end_src

*** Syntax highlighting
Lightweight syntax highlighting improvement for numbers and escape
sequences (e.g. ~\n, \t~).
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))

  (use-package highlight-escape-sequences
    :hook (prog-mode . hes-mode))
#+END_SRC

*** Unicode fonts
Makes sure fonts for various icons are found:
https://github.com/rolandwalker/unicode-fonts

#+begin_src emacs-lisp
(use-package unicode-fonts
  :config
  (unicode-fonts-setup))
#+end_src

*** Tabs (via centaur)
https://github.com/ema2159/centaur-tabs

#+begin_src emacs-lisp
(use-package centaur-tabs
  :after persp-mode
  :custom
  (centaur-tabs-style "bar")
  (centaur-tabs-height 32)
  (centaur-tabs-set-icons t)
  (centaur-tabs-show-new-tab-button t)
  (centaur-tabs-set-modified-marker t)
  (centaur-tabs-show-navigation-buttons nil)
  (centaur-tabs-set-bar 'over)
  (centaur-tabs-show-count nil)
  ;; (centaur-tabs-label-fixed-length 15)
  ;; (centaur-tabs-gray-out-icons 'buffer)
  ;; (centaur-tabs-plain-icons t)
  (x-underline-at-descent-line t)
  (centaur-tabs-left-edge-margin nil)
  (centaur-tabs-set-close-button t)
  (centaur-tabs--buffer-show-groups nil)
  (centaur-tabs-cycle-scope 'default)
  (centaur-tabs-adjust-buffer-order t)
  (centaur-tabs-enable-ido-completion nil)
  :hook
  (term-mode . centaur-tabs-local-mode)
  (calendar-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  :general
  (calum/leader-def :infix "t" :prefix-command 'tab-actions-map
    "l" '("forward tab" . centaur-tabs-forward-tab)
    "L" '("forward tab other window" . centaur-tabs-forward-tab-other-window)
    "h" '("back tab" . centaur-tabs-backward-tab)
    "H" '("backward tab other window" . centaur-tabs-backward-tab-other-window)
    "j" '("forward tab group" . centaur-tabs-forward-group)
    "k" '("back tab group" . centaur-tabs-backward-group)
    "t" '("switch tab group" . centaur-tabs-switch-group)
    "w" '("kill others in group" . centaur-tabs-kill-other-buffers-in-current-group)
    "g" '("show group tabs" . centaur-tabs-toggle-groups)
    "m" '("toggle tabs mode" . centaur-tabs-mode)
    "<backspace>" '("kill group" . centaur-tabs-kill-all-buffers-in-current-group)
    "<delete>" '("kill unmodified in group" . centaur-tabs-kill-unmodified-buffers-in-current-group)
    "*" '("keep only tabs matching pattern" . centaur-tabs-keep-match-buffers-in-current-group)
    "?" '("kill tabs matching pattern" . centaur-tabs-kill-buffer-match-rule)
    "[" '("first tab" . centaur-tabs-select-beg-tab)
    "]" '("last tab" . centaur-tabs-select-end-tab)
    "<" '("move tab left" . centaur-tabs-move-current-tab-to-left)
    ">" '("move tab right" . centaur-tabs-move-current-tab-to-right)
    )
  :config
  (centaur-tabs-enable-buffer-reordering)
  (centaur-tabs-change-fonts (face-attribute 'default :font) 110)
  (centaur-tabs-headline-match)
  (setq uniquify-separator "/")
  (setq uniquify-buffer-name-style 'forward)
  ;; Integrate with persp-mode, based on
  ;; https://github.com/ema2159/centaur-tabs/issues/163#issuecomment-896530659
  (defun calum/get-buffer-persp-group (buffer)
    (let* ((name))
      (dolist (persp (persp-persps))
        (if persp
            (if (persp-contain-buffer-p buffer persp)
                (setq name (safe-persp-name persp)))))
      name))
  (defun centaur-tabs-buffer-groups ()
    "`centaur-tabs-buffer-groups' control buffers' group rules.

Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
All buffer name start with * will group to \"Emacs\".
Other buffer group by `centaur-tabs-get-group-name' with project name."
    (list
     (let ((buf-persp-name (calum/get-buffer-persp-group (current-buffer))))
       (cond
        ((and buf-persp-name (not (string= buf-persp-name persp-nil-name))) buf-persp-name)
        ((or (string-equal "*" (substring (buffer-name) 0 1))
             (memq major-mode '(magit-process-mode
                                magit-status-mode
                                magit-diff-mode
                                magit-log-mode
                                magit-file-mode
                                magit-blob-mode
                                magit-blame-mode
                                )))
         "Emacs")
        ((derived-mode-p 'prog-mode)
         "Editing")
        ((derived-mode-p 'dired-mode)
         "Dired")
        ((memq major-mode '(helpful-mode
                            help-mode))
         "Help")
        ((memq major-mode '(org-mode
                            org-agenda-clockreport-mode
                            org-src-mode
                            org-agenda-mode
                            org-beamer-mode
                            org-indent-mode
                            org-bullets-mode
                            org-cdlatex-mode
                            org-agenda-log-mode
                            diary-mode))
         "OrgMode")
        (t
         (centaur-tabs-get-group-name (current-buffer)))))))
  (defun centaur-tabs-hide-tab (x)
    "Do no to show buffer X in tabs."
    (let ((name (format "%s" x)))
      (or
       ;; Current window is not dedicated window.
       (window-dedicated-p (selected-window))

       ;; Buffer name not match below blacklist.
       (string-prefix-p "*epc" name)
       (string-prefix-p "*helm" name)
       (string-prefix-p "*Helm" name)
       (string-prefix-p "*Compile-Log*" name)
       (string-prefix-p "*lsp" name)
       (string-prefix-p "*company" name)
       (string-prefix-p "*Flycheck" name)
       (string-prefix-p "*tramp" name)
       (string-prefix-p " *Mini" name)
       (string-prefix-p "*help" name)
       (string-prefix-p "*straight" name)
       (string-prefix-p " *temp" name)
       (string-prefix-p "*Help" name)
       (string-prefix-p "*IList" name)
       (string-prefix-p "*Messages" name)
       (string-prefix-p "*Org Agenda" name)
       (string-prefix-p "marginalia" name)

       ;; Is not magit buffer.
       (and (string-prefix-p "magit" name)
            (not (file-name-extension name)))
       )))
  (centaur-tabs-mode t))
#+end_src

** Git Integration
*** Magit
See [[https://github.com/emacs-evil/evil-collection/blob/d1dec4ef730554a2b9d5b96098abf166685aaa38/modes/magit/evil-collection-magit.el#L289][here]] for useful mappings and commands
#+BEGIN_SRC emacs-lisp
(use-package magit
  :init
  (setq forge-add-default-bindings t)
  :general
  (calum/leader-def
    :keymaps 'override
    "g" '(magit-status :which-key "magit"))
  (:keymaps 'magit-mode-map
            "C-SPC" 'magit-diff-show-or-scroll-up
            "x" 'magit-delete-thing
            ;; Shift-tab
            "<backtab>" 'magit-section-cycle)
  :delight magit-wip-mode
  :preface
  (defun magit-choose ()
    "Choose git repo then open magit status
  From here https://github.com/magit/magit/issues/3139#issuecomment-319047034"
    (interactive)
    (let ((current-prefix-arg t))
      (call-interactively 'magit-status)))
  :custom
  (git-commit-major-mode 'git-commit-elisp-text-mode) ;; Setting this as the major mode allows eglot to provide a special language server for git commit buffers
  (magit-section-show-context-menu-for-emacs<28 t)
  :config
  (if calum/magit-mode
      (progn
        ;; Open Magit in full screen
        (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)))

  ;; Automatically put us in full insert mode for commit editing
  (add-hook 'with-editor-mode-hook #'meow-insert)

  ;; Update commit views when scrolling through commits in status
  (add-hook 'magit-section-movement-hook 'magit-status-maybe-update-revision-buffer)

  ;; https://github.com/dgutov/diff-hl#magit
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)

  ;; https://magit.vc/manual/magit/Wip-Modes.html
  (magit-wip-mode 1)

  (setq magit-diff-refine-hunk t
        )

  ;; From the mamual on magit-branch-or-checkout
  (transient-replace-suffix 'magit-branch 'magit-checkout
    '("b" "dwim" magit-branch-or-checkout))
  (transient-append-suffix 'magit-log "-L"
    '("-m" "Omit merge commits" "--no-merges"))
  (transient-append-suffix 'magit-log-refresh "-L"
    '("-m" "Omit merge commits" "--no-merges"))
  )
#+END_SRC

https://github.com/dandavison/magit-delta
Slows down magit alot, and breaks the display, seemingly due to large
file (a package-lock.json)
#+begin_src emacs-lisp
;; (use-package magit-delta
;;   :hook (magit-mode . magit-delta-mode))
#+end_src

*** Forge
[[https://magit.vc/manual/forge/index.html#Top][Forge]] for Github integration in Magit. Expects the ~~/.authinfo~ file
to have been properly filled with the Github key (see the forge
documentation).
#+begin_src emacs-lisp
  (use-package forge
    :after magit
    :config
    (setq forge-owned-accounts '(("rynoV") nil)))
#+end_src

*** Code Review
#+begin_src emacs-lisp
(use-package code-review
  :disabled t
  :general
  (calum/leader-def :keymaps 'forge-topic-mode-map
            "r" 'code-review-forge-pr-at-point
            )
  (calum/leader-def :keymaps 'code-review-mode-map
            "M-n" 'code-review-comment-jump-next
            "M-p" 'code-review-comment-jump-previous
            )
  :config
  (add-hook 'code-review-mode-hook #'emojify-mode)
  (setq code-review-fill-column 80)
  (setq code-review-auth-login-marker 'forge))
#+end_src

*** Git Gutter (via diff-hl)
#+begin_src emacs-lisp
(use-package diff-hl
  :config
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode))
#+end_src

** Text editing
*** Meow
#+begin_src emacs-lisp
(general-define-key
 "C-M-n" nil
 "C-M-p" nil
 "C-M-n" 'next-line
 "C-M-p" 'previous-line)
(use-package meow
  :after smartparens
  :preface
  (defun calum/meow-escape ()
    "Quit INSERT or quit minibuffer or do nothing. From https://github.com/meow-edit/meow/discussions/186#discussioncomment-1999930"
    (interactive)
    (cond
     ((meow-insert-mode-p)
      (meow-insert-exit))
     ((minibufferp)
      (keyboard-escape-quit))
     (t)))

  (defun calum/meow-pop-to-mark ()
    "Go back through the mark ring."
    (interactive)
    (set-mark-command 4)
    (recenter))
  (defun calum/meow-setup ()
    (interactive)
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty
          meow--kbd-forward-line "C-M-n"
          meow--kbd-backward-line "C-M-p"
          meow-use-dynamic-face-color t
          meow-expand-exclude-mode-list nil
          meow-motion-remap-prefix "C-M-")

    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("'" . calum/avy-map)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("/" . meow-visit)
     '("?" . nil)
     '("-" . negative-argument)
     '(":" . execute-extended-command)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '(">" . repeat)
     '("<" . calum/meow-pop-to-mark)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("$" . calum/query-replace-map)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change-save)
     '("C" . comment-line)
     '("d" . meow-delete)
     '("D" . meow-kill-whole-line)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find-expand)
     '("F" . eldoc-box-help-at-point)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("N" . meow-nav-mode)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("P" . meow-paren-mode)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till-expand)
     '("u" . meow-undo)
     '("U" . undo-tree-redo)
     '("v" . meow-find-ref)
     '("V" . meow-pop-marker)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . join-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . calum/paren-map)
     '("Z" . meow-pop-selection)
     '("'" . calum/avy-map)
     '("\"" . calum/mc-map)
     '("<escape>" . calum/meow-escape)
     '("<f4>" . meow-kmacro-lines)
     '("<f5>" . meow-kmacro-matches)))

  (defun calum/meow--minibuffer-setup ()
    "meow--minibuffer-setup but without the code to disable meow text editing"
    (when (or (member this-command meow-grab-fill-commands)
              (member meow--keypad-this-command meow-grab-fill-commands))
      (when-let ((s (meow--second-sel-get-string)))
        (insert s)))
    (meow-insert-mode))

  (defvar meow-nav--direction 'forward "Which direction the movement commands should move")

  (defun meow-nav--update-modeline ()
    "Update the modeline to show the current direction."
    (delight 'meow-nav-mode (if (equal 'forward meow-nav--direction) " [NAV]+" " [NAV]-") t)
    (force-mode-line-update))

  (defun meow-nav-swap-direction ()
    "Swap the movement direction"
    (interactive)
    (setq meow-nav--direction (if (equal 'forward meow-nav--direction) 'backward 'forward))
    (meow-nav--update-modeline))

  (defun calum/diff-hl-previous-hunk (arg)
    "Like its namesake, but takes a prefix argument to determine how many hunks to move."
    (interactive "p")
    (dotimes (i (abs arg))
      (diff-hl-previous-hunk)))

  (defun calum/diff-hl-next-hunk (arg)
    "Like its namesake, but takes a prefix argument to determine how many hunks to move."
    (interactive "p")
    (message (number-to-string arg))
    (dotimes (i (abs arg))
      (diff-hl-next-hunk)))

  (defmacro meow-nav--mk-movement (fwd bkwd name doc)
    `(defun ,name (arg)
       ,doc
       (interactive "P")
       (let ((current-prefix-arg arg))
         (call-interactively
          (if (equal 'forward meow-nav--direction) ,fwd ,bkwd)))))

  (meow-nav--mk-movement 'end-of-defun 'beginning-of-defun meow-nav-move-defun "Move by function definition")
  (meow-nav--mk-movement 'View-scroll-half-page-forward 'View-scroll-half-page-backward meow-nav-move-half-page "Move by half pages")
  (meow-nav--mk-movement 'next-error 'previous-error meow-nav-move-error "Move by compilation-mode errors")
  (meow-nav--mk-movement 'flymake-goto-next-error 'flymake-goto-prev-error meow-nav-move-flymake-error "Move by flymake errors")
  (meow-nav--mk-movement 'View-scroll-line-forward 'View-scroll-line-backward meow-nav-move-line "Scroll single lines")
  (meow-nav--mk-movement 'calum/diff-hl-next-hunk 'calum/diff-hl-previous-hunk meow-nav-move-hunk "Move by version control hunk")
  (meow-nav--mk-movement 'scroll-left 'scroll-right meow-nav-move-scroll-horizontal "Scroll left/right")
  (meow-nav--mk-movement 'scroll-other-window 'scroll-other-window-down meow-nav-move-scroll-other "Scroll other window")

  (defun calum/meow-setup-extra ()
    ;; From
    ;; https://github.com/meow-edit/meow/discussions/186#discussioncomment-1999930,
    ;; to allow using normal mode in minibuffer
    ;; Don't ignore cursor shape changes in minibuffer
    (delete (cons 'minibufferp 'meow--update-cursor-default)
            meow-update-cursor-functions-alist)
    ;; Remove default minibuffer setup
    (remove-hook 'minibuffer-setup-hook 'meow--minibuffer-setup)
    ;; Use INSERT state in minibuffer by default, then later we can
    ;; switch to NORMAL with ESC
    (add-hook 'minibuffer-setup-hook 'calum/meow--minibuffer-setup)

    ;; Add more built-in "thing"s for meow to use. For example, select
    ;; a url with ". u". Note: "number" didn't have a
    ;; 'bounds-of-thing-at-point definition, so I added one further up
    ;; this file
    (cl-loop for charthing in '((?\s . whitespace) (?n . number) (?@ . email) (?f . filename) (?u . url)) do
             (let ((thing (cdr charthing)))
               (meow-thing-register thing thing thing)
               (add-to-list 'meow-char-thing-table charthing)))
    ;; Use ; to reverse search, or reverse point and mark when selection is active
    (add-to-list 'meow-selection-command-fallback '(meow-reverse . negative-argument))
    ;; Use <f4> to execute the current macro on each line in the
    ;; selection, or if no selection just call the macro
    (add-to-list 'meow-selection-command-fallback '(meow-kmacro-lines . meow-end-or-call-kmacro))

    ;; Custom state for navigation only. Uses view-mode to disallow
    ;; editing and enable special navigation functions. Keymap is
    ;; based on normal state, but overrides keys that change text to
    ;; use them for navigation. Tries to keep all other normal state
    ;; keys the same. The mode keeps track of a current "direction",
    ;; and one key swaps the direction. Keys make movements
    ;; "backwards" or "forwards" depending on the current direction;
    ;; what backwards and forwards mean depends on the movement. This
    ;; model saves on keybinding space and eases binding memorization,
    ;; as I only have to remember one key per movement type, and when
    ;; I want to switch direction I use the same key every time.
    (setq meow-nav-keymap (make-composed-keymap (copy-keymap meow-normal-state-keymap) 'view-mode-map))
    (meow-define-state nav
      "Meow state for navigating files and selecting text."
      :lighter " [NAV]"
      :keymap meow-nav-keymap
      (cond
       (meow-nav-mode
        (view-mode 1)
        (meow-nav--update-modeline))
       (t (view-mode -1))))

    (setq meow-cursor-type-nav 'hollow)

    (meow-define-keys 'nav
      '("<escape>" . meow-normal-mode)
      '("N" . meow-normal-mode)
      ;; Bind upper and lower so I can swap direction without lifting
      ;; shift key if needed
      '("a" . meow-nav-swap-direction)
      '("A" . meow-nav-swap-direction)
      '("d" . meow-nav-move-defun)
      '("p" . meow-nav-move-half-page)
      '("c" . meow-nav-move-hunk)
      '("q" . meow-nav-move-flymake-error)
      '("u" . meow-nav-move-error)
      '("i" . meow-nav-move-line)
      '("P" . meow-nav-move-scroll-horizontal)
      '("R" . meow-nav-move-scroll-other)
      ;; '("r" . ?)
      ;; '("m" . ?)
      '("Z" . recenter-top-bottom))
    (add-to-list 'minor-mode-overriding-map-alist (cons 'meow-nav-mode meow-nav-keymap))

    (setq meow-paren-keymap 'calum/paren-map)
    (meow-define-state paren
      "meow state for interacting with smartparens"
      :lighter " [P]"
      :keymap meow-paren-keymap)

    (setq meow-cursor-type-paren 'bar)

    (meow-define-keys 'paren
      '("<escape>" . meow-normal-mode)
      '("u" . meow-undo)
      '("-" . negative-argument))
    (add-to-list 'minor-mode-overriding-map-alist (cons 'meow-nav-mode meow-nav-keymap))
    )
  :hook
  (meow-global-mode . calum/meow-setup-extra)
  (meow-mode . calum/meow-setup-extra)
  :config
  (setq meow-keypad-leader-dispatch calum/leader)
  (calum/meow-setup)
  (meow-global-mode 1))
#+end_src

*** Edit surrounding pairs (smartparens)
#+begin_src emacs-lisp
(use-package smartparens
  :delight
  :init
  (define-prefix-command 'calum/paren-map)
  :defines (calum/paren-map)
  :preface
  (defmacro def-pairs (pairs)
    "Define functions for pairing. PAIRS is an alist of (NAME . STRING)
conses, where NAME is the function name that will be created and
STRING is a single-character string that marks the opening character.

  (def-pairs ((paren . \"(\")
              (bracket . \"[\"))

defines the functions WRAP-WITH-PAREN and WRAP-WITH-BRACKET,
respectively.

From https://ebzzry.com/en/emacs-pairs/"
    `(progn
       ,@(loop for (key . val) in pairs
               collect
               `(defun ,(read (concat "wrap-with-" (prin1-to-string key) "s"))
                    (&optional arg)
                  (interactive "p")
                  (sp-wrap-with-pair ,val)))))

  (def-pairs ((single-quote . "'")
              (double-quote . "\"")
              (back-quote . "`")))
  :general
  ("<backspace>" 'sp-backward-delete-char
   "<delete>" 'sp-delete-char)
  (:keymaps 'calum/paren-map
            "s" 'sp-wrap-square
            "c" 'sp-wrap-curly
            "r" 'sp-wrap-round
            "'" 'wrap-with-single-quotes
            "\"" 'wrap-with-double-quotes
            "`" 'wrap-with-back-quotes
            "d" 'sp-splice-sexp
            "w" 'sp-rewrap-sexp
            "l" 'sp-forward-sexp
            "L" 'sp-slurp-hybrid-sexp
            "h" 'sp-backward-sexp
            "H" 'sp-highlight-current-sexp
            "j" 'sp-down-sexp
            "k" 'sp-up-sexp
            "K" 'sp-kill-hybrid-sexp
            "n" 'sp-next-sexp
            "p" 'sp-previous-sexp
            "P" 'sp-push-hybrid-sexp
            "b" 'sp-beginning-of-sexp
            "e" 'sp-end-of-sexp
            ">" 'sp-beginning-of-next-sexp
            "<" 'sp-end-of-previous-sexp
            "D" 'sp-kill-sexp
            "y" 'sp-copy-sexp
            "," 'sp-transpose-sexp
            "o" 'sp-select-next-thing
            "O" 'sp-select-next-thing-exchange
            "S" 'sp-split-sexp
            "J" 'sp-join-sexp
            "t" 'sp-transpose-sexp
            "T" 'sp-transpose-hybrid-sexp
            "a" 'sp-add-to-next-sexp
            "A" 'sp-add-to-previous-sexp
            "v" 'sp-forward-slurp-sexp
            "V" 'sp-forward-barf-sexp
            "." 'sp-convolute-sexp
            ";" 'sp-comment
            "c" '(lambda () (interactive) (sp-change-enclosing) (meow-insert-mode))
            "C" '(lambda () (interactive) (sp-change-inner) (meow-insert-mode))
            "x" 'sp-extract-after-sexp
            "X" 'sp-extract-before-sexp
            "!" 'sp-prefix-pair-object
            "@" 'sp-prefix-save-excursion
            "#" 'sp-prefix-symbol-object
            "$" 'sp-prefix-tag-object)
  :hook
  ((org-mode bibtex-mode) . (lambda () (require 'smartparens-latex)))
  :config
  (require 'smartparens-config)
  (smartparens-global-mode)
  (show-smartparens-global-mode)
  (sp-with-modes 'org-mode
    (sp-local-pair "\\langle" "\\rangle"
                   :post-handlers '(sp-latex-insert-spaces-inside-pair))))
#+end_src
*** Structural editing (tree sitter)
#+begin_src emacs-lisp
(use-package treesit
  :straight (:type built-in)
  :custom
  (treesit-language-source-alist
   '((c "https://github.com/tree-sitter/tree-sitter-c")
     (cpp "https://github.com/tree-sitter/tree-sitter-cpp")))
  (treesit-font-lock-level 4)
  :config
  (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
  (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
  (add-to-list 'major-mode-remap-alist
               '(c-or-c++-mode . c-or-c++-ts-mode)))
#+end_src

**** Combobulate
https://github.com/mickeynp/combobulate uses tree sitter for
navigation and editing, still early stages project. Will require setup
for whatever languages I want.
#+begin_src emacs-lisp
(use-package combobulate
  :straight (combobulate :type git :host github :repo "mickeynp/combobulate")
  ;; Ensure `combobulate-mode` is activated when you launch a mode it supports
  ;; :hook
  ;; (purescript-mode . combobulate-mode)
  :preface
  (defun combobulate-setup-purescript ()
    (setq combobulate-manipulation-node-cluster-queries
          '((function_definition . (haskell (signature (_)) @match (function (_))))))
    (setq combobulate-navigation-node-types '(module
                                              function
                                              )))
  :config
  ;; (add-to-list 'combobulate-setup-functions-alist '(purescript-mode . combobulate-setup-purescript))
  )
#+end_src

*** Repeated edits

**** Multiple Cursors
https://github.com/magnars/multiple-cursors.el
#+begin_src emacs-lisp
(use-package multiple-cursors
  :general
  (:prefix-command 'calum/mc-map
                   "e" 'mc/edit-lines
                   "n" 'mc/cycle-forward
                   "p" 'mc/cycle-backward
                   "h" 'mc/edit-beginnings-of-lines
                   "l" 'mc/edit-ends-of-lines
                   "j" 'mc/mark-next-like-this
                   "k" 'mc/mark-previous-like-this
                   "m" 'mc/mark-more-like-this-extended
                   "a" 'mc/mark-all-dwim
                   "d" 'mc/mark-all-like-this-in-defun
                   )
  (:keymaps 'mc/keymap "<return>" nil)
  :custom
  (mc/edit-lines-empty-lines 'ignore))
#+end_src

**** Visual Regexp
https://github.com/benma/visual-regexp.el/
#+begin_src emacs-lisp
(use-package visual-regexp
  :general
  (:prefix-command 'calum/query-replace-map
                   "$" 'vr/replace
                   "m" 'vr/mc-mark
                   "q" 'vr/query-replace)
  :preface
  ;; Workaround to replace in the whole buffer
  ;; https://github.com/benma/visual-regexp.el/issues/16#issuecomment-877800085
  (defun vr--use-whole-buffer ()
    (unless (region-active-p) (setq vr--target-buffer-start (point-min))))
  :config
  (advice-add 'vr--set-target-buffer-start-end :after 'vr--use-whole-buffer)
  (calum/advise-push-mark-before 'vr/replace)
  (calum/advise-push-mark-before 'vr/mc-mark)
  (calum/advise-push-mark-before 'vr/query-replace))
#+end_src

** Org Mode
:PROPERTIES:
:ID:       14d53b60-22e4-416a-807d-33d001476862
:END:
*** General Setup
Documentation:
- [[help:org-capture-templates][Capture templates]]
- [[help:org-refile-targets][Org refile]]
- [[https://github.com/cdominik/cdlatex][CDLatex]]
- [[https://orgmode.org/manual/CDLaTeX-mode.html][CDLatex Org Mode]]
- [[info:org#Setting options][info:org#Setting options]]


Configures [[https://mobileorg.github.io/][Org Mobile]] syncing so I can write and view notes on my
IPhone. This requires [[https://rclone.org/docs/][rclone]] to be setup with a Dropbox provider named
~dropbox~.

#+begin_src emacs-lisp
(use-package cdlatex
  :after tex ;; Needs to be after auctex, due to cdlatex--texmathp
  :if (not calum/magit-mode)
  :custom
  (cdlatex-make-sub-superscript-roman-if-pressed-twice t)
  (cdlatex-math-symbol-alist '((?\" ("\\cap"))
                               (?@ ("\\text{?}"))
                               (?$ ("\\abs{?}"))))
  (cdlatex-use-dollar-to-ensure-math nil)
  (cdlatex-math-symbol-direct-bindings '(nil nil nil)) ;; TODO: possibly set this up for faster math symbols
  )
#+end_src

#+begin_src emacs-lisp
(use-package tex
  :straight auctex)
#+end_src

#+begin_src emacs-lisp
(use-package simple
  :straight (:type built-in)
  :delight
  (visual-line-mode nil "simple")
  (auto-fill-function nil "simple"))
#+end_src

#+begin_src emacs-lisp
(use-package org-habit
  :straight (:type built-in)
  :after org)
#+end_src

#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
(use-package org
  :if (not calum/magit-mode)
  :delight org-cdlatex-mode
  <<org-config>>
  )
#+END_SRC

**** ~<<org-config>>~
:PROPERTIES:
:header-args: :noweb-ref org-config :tangle no :results silent
:END:

***** Hooks
#+begin_src emacs-lisp
:hook ((org-mode . visual-line-mode)
       ;; (org-mode . org-indent-mode)
       ;; org-cdlatex-mode is useful for working with latex in org
       (org-mode . turn-on-org-cdlatex)
       ;; Wrap lines visually at the fill column
       (org-mode . visual-fill-column-mode)
       (org-mode . (lambda () (auto-fill-mode -1)))
       ((org-mode org-agenda-mode) . (lambda () (setq-local tab-width 8)))
       ;; (org-mode . calum/set-keyword-faces-org)
       (org-metaleft . calum/org-metaleft-hook)
       (org-metaright . calum/org-metaright-hook))
  #+end_src

***** Definitions
#+begin_src emacs-lisp
:preface

(defun add-caption (caption)
  "Allows adding captions to babel generated tables with ':wrap (add-caption \"some caption\")'

From https://stackoverflow.com/questions/35635423/org-mode-add-a-header-to-a-table-programmatically/35641694#35641694"
  (concat "org\n#+caption: " caption))

(defvar calum/todo-super-agenda-groups '((:auto-outline-path t)))

(defun calum/insert-heading-with-id ()
  (interactive)
  (org-insert-heading-respect-content)
  (org-id-get-create))

(defun calum/set-keyword-faces-org ()
  "https://hugocisneros.com/org-config/#hide-face-characters"
  (mapc (lambda (pair) (push pair prettify-symbols-alist))
        '(("TODO" .     "")
          ("DONE" .     "")
          ("#+begin_quote" . "“")
          ("#+end_quote" . "”")))
  (prettify-symbols-mode +1)
  )

(defun calum/paste-html-to-org ()
  "Take content from clipboard that can be converted to HTML and paste it as Org mode text using Pandoc

Based off this https://github.com/howardabrams/dot-files/blob/master/emacs-org.org#better-pasting"
  (interactive)
  (let ((text (shell-command-to-string "xclip -out -selection 'clipboard' -t text/html | pandoc -f html -t org")))
    (kill-new text)
    (yank)))
(defun calum/org-at-item-p ()
  (or (org-in-item-p)
      (and (org-region-active-p)
           (save-excursion
             (goto-char (region-beginning))
             (org-in-item-p)))))

(defun calum/org-metaleft-hook ()
  (if (calum/org-at-item-p)
      (call-interactively 'org-outdent-item-tree)))

(defun calum/org-metaright-hook ()
  (if (calum/org-at-item-p)
      (call-interactively 'org-indent-item-tree)))

(defun calum/insert-subscript (arg)
  "Insert org/latex subscript
Intended for use with 'cdlatex-tab'.
Use numeric prefix arg to insert number."
  (interactive "P")
  (insert (concat "_{" (if arg (format "%s" arg)) "}"))
  (backward-char 1))

(defun calum/insert-superscript (arg)
  "Insert org/latex superscript
Intended for use with 'cdlatex-tab'
Use numeric prefix arg to insert number."
  (interactive "P")
  (insert (concat "^{" (if arg (format "%s" arg)) "}"))
  (backward-char 1))

(defun calum/org-mobile-pull ()
  "Uses dropbox and rclone to pull changes from org mobile"
  (interactive)
  (message "Pulling changes from dropbox")
  (call-process-shell-command "rclone sync --fast-list dropbox: ~/Dropbox")
  (message "Done pulling")
  (org-mobile-pull)
  (org-save-all-org-buffers))

(defun calum/org-mobile-push ()
  "Uses dropbox and rclone to push changes to org mobile"
  (interactive)
  (org-super-agenda-mode 0)
  (org-mobile-push)
  (message "Pushing changes to dropbox")
  (call-process-shell-command "rclone sync --fast-list ~/Dropbox dropbox:")
  (message "Done")
  (org-super-agenda-mode 1))

(defun calum/org-mobile-sync ()
  "Uses dropbox and rclone to pull then push changes to org mobile"
  (interactive)
  (calum/org-mobile-pull)
  (calum/org-mobile-push))

(defun calum/open-heading-links ()
  (interactive)
  (save-excursion
    (while (org-up-heading-safe))
    (org-open-at-point)))

(defun calum/capture-frame-finish (&rest args)
  (interactive)
  (if (equal "Org Capture" (frame-parameter nil 'name))
      (delete-frame)))

(defun calum/capture-frame-delete-other-windows (&rest args)
  (interactive)
  (if (equal "Org Capture" (frame-parameter nil 'name))
      (delete-other-windows)))

(defun calum/capture-frame (keys)
  (interactive)
  (require 'org-capture)
  (advice-add 'org-capture-finalize :after #'calum/capture-frame-finish)
  (advice-add 'org-switch-to-buffer-other-window :after #'calum/capture-frame-delete-other-windows)
  (org-capture nil keys))

(defun calum/rerun-org-export ()
  "Rerun the previous export command"
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively 'org-export-dispatch)))

;; Functions to help insert org-id links, for use with
;; org-link-set-parameters, based on
;; https://emacs.stackexchange.com/a/12434 and ChatGPT
(defun org-id-complete-link (&optional arg)
  "Create an id: link using completion"
  (concat "id:"
          (org-id-get-with-outline-path-completion
           '((org-agenda-files . (:maxlevel . 3)) (nil . (:maxlevel . 10))))))

(defun get-org-entry-header-string-by-id (id)
  "Get the header string of the Org entry with a specific ID."
  (let ((marker (org-id-find id 'marker)))
    (when marker
      (with-current-buffer (marker-buffer marker)
        (save-excursion
          (goto-char marker)
          (org-get-heading t t t t))))))

(defun org-id-link-insert-description (loc desc)
  (get-org-entry-header-string-by-id (replace-regexp-in-string "^id:" "" loc)))
#+end_src

***** Keybinds
#+begin_src emacs-lisp
:general
(calum/leader-def
  :keymaps 'override
  "v" 'calc-dispatch)
(calum/leader-def
  :infix "o"
  :prefix-command 'org-actions-map
  "a" 'org-agenda
  "l" 'org-store-link
  "c" 'org-capture
  "RET" 'calum/insert-heading-with-id
  "n" '(nil :prefix-command org-noter-actions-map)
  "n S" '(org-noter :which-key "start note session")
  "n TAB" '(org-noter-insert-note-toggle-no-questions :which-key "insert quick note")
  "n i" '(org-noter-insert-note :which-key "insert note")
  "n C-M-i" '(org-noter-insert-precise-note-toggle-no-questions :which-key "insert quick precise note")
  "n M-i" '(org-noter-insert-precise-note :which-key "insert precise note")
  "n q" 'org-noter-kill-session
  "n C-M-." '(org-noter-sync-current-note :which-key "jump to page")
  "n M-." '(org-noter-sync-current-page-or-chapter :which-key "jump to note")
  "n n" 'org-noter-sync-next-page-or-chapter
  "n p" 'org-noter-sync-prev-page-or-chapter
  "n h" 'org-noter-set-hide-other
  "n k" 'org-noter-create-skeleton
  "n s" 'org-noter-set-auto-save-last-location
  "n b" 'org-noter-set-notes-window-behavior
  "n l" 'org-noter-set-notes-window-location
  "k" '(nil :prefix-command org-remark-actions-map)
  "k l" 'org-remark-mark-line
  "k k" 'org-remark-mark
  "k n" 'org-remark-view-next
  "k N" 'org-remark-next
  "k p" 'org-remark-view-prev
  "k P" 'org-remark-prev
  "k o" 'org-remark-open
  "k s" 'org-remark-save
  "k v" 'org-remark-view
  "k c" 'org-remark-change
  "k <backspace>" '(org-remark-delete :which-key "delete highlight + note")
  "k <delete>" '(org-remark-remove :which-key "delete highlight")
  "k t" 'org-remark-toggle
  "r" '(nil :prefix-command org-roam-actions-map)
  "r I" 'org-id-get-create
  "r i" 'org-roam-node-insert
  "r w" 'org-roam-refile
  "r u" 'org-roam-ui-mode
  "r c" 'org-roam-capture
  "r b" 'org-roam-buffer-toggle
  "r d" 'org-roam-buffer-display-dedicated
  "r s" 'org-roam-db-sync
  "r f" 'org-roam-node-find
  "r r" 'org-roam-ref-add
  "r t" 'org-roam-tag-add
  "r a" 'org-roam-alias-add
  "r p" 'org-roam-alias-add
  "r R" 'org-roam-ref-remove
  "r T" 'org-roam-tag-remove
  "r A" 'org-roam-alias-remove
  "r P" 'org-roam-alias-remove
  "M" '(nil :prefix-command org-misc-actions-map)
  "M j" '(org-journal-new-entry :which-key "new journal entry")
  "M d" 'org-decrypt-entry
  "M e" 'org-encrypt-entry
  "M p" 'calum/org-mobile-push
  "M f" 'calum/org-mobile-pull
  "M s" 'calum/org-mobile-sync
  "M o" 'calum/open-heading-links
  "M i" 'org-download-clipboard
  "M h" 'calum/paste-html-to-org
  "M t" 'org-toggle-inline-images
  "M x" 'calum/rerun-org-export
  "M r" 'org-mode-restart
  )
(:keymaps 'org-mode-map
          ;; Use return to insert a new item when at an item, behave
          ;; normally otherwise. When at an item and a newline is
          ;; needed, use C-j
          "RET" (general-predicate-dispatch 'org-return
                  (and (eolp) (calum/org-at-item-p)) 'org-meta-return))
(:keymaps 'org-mode-map
          :predicate '(meow-insert-mode-p)
          "C-d" 'cdlatex-tab
          "C-s" 'calum/insert-superscript
          "C-M-s" 'calum/insert-subscript)
#+end_src

***** Faces
See [[https://www.nordtheme.com/docs/colors-and-palettes]] for colours.

  #+begin_src emacs-lisp
:custom-face
(org-level-3 ((nil :height 1.1)))
(org-level-2 ((nil :height 1.2)))
(org-level-1 ((nil :height 1.3)))
(org-ellipsis ((nil :inherit 'org-level-8 :foreground "#D8DEE9")))
;; Use plain styling for org column view, otherwise it looks messy
;; when combined with other packages styling
(org-column ((t (:inherit default :strike-through nil :underline nil :slant normal :weight normal))))
  #+end_src

***** Variables
#+begin_src emacs-lisp
:custom
(org-log-into-drawer t)
(org-log-done 'time)
;; Don't start clock from the previous clock out
(org-clock-continuously nil)
;; Save clock history and the current clock when emacs closes
(org-clock-persist t)
(org-clock-x11idle-program-name "xprintidle")
(org-clock-idle-time nil)
;; For effort estimates, assume an eight hour work day, 11 month work
;; year.
(org-duration-units `(("min" . 1)
                      ("h" . 60)
                      ("d" . ,(* 60 8))
                      ("w" . ,(* 60 8 5))
                      ("m" . ,(* 60 8 5 4))
                      ("y" . ,(* 60 8 5 4 11))))
(org-duration-format '(("m") ("d") ("h") ("min")))
;; Consider "today" over at 5am instead of midnight
(org-extend-today-until 5)

;; Set the link colors to blue by default for PDF export, instead of
;; coloured boxes (which don't show up in some pdf viewers)
(org-latex-hyperref-template "\\hypersetup{pdfauthor={%a}, pdftitle={%t}, pdfkeywords={%k}, pdfsubject={%d}, pdfcreator={%c}, pdflang={%L},colorlinks=true,linkcolor=blue,urlcolor=blue,filecolor=blue,citecolor=blue,anchorcolor=blue,linktocpage=true,unicode=true,psdextra}")
(org-ellipsis " ⤸ ")
(org-hidden-keywords nil)
(org-cycle-level-faces nil)
(org-n-level-faces 4)
(org-pretty-entities t)
(org-startup-indented nil)
;; Add refiled items to the top of lists instead of the bottom
(org-reverse-note-order t)
(org-latex-compiler "xelatex")
(org-latex-listings 'minted)
(org-latex-pdf-process
 '("latexmk -shell-escape -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f"
   ;; "latexmk -shell-escape -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f"
   ))
(org-latex-prefer-user-labels t)
(org-latex-packages-alist
 '(("" "mathtools" t) ; Note: mathtools should come before unicode-math
   ("" "fontspec" nil)
   ("" "unicode-math" t)
   ("" "xcolor" t)
   ("" "minted" t)
   ("left=2.5cm, right=2.5cm, top=2.5cm, bottom=2.5cm" "geometry" t)
   ("" "bm" t)))
(org-format-latex-options
 '(:foreground default
               :background default
               :scale 1.4
               :html-foreground "Black"
               :html-background "Transparent"
               :html-scale 1.0
               :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))
;; Use org-agenda-file-to-front (C-c [) to add the current file to
;; the list of agenda files
(org-directory "~/org")
(org-default-notes-file (concat org-directory "/notes.org"))
;; Set to the name of the file where notes captured on mobile will
;; be stored
;; setsid required for xdg-open to work, from here
;; https://askubuntu.com/a/883905
(org-file-apps '((auto-mode . emacs)
                 (directory . "setsid -w xdg-open %s")
                 ("\\.mm\\'" . default)
                 ("\\.x?html?\\'" . default)
                 ("\\.pdf\\'" . "setsid -w xdg-open %s")
                 (t . "setsid -w xdg-open %s")))
;; Don't keep indenting when adding whitespace
(org-src-preserve-indentation t)
;; Tab indents using the src block's language's behaviour
(org-src-tab-acts-natively t)
;; Don't ask for confirmation when evaluating src blocks
(org-confirm-babel-evaluate nil)
(org-outline-path-complete-in-steps nil)
(org-completion-use-ido nil)

;; Automatically create a header if it doesn't already exist in the refile target path
(org-refile-allow-creating-parent-nodes t)

(org-M-RET-may-split-line nil)

;; Start agenda on previous monday
(org-agenda-start-on-weekday 1)
;; Use 'S' key in agenda buffer to show sunrise/sunset, 'M' for lunar
;; phases.
(calendar-latitude 51)
(calendar-longitude -114)
(org-agenda-restore-windows-after-quit t)
(org-enforce-todo-dependencies t)
(org-enforce-todo-checkbox-dependencies nil)
(org-agenda-dim-blocked-tasks t)
(org-agenda-todo-list-sublevels nil)
;; Show icons instead of category names in agenda prefix
(org-agenda-category-icon-alist
 `(("auspice" ,(list (all-the-icons-material "work" :height 1.2)) nil nil :ascent center)
   ("calum" ,(list (all-the-icons-material "home" :height 1.2)) nil nil :ascent center)
   ("inbox" ,(list (all-the-icons-material "inbox" :height 1.2)) nil nil :ascent center)
   ("organizer" ,(list (all-the-icons-fileicon "org" :height 1.2)) nil nil :ascent center)
   ("finances" ,(list (all-the-icons-material "attach_money" :height 1.2)) nil nil :ascent center)
   ("Anniversary" ,(list (all-the-icons-material "cake" :height 1.2)) nil nil :ascent center)
   ("Holiday" ,(list (all-the-icons-material "event" :height 1.2)) nil nil :ascent center)
   ))
(org-agenda-prefix-format
 '((agenda . " %i %?-12t% s")
   (todo . " %i ")
   (tags . " %i ")
   (search . " %i ")))
(org-agenda-time-grid
 '((daily today require-timed)
   (800 1000 1200 1400 1600 1800 2000)
   " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
;; Also search the archive files when doing org searches like with
;; 'org-search-view'
(org-agenda-text-search-extra-files '(agenda-archives))
;; Organize archived items into a datetree
(org-archive-location "%s_archive::datetree/")
;; Save archive file after archive from agenda and from org file
(org-archive-subtree-save-file-p t)

;; (org-agenda-category-icon-alist nil)
;; Don't show inline images with their actual width
(org-image-actual-width nil)

(org-catch-invisible-edits 'error)
(org-export-allow-bind-keywords t)

;; Use unique ids for links to org headings
(org-id-link-to-org-use-id t)
  #+end_src

****** Capture Templates
:PROPERTIES:
:ID:       9f93fccf-dce8-4d35-ad3e-a93be70d4fc9
:END:
  #+begin_src emacs-lisp
(org-capture-templates
 '(("t" "Todo" entry (file+headline "" "Tasks")
    "* TODO %?\n  %i\n")
   ("n" "Note" entry (file+headline "" "Quick Notes")
    "* %U\n%?\n")
   ("m" "Meeting" entry (file+headline "auspice.org" "Meetings")
    "* %U\n%?\n" :prepend t)
   ("d" "Daily Auspice Log" item (file+olp+datetree "auspice.org" "Dev log") nil
    :jump-to-captured t :tree-type day)
   ("j" "Jump to Daily Auspice Log" plain (file+olp+datetree "auspice.org" "Dev log") nil
    :jump-to-captured t :tree-type day :immediate-finish t :empty-lines-after 1)
   ))
#+end_src

****** Agenda custom commands
#+begin_src emacs-lisp
(org-agenda-custom-commands
 '(("p" "Personal" todo ""
    ((org-agenda-category-filter-preset '("+calum"))
     (org-super-agenda-groups calum/todo-super-agenda-groups)
     ))
   ("o" "Organizer App" todo ""
    ((org-agenda-category-filter-preset '("+organizer"))
     (org-agenda-todo-list-sublevels t)
     (org-super-agenda-groups calum/todo-super-agenda-groups)
     ))
   ("h" "Habits"
    ((agenda "" ((org-super-agenda-groups calum/todo-super-agenda-groups)
                 (org-agenda-span 1)))
     (tags-todo "+goal+non_daily"
                ((org-super-agenda-date-format "%A, %B %-e")
                 (org-super-agenda-groups '((:auto-planning t)))
                 ;; (org-agenda-prefix-format
                 ;; " %-55 b%(let ((scheduled (org-get-scheduled-time (point)))) (if scheduled (format-time-string \"%a %b %d\" scheduled) \"\")) ")
                 (org-agenda-prefix-format
                  " %-50 (concat \"(\" (car (last (org-get-outline-path))) \")\")")
                 (org-agenda-sorting-strategy '(scheduled-up)))))
    ((org-agenda-tag-filter-preset '("+goal"))
     (org-agenda-category-filter-preset '("+calum"))
     (org-agenda-files '("~/org/calum.org"))
     ;; When doing filing after midnight, consider it as still the
     ;; previous day
     (org-use-effective-time t)
     ))
   ("w" . "Auspice")
   ("ww" "Two Week Agenda and Tasks" ((agenda "") (todo ""))
    ((org-agenda-category-filter-preset '("+auspice"))
     (org-agenda-span 14)
     (org-agenda-files '("~/org/auspice.org"))
     (org-super-agenda-groups calum/todo-super-agenda-groups)
     ))
   ("wp" "Portfolio Analyzer Issues" tags-todo "+issue"
    ((org-agenda-category-filter-preset '("+auspice"))
     (org-agenda-files '("~/org/auspice.org"))
     (org-agenda-view-columns-initially t)
     ))
   ("wt" "Todo" todo ""
    ((org-agenda-category-filter-preset '("+auspice"))
     (org-agenda-files '("~/org/auspice.org"))
     (org-super-agenda-groups calum/todo-super-agenda-groups)
     ))
   ))
#+end_src

***** Config
#+begin_src emacs-lisp
:config/el-patch
;; Custom patch to make the "est+" summary for column view respect
;; lower-upper bound time estimates given in org-duration format, and
;; to just give a simple estimate if there is no difference in the
;; lower and upper bounds.
(defun org-columns--summary-estimate (estimates _)
  "Combine a list of estimates, using mean and variance.
The mean and variance of the result will be the sum of the means
and variances (respectively) of the individual estimates."
  (let ((mean 0)
        (var 0))
    (dolist (e estimates)
      (pcase (mapcar (el-patch-swap #'string-to-number #'org-duration-to-minutes) (split-string e "-"))
        (`(,low ,high)
         (let ((m (/ (+ low high) 2.0)))
           (cl-incf mean m)
           (cl-incf var (- (/ (+ (* low low) (* high high)) 2.0) (* m m)))))
        (`(,value) (cl-incf mean value))))
    (let ((sd (sqrt var)))
      (el-patch-swap (format "%s-%s"
                             (format "%.0f" (- mean sd))
                             (format "%.0f" (+ mean sd)))
                     (if (zerop sd)
                         (org-duration-from-minutes (- mean sd))
                       (format "%s-%s"
                               (org-duration-from-minutes (- mean sd))
                               (org-duration-from-minutes (+ mean sd)))))
      )))

:config
;; Org column view gets cropped by visual fill column mode
(advice-add 'org-columns
            :after #'(lambda (&rest _)
                       (visual-fill-column-mode -1)))

(advice-add 'org-columns-quit
            :after #'(lambda (&rest _)
                       (visual-fill-column-mode 1)))

(advice-add 'org-agenda-columns
            :after #'(lambda (&rest _)
                       (visual-fill-column-mode -1)))

(make-directory org-directory t)

(org-link-set-parameters "editpdf"
                         :follow (lambda (path)
                                   (start-process "" nil "xournalpp" (expand-file-name path)))
                         :complete 'org-link-complete-file)

(require 'org-id)
(org-link-set-parameters "id"
                         :complete 'org-id-complete-link
                         :insert-description 'org-id-link-insert-description)

(org-clock-persistence-insinuate)

;; After refiling something, save all the buffers automatically
(advice-add 'org-refile
            :after #'(lambda (&rest _)
                       (org-save-all-org-buffers)))

;; (org-babel-do-load-languages 'org-babel-load-languages
;;                              ;; seq-filter is a fix from https://github.com/purcell/emacs.d/issues/791 for "ob-ledger not found"
;;                              (seq-filter
;;                               (lambda (pair)
;;                                 (featurep (intern (concat "ob-" (symbol-name (car pair))))))
;;                               '((emacs-lisp . t)
;;                                 (org . t)
;;                                 (python . t)
;;                                 (ledger . t)
;;                                 (latex . t)
;;                                 (shell . t)
;;                                 (R . t))))
(org-babel-do-load-languages 'org-babel-load-languages
                             '((emacs-lisp . t)
                               (org . t)
                               (python . t)
                               (ledger . t)
                               (latex . t)
                               (shell . t)
                               (R . t)))
;; Allow for jumping back after jupming to src block head
(calum/advise-push-mark-before 'org-babel-goto-src-block-head)
#+end_src

*** Org habit stats
https://github.com/ml729/org-habit-stats
#+begin_src emacs-lisp
(use-package org-habit-stats
  :general
  (:keymaps 'org-agenda-mode-map
            "H" 'org-habit-stats-view-habit-at-point-agenda)
  (:keymaps 'org-habit-stats-mode-map
            ;; Close the window, kill the buffer, and restore window configuration
            "q" #'(lambda () (interactive) (quit-window t)))
  :config/el-patch
  ;; Patch to open the buffer in other window
  (defun org-habit-stats-create-habit-buffer (habit-data habit-name habit-description habit-source)
    "Create buffer displaying statistics, a calendar, and a bar graph.

HABIT-DATA contains results from `org-habit-stats-parse-todo`.
The name of the habit HABIT-NAME and description
HABIT-DESCRIPTION are displayed at the top of the buffer. The
HABIT-SOURCE is either 'agenda or 'file, indicating what kind of
buffer the habit was located in. This is used by commands that
navigate between habits."
    (let* ((history (org-habit-stats-get-repeat-history-old-to-new habit-data))
           (history-rev (reverse history))
           (buff-name (concat "*Org-Habit-Stats "
                              (truncate-string-to-width habit-name 25 nil nil t)
                              "*"))
           (cal-buff-name (concat "*Org-Habit-Stats Calendar "
                                  (truncate-string-to-width habit-name 25 nil nil t)
                                  "*")))
      (setq org-habit-stats-current-buffer buff-name)
      (setq org-habit-stats-current-calendar-buffer cal-buff-name)
      ((el-patch-swap switch-to-buffer switch-to-buffer-other-window) (get-buffer-create org-habit-stats-current-buffer))
      (erase-buffer)
      (org-habit-stats-mode)
      (setq org-habit-stats-habit-source habit-source)
      (setq org-habit-stats-current-history history)
      (setq org-habit-stats-current-history-rev history-rev)
      (setq org-habit-stats-current-habit-data habit-data)
      (setq org-habit-stats-current-habit-name habit-name)
      (setq org-habit-stats-current-habit-description habit-description)
      (org-habit-stats--insert-habit-buffer-contents)
      (set-buffer-modified-p nil))))
#+end_src
*** Org Mobile
#+begin_src emacs-lisp
(use-package org-mobile
  :after org
  :straight nil
  :custom
  (org-mobile-inbox-for-pull org-default-notes-file)
  :preface
  (defvar org-mobile-directory "~/Dropbox/Apps/MobileOrg")
  :config
  (make-directory org-mobile-directory t)
  )
#+end_src

*** Org Aesthetics w/ Org Modern
Config from https://github.com/minad/org-modern
#+begin_src emacs-lisp
(use-package org-modern
  :custom
  (org-tags-column 0)
  (org-auto-align-tags nil)
  (org-hide-emphasis-markers t)
  (org-agenda-tags-column 0)
  (org-agenda-block-separator ?─)
  :config
  (modify-all-frames-parameters
   '((right-divider-width . 0)
     (internal-border-width . 10)))
  (dolist (face '(window-divider
                  window-divider-first-pixel
                  window-divider-last-pixel))
    (face-spec-reset-face face)
    (set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background))
  (global-org-modern-mode))
#+end_src

*** Org Aesthetics w/ Superstar
Show nicer bullet points for headers: https://github.com/integral-dw/org-superstar-mode

Trying out [[*Org Aesthetics w/ Org Modern][Org Modern]] instead.

#+begin_src emacs-lisp
(use-package org-superstar
  :disabled
  :after org
  :preface
  (defun superstar-auto-lightweight-mode ()
    "Start Org Superstar differently depending on the number of lists items. From https://github.com/integral-dw/org-superstar-mode#fast-plain-list-items"
    (let ((list-items
           (count-matches "^[ \t]*?\\([+-]\\|[ \t]\\*\\)"
                          (point-min) (point-max))))
      (unless (< list-items 100)
        (org-superstar-toggle-lightweight-lists)))
    (org-superstar-mode))
  :hook
  (org-mode . superstar-auto-lightweight-mode)
  :custom-face
  (org-superstar-first ((nil :foreground "#B48EAD")))
  :custom
  ;; Set different bullets, with one getting a terminal fallback.
  (org-superstar-headline-bullets-list '("◉" ("🞛" ?◈) "○" "▷"))
  ;; Don't show headline bullets
  ;; (org-superstar-headline-bullets-list nil)
  ;; Set up a different marker for graphic display.
  (org-superstar-first-inlinetask-bullet ?🞸)
  ;; Stop cycling bullets to emphasize hierarchy of headlines.
  (org-superstar-cycle-headline-bullets nil)
  (org-superstar-leading-bullet ?\s)
  (org-superstar-item-bullet-alist
   '((?* . ?•)
     (?+ . ?–)
     (?- . ?➤)))
  (org-superstar-special-todo-items t)
  (org-superstar-remove-leading-stars nil)
  (org-indent-mode-turns-on-hiding-stars nil)
  )
#+end_src

*** Org Inlinetask
https://github.com/amluto/org-mode/blob/master/lisp/org-inlinetask.el
#+begin_src emacs-lisp
(use-package org-inlinetask
  :after org
  :straight nil
  :custom
  (org-inlinetask-show-first-star t)
  :custom-face
  (org-inlinetask ((nil :foreground "unspecified" :inherit 'bold))))
#+end_src

*** Org Indent
[[https://emacs.stackexchange.com/a/22552][Org-indent must be diminished after loading.]]
#+begin_src emacs-lisp
(use-package org-indent
  :disabled
  :if (not calum/magit-mode)
  :straight nil
  :delight org-indent-mode)
#+end_src

*** Exporters
#+begin_src emacs-lisp
(require 'ox-md)
(use-package ox-gfm)
(use-package ox-json :disabled t)
(use-package ox-ravel
  :disabled t
  :straight nil
  :load-path "/home/calum/.config/emacs/manual-plugins/ox-ravel")
(use-package ox-ipynb
  :disabled t
  :straight nil
  :load-path "/home/calum/.config/emacs/manual-plugins/ox-ipynb")
#+end_src

**** Citations
#+begin_src emacs-lisp
(use-package oc-basic
  :straight nil
  :config
  (require 'oc-natbib)
  )
#+end_src

**** Org Latex Export
#+begin_src emacs-lisp
(require 'ox-latex)
(add-to-list 'org-latex-classes
             '("apa7"
               "\\documentclass[stu,12pt,a4paper,biblatex,floatsintext]{apa7}
\\usepackage{moreverb} % For \\verbatiminput
\\usepackage{unicode-math}
\\usepackage{float}
               [EXTRA]
               [NO-DEFAULT-PACKAGES]
               [NO-PACKAGES]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(add-to-list 'org-latex-classes
             '("cpsc501"
               "\\documentclass[11pt, a4paper]{article}
\\usepackage[studentname=Calum\\ Sieppert,ucid=30093813,coursesubject=CPSC,coursenumber=501,coursename=Advanced\\ Programming,courseterm=f23,courseinstructor=Dr\\ Leonard\\ Manzara]{/home/calum/OneDriveSchool/year5/fall/CPSC_525/assignments/assignment}
               [NO-DEFAULT-PACKAGES]
               [NO-PACKAGES]
\\usepackage{mathtools}
"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(add-to-list 'org-latex-classes
             '("cpsc525"
               "\\documentclass[11pt, a4paper]{article}
\\usepackage[studentname=Calum\\ Sieppert,ucid=30093813,coursesubject=CPSC,coursenumber=525/625,coursename=Principles\\ of\\ Computer\\ Security,courseterm=f23,courseinstructor=Ryan\~Henry\\ \\textless\\texttt{ryan.henry@ucalgary.ca}\\textgreater]{/home/calum/OneDriveSchool/year5/fall/CPSC_525/assignments/assignment}
               [NO-DEFAULT-PACKAGES]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(add-to-list 'org-latex-classes
             '("acmart"
               "\\documentclass[manuscript,screen]{acmart}
               [NO-DEFAULT-PACKAGES]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(add-to-list 'org-latex-classes
             '("awesome-cv"
               "\\documentclass[11pt, a4paper]{awesome-cv}
               [NO-DEFAULT-PACKAGES]"
               ("\\cvsection{%s}" . "\\cvsection*{%s}")
               ("\\cvparagraph{%s}" . "\\cvparagraph*{%s}")))
(add-to-list 'org-latex-classes
             '("cpsc433"
               "\\documentclass[11pt, a4paper]{article}
               \\usepackage[margin=0.9in,bmargin=1.0in,tmargin=1.0in]{geometry}
               \\newcommand{\\N}{\\mathbb{N}}
               \\newcommand{\\Z}{\\mathbb{Z}}
               \\newcommand{\\As}{A_{\\text{set}}}
               \\newcommand{\\Ss}{S_{\\text{set}}}
               \\newcommand{\\Ts}{T_{\\text{set}}}
               \\newcommand{\\Ps}{P_{\\text{set}}}
               \\newcommand{\\Ks}{K_{\\text{set}}}
               \\newcommand{\\Gs}{G_{\\text{set}}}
               \\newcommand{\\fv}{f_{\\text{Wert}}}
               \\newcommand{\\fs}{f_{\\text{select}}}
               \\newcommand{\\Ext}{\\text{Ext}}
               \\newcommand{\\Env}{\\text{Env}}
               \\newcommand{\\Inss}{\\text{Ins}_{set}}
               \\newcommand{\\Prob}{\\mathsf{Prob}}
               \\newcommand{\\Div}{\\mathsf{Div}}
               \\newcommand{\\Andmodel}{\\mathsf{A}_{\\wedge}}
               \\newcommand{\\Andstate}{\\mathsf{S}_{\\wedge}}
               \\newcommand{\\Andtrans}{\\mathsf{T}_{\\wedge}}
               \\newcommand{\\Anderw}{\\mathsf{Erw}_{\\wedge}}
               \\newcommand{\\Anderws}{\\mathsf{Erw}^{*}_{\\wedge}}
               \\newcommand{\\Atree}{\\mathsf{Atree}}
               \\newcommand{\\fleaf}{f_{\\mathsf{leaf}}}
               \\newcommand{\\ftrans}{f_{\\mathsf{trans}}}
               \\newcommand{\\pr}{\\mathsf{pr}}
               \\newcommand{\\sol}{\\mathsf{sol}}
               \\newcommand{\\yes}{\\mathsf{yes}}
               \\newcommand{\\Courses}{\\mathsf{Courses}}
               \\newcommand{\\Labs}{\\mathsf{Labs}}
               \\newcommand{\\Slots}{\\mathsf{Slots}}
               \\newcommand{\\coursemax}{\\mathsf{coursemax}}
               \\newcommand{\\labmax}{\\mathsf{labmax}}
               \\newcommand{\\assign}{\\mathsf{assign}}
               \\newcommand{\\BestCase}{\\mathsf{BestCase}}
               \\newcommand{\\Valid}{\\mathsf{Valid}}
               \\newcommand{\\Complete}{\\mathsf{Complete}}
               \\newcommand{\\Possibilities}{\\mathsf{Possibilities}}
               \\newcommand{\\Depth}{\\mathsf{Depth}}
               \\newcommand{\\theTreeSoFar}{\\mathsf{theTreeSoFar}}
               \\newcommand{\\Constr}{\\mathsf{Constr}}
               \\newcommand{\\Eval}{\\mathsf{Eval}}
               \\usepackage[shortcuts]{extdash} % allow hyphenation with \\-/
               \\newcommand{\\ncompat}{\\mathsf{not\\-/compat}}
               \\newcommand{\\partassign}{\\mathsf{partassign}}
               \\newcommand{\\unwanted}{\\mathsf{unwanted}}
               \\newcommand{\\coursemin}{\\mathsf{coursemin}}
               \\newcommand{\\labmin}{\\mathsf{labmin}}
               \\newcommand{\\pencoursemin}{\\mathsf{pen\\_coursemin}}
               \\newcommand{\\penlabmin}{\\mathsf{pen\\_labmin}}
               \\newcommand{\\pref}{\\mathsf{preference}}
               \\newcommand{\\pair}{\\mathsf{pair}}
               \\newcommand{\\pennotpaired}{\\mathsf{pen\\_notpaired}}
               \\newcommand{\\pensection}{\\mathsf{pen\\_section}}
               \\usepackage{fontspec}
               \\usepackage{unicode-math}
               \\usepackage{amsmath}
               \\usepackage{hyperref}
               \\usepackage{braket}
               \\usepackage{amsthm}
               \\theoremstyle{definition}
               \\newtheorem{defn}{Definition}[section]
               [NO-DEFAULT-PACKAGES]
               "
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(add-to-list 'org-latex-classes
             '("cpsc413"
               "\\documentclass[11pt, a4paper]{article}
               \\usepackage[margin=0.9in,bmargin=1.0in,tmargin=1.0in]{geometry}
               \\usepackage[ruled,linesnumbered]{algorithm2e}
               \\usepackage{amsmath}
               \\usepackage{amsthm}
               \\usepackage{hyperref}
               \\theoremstyle{definition}
               \\newcommand{\\N}{\\mathbb{N}}
               \\newcommand{\\Z}{\\mathbb{Z}}
               \\newtheorem{defn}{Definition}[section]
               \\newtheorem{lemma}{Lemma}[section]
               \\newtheorem{property}{Property}[section]
               \\newtheorem{proposition}{Proposition}[section]
               \\theoremstyle{remark}
               \\newtheorem*{remark}{Remark}
               \\SetKwComment{Comment}{/* }{ */}
               \\newcommand{\\pluseq}{\\mathrel{+}=}
               \\newcommand{\\minuseq}{\\mathrel{-}=}
               \\newcommand{\\var}{\\texttt}
               \\newcommand{\\NP}{\\mathcal{NP}}
               \\newcommand{\\pred}{\\leq_P}
               \\usepackage{mathtools}
               \\DeclarePairedDelimiter\\ceil{\\lceil}{\\rceil}
               \\DeclarePairedDelimiter\\floor{\\lfloor}{\\rfloor}
               "
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

*** Org Contrib
To allow for ignoring headlines with an "ignore" tag in when exporting
from Org Mode, from [[https://emacs.stackexchange.com/a/41685][here]].
#+begin_src emacs-lisp
(use-package org-contrib
  :config
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))
  )
#+end_src

*** Org Download
Call ~org-download-clipboard~ to paste the most recent screenshot.
#+begin_src emacs-lisp
(use-package org-download
  :config
  (setq-default org-download-image-dir "screenshots")
  (setq org-download-screenshot-method "xclip"
        org-download-display-inline-images nil
        org-download-image-org-width 900))
#+end_src

*** Org Super Agenda
[[https://github.com/alphapapa/org-super-agenda][Org super agenda]] for organizing the agenda view in different ways.
#+begin_src emacs-lisp
(use-package org-super-agenda
  :if (not calum/magit-mode)
  :after org
  :general
  (:keymaps 'org-super-agenda-header-map
            "<tab>" 'origami-toggle-node
            "j" nil
            "k" nil
            "SPC" nil)
  :config
  ;; Note: To get the empty group hiding to work, I had to add the following line to org-super-agenda.el after line 308 in org-super-agenda--make-agenda-header:
  ;; (put-text-property 0 (length header) 'org-super-agenda-header t header)
  ;; This is because the org-super-agenda--hide-or-show-groups function relies on the text property, and line 308 did not seem to be adding the property correctly
  ;; After editing that file, run byte-recompile-directory
  (setq org-super-agenda-hide-empty-groups t)
  (org-super-agenda-mode 1))
#+end_src

*** Org Journal
#+begin_src emacs-lisp
(use-package org-journal
  :custom
  (org-journal-dir "~/org/journal/")
  (org-journal-file-type 'weekly)
  :hook
  ;; Not sure why this setting doesn't seem to be inherited from org
  ;; mode
  (org-journal-mode . (lambda () (auto-fill-mode -1)))
  :config
  (setq org-crypt-key "Calum Sieppert <sieppertcalum@gmail.com>"
        org-tags-exclude-from-inheritance '("crypt")))
#+end_src

*** Org Appear
https://github.com/awth13/org-appear

Useful for editing org mode hidden entities, like emphasis markers.
#+begin_src emacs-lisp
(use-package org-appear
  :hook
  (org-mode . org-appear-mode)
  :custom
  (org-appear-inside-latex t)
  (org-appear-autosubmarkers t))
#+end_src

For automatically (un)previewing latex fragments
https://github.com/io12/org-fragtog

#+begin_src emacs-lisp
(use-package org-fragtog
  :hook
  (org-mode . org-fragtog-mode))
#+end_src

*** Org Roam

To keep many roam nodes in the same file and have unlinked references
still work, I had to make some changes to the org-roam source:
https://github.com/org-roam/org-roam/issues/2397

#+begin_src emacs-lisp
(use-package org-roam
  :custom (org-roam-directory (file-truename "~/org"))
  (org-roam-mode-sections (list #'org-roam-backlinks-section #'org-roam-reflinks-section
                                #'org-roam-unlinked-references-section
                                ))
  (org-roam-graph-viewer "qutebrowser")
  (org-roam-graph-executable "dot")
  (org-roam-database-connector 'sqlite-builtin)
  ;; Allows searching by tags as well as title
  (org-roam-node-display-template
   (concat "${title:50} "
           (propertize "${tags:*}" 'face 'org-tag)))
  (org-roam-capture-templates
   '(
     ("e" "entry" entry "* ${title}%?  %^g
:PROPERTIES:
:ID: %(org-id-new)
:END:"
      :target (node "Math-311-Notes")
      :prepend t
      )
     ("d" "default" plain "%?" :target
      (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}
")
      :unnarrowed t
      :no-save nil
      :kill-buffer nil
      :jump-to-captured t)))
  (org-roam-capture-ref-templates
   '(("r" "ref" plain "%?" :target
      (file+head "${slug}.org" "#+title: ${title}")
      :unnarrowed t
      :kill-buffer nil)))
  :preface
  (defun my/return-t (orig-fun &rest args)
    t)
  (defun my/disable-yornp (orig-fun &rest args)
    (advice-add 'yes-or-no-p :around #'my/return-t)
    (advice-add 'y-or-n-p :around #'my/return-t)
    (let ((res (apply orig-fun args)))
      (advice-remove 'yes-or-no-p #'my/return-t)
      (advice-remove 'y-or-n-p #'my/return-t)
      res))
  :config
  ;; Skip the delete file confirmation on abort/refile
  ;; https://github.com/org-roam/org-roam/issues/2277#issuecomment-1481079702
  (advice-add 'org-roam-capture--finalize :around #'my/disable-yornp)
  (advice-add 'org-roam-node-insert :before
              #'(lambda (&rest _)
                  "Add an ID to the item so backlinks work"
                  (org-id-get-create)))
  (require 'org-roam-protocol)
  (org-roam-db-autosync-enable)
  )
#+end_src

**** Org Roam UI

#+begin_src emacs-lisp
(use-package org-roam-ui)
#+end_src

*** Org Noter
https://github.com/org-noter/org-noter/
#+begin_src emacs-lisp
(use-package org-noter
  :after pdf-tools
  :custom
  (org-noter-default-notes-file-names org-agenda-files)
  ;; The search path is only used as a prefix for the file names
  ;; specified in org-noter-default-notes-file-names, the directories
  ;; aren't actually searched for all org files within
  (org-noter-notes-search-path (list org-directory))
  :general
  ;; The default C-M-n/p binding overlap with my Meow next/prev-line
  ;; bindings, so j/k end up triggering org-note-sync calls if I don't
  ;; unset the bindings.
  (:keymaps 'org-noter-doc-mode-map
            "C-M-n" nil
            "C-M-p" nil)
  (:keymaps 'org-noter-notes-mode-map
            "C-M-n" nil
            "C-M-p" nil)
  )
#+end_src

*** Org Remark
#+begin_src emacs-lisp
(use-package org-remark
  ;; Alternative way to enable `org-remark-global-tracking-mode' in
  ;; `after-init-hook'.
  ;; :hook (after-init . org-remark-global-tracking-mode)
  :init
  ;; It is recommended that `org-remark-global-tracking-mode' be
  ;; enabled when Emacs initializes. Alternatively, you can put it to
  ;; `after-init-hook' as in the comment above
  (org-remark-global-tracking-mode +1)
  :config
  (use-package org-remark-info :straight nil :after info :config (org-remark-info-mode +1))
  (use-package org-remark-eww :straight nil :after eww  :config (org-remark-eww-mode +1))
  (use-package org-remark-nov :straight nil :after nov  :config (org-remark-nov-mode +1)))
#+end_src
*** Org sync
https://github.com/arbox/org-sync

Used to initially import issues from a repo, not great for actually keeping them in sync.

#+begin_src emacs-lisp
(use-package org-sync
  ;; Defer loading until this is used
  :commands org-sync-import
  :custom
  (org-sync-github-auth (cons "rynoV" (auth-source-get-password "api.github.com" "rynoV^forge")))
  :config
  (mapc 'load '("org-sync" "org-sync-github")))
#+end_src
** Snippets with tempel
- https://github.com/minad/tempel
- https://github.com/Crandel/tempel-collection
  - https://github.com/Crandel/tempel-collection/blob/main/templates/org.eld
  - https://github.com/Crandel/tempel-collection/blob/main/templates/fundamental.eld
  - https://github.com/Crandel/tempel-collection/blob/main/templates/emacs-lisp.eld
#+begin_src emacs-lisp
(use-package tempel
  :preface
  (defun calum/edit-snippets ()
    (interactive)
    (chezmoi-find (concat user-emacs-directory "templates")))
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))
  (defun tempel-reload ()
    "From https://github.com/minad/tempel/issues/74"
    (interactive)
    (setq tempel--path-templates nil))
  :general
  (calum/leader-def
    "M t" 'tempel-insert
    "M r" 'tempel-reload
    "M s" 'calum/edit-snippets
    )
  :hook
  (prog-mode . tempel-setup-capf)
  (text-mode . tempel-setup-capf))

(use-package tempel-collection)
#+end_src

** Completion and search
*** Minibuffer completion with consult
#+begin_src emacs-lisp
(use-package consult
  :general
  (calum/leader-def
    "b" 'spacemacs/compleseus-switch-to-buffer)
  ;; C-c bindings (mode-specific-map)
  ;; ("C-c h" 'consult-history) ; Conflict with meow C-h- prefix
  ;; ("C-c m" 'consult-mode-command) ; Conflicts with meow M- prefix
  ;; ("C-c k" 'consult-kmacro) ; Conflicts with meow SPC-k mapping
  ;; C-x bindings (ctl-x-map)
  ("C-x M-:" 'consult-complex-command) ;; orig. repeat-complex-command
  ("C-x C-b" nil)
  ("C-x C-b" 'consult-bookmark)
  ("C-x 4 b" 'consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
  ("C-x 5 b" 'consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame
  ("C-x m" 'consult-man)
  ;; Custom M-# bindings for fast register access
  ("M-#" 'consult-register-load)
  ("M-'" 'consult-register-store) ;; orig. abbrev-prefix-mark (unrelated)
  ("C-M-#" 'consult-register)
  ;; Other custom bindings
  ("M-y" 'consult-yank-pop)     ;; orig. yank-pop
  ("<help> a" 'consult-apropos) ;; orig. apropos-command
  ;; M-g bindings (goto-map)
  ("M-g e" 'consult-compile-error)
  ("M-g f" 'consult-flymake)     ;; Alternative: consult-flycheck
  ("M-g g" 'consult-goto-line)   ;; orig. goto-line
  ("M-g M-g" 'consult-goto-line) ;; orig. goto-line
  ("M-g o" 'consult-org-heading)
  ("M-g a" 'consult-org-agenda)
  ("M-g j" 'consult-mark)
  ("M-g k" 'consult-global-mark)
  ("M-g i" 'consult-imenu)
  ("M-g I" 'consult-imenu-multi)
  ;; M-s bindings (search-map)
  ("M-s d" 'consult-find)
  ("M-s D" 'consult-locate)
  ("M-s g" 'consult-grep)
  ("M-s G" 'consult-git-grep)
  ("M-s r" 'consult-ripgrep)
  ("M-s l" 'spacemacs/consult-line)
  ("M-s L" 'spacemacs/consult-line-multi)
  ("M-s m" 'consult-multi-occur)
  ("M-s k" 'consult-keep-lines)
  ("M-s u" 'consult-focus-lines)
  ;; Isearch integration
  ("M-s e" 'consult-isearch-history)
  (:keymaps 'isearch-mode-map
            "M-e" 'consult-isearch-history ;; orig. isearch-edit-string
            "M-s e" 'consult-isearch-history ;; orig. isearch-edit-string
            )
  ;; Minibuffer history
  (:keymaps 'minibuffer-local-map
            "M-s" 'consult-history ;; orig. next-matching-history-element
            "M-r" 'consult-history) ;; orig. previous-matching-history-element
  :init
  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-recent-file
   consult--source-project-recent-file consult-buffer
   :preview-key "M-.")

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "C-+")

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-function (lambda (_) (projectile-project-root))))
#+end_src
**** Consult extensions
#+begin_src emacs-lisp
(use-package consult-projectile
  :config
  (setq consult-projectile-sources
        '(consult-projectile--source-projectile-buffer
          consult-projectile--source-projectile-file
          consult-projectile--source-projectile-recentf
          consult-projectile--source-projectile-dir
          consult-projectile--source-projectile-project
          )))
#+end_src

#+begin_src emacs-lisp
(use-package consult-dir
  :bind (("C-x C-d" . consult-dir)
         :map minibuffer-local-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file))
  :config
  (setq consult-dir-project-list-function #'consult-dir-projectile-dirs))
#+end_src

#+begin_src emacs-lisp
(use-package wgrep)
#+end_src

#+begin_src emacs-lisp
(use-package consult-eglot)
#+end_src
*** Completion UI with vertico
[[https://github.com/minad/vertico][Vertical completion UI]]; [[https://github.com/minad/vertico/wiki][Wiki]]
#+begin_src emacs-lisp
(use-package vertico
  :hook
  (minibuffer-setup . vertico-repeat-save)
  :general
  (:prefix "C->"
           "C->" 'vertico-repeat
           "C-S-s" 'vertico-repeat-select)
  :init
  (vertico-mode)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t
        ;; Try to reduce the prompt jumping around by increasing the minimum width
        vertico-count-format '("%-12s " . "%s/%s"))

  (setq completion-in-region-function
        (lambda (&rest args)
          (apply (if vertico-mode
                     #'consult-completion-in-region
                   #'completion--in-region)
                 args)))

  ;; Show arrow before current candidate
  (advice-add #'vertico--format-candidate :around
              (lambda (orig cand prefix suffix index _start)
                (setq cand (funcall orig cand prefix suffix index _start))
                (concat
                 (if (= vertico--index index)
                     (propertize "» " 'face 'vertico-current)
                   "  ")
                 cand)))
  :general
  (:keymaps 'vertico-map
            "C-' '" 'vertico-quick-exit
            "C-' j" 'vertico-quick-jump
            "C-' i" 'vertico-quick-insert
            )
  )
#+end_src
**** Marginalia
Enable richer annotations using the [[https://github.com/minad/marginalia][Marginalia]] package
#+begin_src emacs-lisp
(use-package marginalia
  :general
  (:keymaps 'minibuffer-local-map
            "M-A" 'marginalia-cycle)
  :custom
  (marginalia-command-categories
   '((projectile-find-file . project-file)
     (projectile-find-dir . project-file)
     (projectile-switch-project . file)
     (calum/select-project-magit . file)
     (magit-branch-and-checkout . git-branch)
     (magit-branch-or-checkout . git-branch)
     (magit-branch-checkout . git-branch)
     ))
  ;; The :init configuration is always executed (Not lazy!)
  :init
  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode)
  :preface
  (defun calum/git-num-unmerged-to-upstream (branch)
    (length (magit-git-lines "log" "--oneline" branch "--not"
                             (magit-get-upstream-branch branch))))

  (defun calum/git-branch-annotator (cand)
    ""
    (marginalia--fields
     ;; ((magit-get-upstream-branch cand) :width -15 :truncate 0.2)
     ;; ((magit-get-push-branch cand) :width -15 :truncate 0.5)
     ((if (magit-branch-merged-p cand)
          ""
        (concat (number-to-string (calum/git-num-unmerged-to-upstream cand))
                " "))
      :width -7)
     ((magit-rev-format " %h %s" cand) :width -35 :truncate 0.8 :face 'magit-dimmed)
     )
    )

  :config
  ;; Hack to make projectile use marginalia after switch-project: https://github.com/bbatsov/projectile/issues/1664#issuecomment-934630504
  (add-to-list 'marginalia-prompt-categories '("Find file:" . project-file))
  (add-to-list 'marginalia-prompt-categories '("\\<branch\\>" . git-branch))
  ;; magit-get-upstream-branch
  ;; magit-get-push-branch
  ;; magit-insert-upstream-branch-header
  ;; magit-insert-push-branch-header
  ;; magit-insert-head-branch-header
  ;; magit-insert-branch-description
  ;; (propertize (magit-rev-format "%h" target) 'font-lock-face 'magit-hash)
  (add-to-list 'marginalia-annotator-registry
               '(git-branch calum/git-branch-annotator none))
  )
#+end_src
**** Embark
https://github.com/oantolin/embark
#+begin_src emacs-lisp
(use-package embark
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :general
  (:keymaps 'override "C-," 'embark-act-noquit)
  (:keymaps 'override "C-;" 'embark-dwim)
  ("C-h B" 'embark-bindings) ;; alternative for `describe-bindings'
  (:keymaps 'embark-general-map
            :prefix-command 'my-embark-actions-map
            :prefix "C-SPC"
            "c" '(calum/copy-embark-target-to-clipboard
                  :which-key "copy to clipboard"))

  :preface
  (defun calum/copy-embark-target-to-clipboard (target)
    "Copy the embark target to the system clipboard"
    (gui-set-selection 'CLIPBOARD target))
  (defun embark-act-noquit ()
    "Run action but don't quit the minibuffer afterwards."
    (interactive)
    (let ((embark-quit-after-action nil))
      (embark-act)))
  (defun embark-which-key-indicator ()
    "An embark indicator that displays keymaps using which-key.
The which-key help message will show the type and value of the
current target followed by an ellipsis if there are further
targets. https://github.com/oantolin/embark/wiki/Additional-Configuration#use-which-key-like-a-key-menu-prompt"
    (lambda (&optional keymap targets prefix)
      (if (null keymap)
          (which-key--hide-popup-ignore-command)
        (which-key--show-keymap
         (if (eq (plist-get (car targets) :type) 'embark-become)
             "Become"
           (format "Act on %s '%s'%s"
                   (plist-get (car targets) :type)
                   (embark--truncate-target (plist-get (car targets) :target))
                   (if (cdr targets) "…" "")))
         (if prefix
             (pcase (lookup-key keymap prefix 'accept-default)
               ((and (pred keymapp) km) km)
               (_ (key-binding prefix 'accept-default)))
           keymap)
         nil nil t (lambda (binding)
                     (not (string-suffix-p "-argument" (cdr binding))))))))

  (defun embark-hide-which-key-indicator (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))

  ;; Use a minimal indicator, and type C-h for help
  (setq embark-indicators
        '(embark-which-key-indicator
          embark-highlight-indicator
          embark-isearch-highlight-indicator))

  (advice-add #'embark-completing-read-prompter
              :around #'embark-hide-which-key-indicator)
  )

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
**** Vertico Posframe
[[https://github.com/tumashu/vertico-posframe]]

Disabled as it is too buggy unfortunately. When opening an org-noter
frame, the functionality that hides the minibuffer stops working, so
the minibuffer is shown at the bottom of the frame and in the
posframe. Also sometimes the posframe just doesn't show anything.

#+begin_src emacs-lisp
(use-package vertico-posframe
  :disabled t
  :after vertico
  :custom
  (vertico-posframe-parameters nil)
  (vertico-posframe-width nil)
  (vertico-posframe-min-width 150) ;; Reduce posframe resizing
  :config
  (setq vertico-multiform-commands
        '((consult-line
           posframe
           (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
           (vertico-posframe-border-width . 10)
           ;; NOTE: This is useful when emacs is used in both in X and
           ;; terminal, for posframe do not work well in terminal, so
           ;; vertico-buffer-mode will be used as fallback at the
           ;; moment.
           (vertico-posframe-fallback-mode . vertico-buffer-mode))
          (t posframe)))
  (vertico-multiform-mode 1))
#+end_src
*** Completion style
https://github.com/oantolin/orderless

Config based on:
https://github.com/minad/consult/wiki#minads-orderless-configuration

Use %pattern to try out variants of characters in pattern, for example
%2 to match 2 or unicode superscript 2 (and probably other things).
#+begin_src emacs-lisp
(use-package orderless
  :config
  (defvar +orderless-dispatch-alist
    '((?% . char-fold-to-regexp)
      (?! . orderless-without-literal)
      (?`. orderless-initialism)
      (?= . orderless-literal)
      (?~ . orderless-flex)))

  (defun +orderless--suffix-regexp ()
    (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
        (format "[%c-%c]*$"
                consult--tofu-char
                (+ consult--tofu-char consult--tofu-range -1))
      "$"))

  ;; Recognizes the following patterns:
  ;; * ~flex flex~
  ;; * =literal literal=
  ;; * %char-fold char-fold%
  ;; * `initialism initialism`
  ;; * !without-literal without-literal!
  ;; * .ext (file extension)
  ;; * regexp$ (regexp matching at end)
  (defun +orderless-dispatch (word _index _total)
    (cond
     ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
     ((string-suffix-p "$" word)
      `(orderless-regexp . ,(concat (substring word 0 -1) (+orderless--suffix-regexp))))
     ;; File extensions
     ((and (or minibuffer-completing-file-name
               (derived-mode-p 'eshell-mode))
           (string-match-p "\\`\\.." word))
      `(orderless-regexp . ,(concat "\\." (substring word 1) (+orderless--suffix-regexp))))
     ;; Ignore single !
     ((equal "!" word) `(orderless-literal . ""))
     ;; Prefix and suffix
     ((if-let (x (assq (aref word 0) +orderless-dispatch-alist))
          (cons (cdr x) (substring word 1))
        (when-let (x (assq (aref word (1- (length word))) +orderless-dispatch-alist))
          (cons (cdr x) (substring word 0 -1)))))))

  ;; Define orderless style with initialism by default
  (orderless-define-completion-style +calum/orderless-completion-style
    (orderless-matching-styles
     '(orderless-flex
       orderless-initialism
       orderless-prefixes
       orderless-literal
       orderless-regexp)))

  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides
        '((file (styles partial-completion)) ;; partial-completion is tried first
          (eglot (styles orderless))
          ;; (buffer (styles +calum/orderless-completion-style))
          ;; (command (styles +calum/orderless-completion-style))
          ;; (variable (styles +calum/orderless-completion-style))
          ;; (symbol (styles +calum/orderless-completion-style))
          )
        orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
        orderless-style-dispatchers '(+orderless-dispatch)
        ))
#+end_src
*** Corfu for autocompletion
https://github.com/minad/corfu
https://github.com/minad/corfu/wiki

#+begin_src emacs-lisp
(use-package corfu
  ;; Optional customizations
  :custom
  (corfu-cycle t) ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-quit-at-boundary nil) ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  (corfu-preselect-first nil) ;; Disable candidate preselection
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin
  (corfu-popupinfo-delay nil)

  :general
  ("C-n" (general-predicate-dispatch nil
           (bound-and-true-p vertico--input) 'vertico-next
           t 'completion-at-point))
  (:keymaps 'corfu-map
            "C-n" 'corfu-next
            "C-p" 'corfu-previous
            "M-m" 'corfu-move-to-minibuffer
            "C-'" nil
            "C-' '" 'corfu-quick-complete
            "C-' i" 'corfu-quick-insert
            "C-' j" 'corfu-quick-jump
            [remap move-beginning-of-line] 'corfu-beginning-of-prompt
            [remap move-end-of-line] 'corfu-end-of-prompt
            ;; For popupinfo:
            ;; M-d, M-l, M-t: docs, location, toggle
            ;; scroll-other-window(-down) (C-M-v, C-M-S-v)
            )

  :preface
  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active. https://github.com/minad/corfu#completing-in-the-minibuffer"
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input))
      (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                  corfu-popupinfo-delay nil)
      (corfu-mode 1)))

  (defun corfu-move-to-minibuffer ()
    "Function to transfer the current corfu completion list to the minibuffer. https://github.com/minad/corfu#transfer-completion-to-the-minibuffer"
    (interactive)
    (let ((completion-extra-properties corfu--extra)
          completion-cycle-threshold completion-cycling)
      (apply #'consult-completion-in-region completion-in-region--data)))

  (defun corfu-beginning-of-prompt ()
    "Move to beginning of completion input."
    (interactive)
    (corfu--goto -1)
    (goto-char (car completion-in-region--data)))

  (defun corfu-end-of-prompt ()
    "Move to end of completion input."
    (interactive)
    (corfu--goto -1)
    (goto-char (cadr completion-in-region--data)))
  :config
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

  (global-corfu-mode)
  (corfu-echo-mode)
  (corfu-history-mode)
  (corfu-popupinfo-mode)
  )
#+end_src

**** Cape for autocomplete extensions
#+begin_src emacs-lisp
(use-package cape
  :general
  (:prefix "C-S-n"
           :prefix-command 'completions-map
           "p" 'completion-at-point ;; capf
           "t" 'complete-tag        ;; etags
           "d" 'cape-dabbrev        ;; or dabbrev-completion
           "h" 'cape-history
           "f" 'cape-file
           "e" 'cape-emoji
           "k" 'cape-keyword
           "s" 'cape-elisp-symbol
           "a" 'cape-abbrev
           "i" 'cape-ispell
           "l" 'cape-line
           "w" 'cape-dict
           "n" 'tempel-complete
           "\\" 'cape-tex
           "_" 'cape-tex
           "^" 'cape-tex
           "&" 'cape-sgml
           "r" 'cape-rfc1345 ;; Complete unicode char using RFC 1345 mnemonics.
           )
  :config
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)

  ;; Sanitize the `pcomplete-completions-at-point' Capf. The Capf has
  ;; undesired side effects on Emacs 28 and earlier. From
  ;; https://github.com/minad/cape#other-capf-transformers
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))
#+end_src

**** Kind icons for autocomplete icons
#+begin_src emacs-lisp
(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
*** Project support
#+begin_src emacs-lisp
(use-package rg)
(use-package projectile
  :delight
  :init
  (projectile-mode +1)
  :preface
  (defun calum/select-project-magit ()
    (interactive)
    (setq current-prefix-arg '(4))
    (call-interactively 'projectile-vc))
  :general
  (calum/leader-def
    :keymaps 'projectile-mode-map
    "p" '(:keymap projectile-command-map :which-key "project")
    "p w" 'calum/select-project-magit)
  :config
  (add-to-list 'projectile-other-file-alist '("purs" "js"))
  (add-to-list 'projectile-other-file-alist '("js" "purs"))
  )
(use-package treemacs-projectile)
#+end_src
*** TODO File manager
Note: for all-the-icons, needed to run ~all-the-icons-install-fonts~.
#+begin_src emacs-lisp
(use-package dirvish
  :init
  ;; Let Dirvish take over Dired globally
  (dirvish-override-dired-mode)
  :custom
  (dirvish-attributes '(all-the-icons file-size collapse subtree-state vc-state))
  (dirvish-bookmark-entries
   '(("h" "~/"                          "Home")
     ("d" "~/Downloads/"                "Downloads")))
  (dirvish-reuse-session t)
  :config
  (dirvish-peek-mode)
  (setq dired-dwim-target t)
  :bind
  ;; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
  (:map dired-mode-map ; Dirvish respects all the keybindings in this map
   ("h" . dired-up-directory)
   ("j" . dired-next-line)
   ("k" . dired-previous-line)
   ("l" . dired-find-file)
   ("i" . wdired-change-to-wdired-mode)
   ("." . dired-omit-mode)
   ("b"   . dirvish-bookmark-jump)
   ("f"   . dirvish-file-info-menu)
   ("y"   . dirvish-yank-menu)
   ("N"   . dirvish-narrow)
   ("^"   . dirvish-history-last)
   ("s"   . dirvish-quicksort) ; remapped `dired-sort-toggle-or-edit'
   ("?"   . dirvish-dispatch)  ; remapped `dired-summary'
   ("TAB" . dirvish-subtree-toggle)
   ("SPC" . dirvish-history-jump)
   ("M-n" . dirvish-history-go-forward)
   ("M-p" . dirvish-history-go-backward)
   ("M-l" . dirvish-ls-switches-menu)
   ("M-m" . dirvish-mark-menu)
   ("M-f" . dirvish-toggle-fullscreen)
   ("M-s" . dirvish-setup-menu)
   ("M-e" . dirvish-emerge-menu)
   ("M-j" . dirvish-fd-jump)))
#+end_src

*** Icons
https://github.com/iyefrat/all-the-icons-completion/

#+begin_src emacs-lisp
(use-package all-the-icons
  :config
  (add-to-list 'all-the-icons-extension-icon-alist
               '("purs" all-the-icons-fileicon "purescript" :v-adjust 0.0 :height 1.0))
  )

(use-package all-the-icons-completion
  :after all-the-icons
  :config
  (all-the-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src
** Programming Languages/Tools
*** JavaScript+TypeScript
#+begin_src emacs-lisp
(use-package typescript-mode
  :mode (("\\.tsx?\\'" . typescriptreact-mode))
  :preface
  (define-derived-mode typescriptreact-mode typescript-mode
    "TypeScript TSX")
  :hook
  ((typescript-mode typescriptreact-mode) . eglot-ensure)
  :config
  )
#+end_src

*** Rust
#+begin_src emacs-lisp
(use-package rust-mode
  :hook
  (rust-mode . (lambda () (prettify-symbols-mode)))
  (rust-mode . eglot-ensure))
#+end_src

*** Lisp
Setup completion for elisp to include words from the buffer and file
paths, based on https://github.com/minad/corfu/wiki#using-cape-to-tweak-and-combine-capfs.
#+begin_src emacs-lisp
(use-package elisp-mode
  :straight (:type built-in)
  :preface
  (defun calum/format-top-level-sexp ()
    "Format the current top level sexp"
    (interactive)
    (let ((open-paren-in-column-0-is-defun-start t)
          (old-point (point)))
      (beginning-of-defun)
      (lispy-tab)
      (goto-char old-point)
      (recenter)))
  (defun calum/setup-elisp ()
    (setq-local completion-at-point-functions
                `(tempel-expand
                  ,(cape-capf-super
                    #'elisp-completion-at-point
                    #'cape-dabbrev)
                  cape-file)
                cape-dabbrev-min-length 4))
  :hook (emacs-lisp-mode . calum/setup-elisp)
  :general
  (calum/leader-def :keymaps 'emacs-lisp-mode-map
    "f" 'calum/format-top-level-sexp))
#+end_src

*** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode
  :hook (haskell-mode . (lambda ()
                          (when (not (eq ".golden" (file-name-extension (buffer-file-name)))))
                          (eglot-ensure)))
  :config
  ;; A hack to make evil indent with "o" and "O" a little nicer by
  ;; indenting to the previous non-blank line instead of using the
  ;; haskell indent function
  (add-to-list 'indent-line-ignored-functions 'haskell-indentation-indent-line)
  (add-hook 'haskell-mode-hook 'haskell-auto-insert-module-template)
  ;; Use C-M-a/e/h to move to previous/next function/select the
  ;; current function
  (add-hook 'haskell-mode-hook 'haskell-decl-scan-mode)
  (require 'speedbar)
  (speedbar-add-supported-extension ".hs")
  (require 'haskell-interactive-mode)
  (require 'haskell-process)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
  (add-hook 'haskell-mode-hook 'haskell-collapse-mode)
  (add-hook 'haskell-mode-hook #'(lambda ()
                                  (setq-local tab-width 2)))
  (setq haskell-process-use-presentation-mode t
        haskell-interactive-mode-eval-mode 'haskell-mode))
(use-package direnv
  :custom (direnv-always-show-summary nil)
  :config
  (add-to-list 'direnv-non-file-modes 'haskell-interactive-mode)
  (direnv-mode))
#+end_src
*** Purescript
#+begin_src emacs-lisp
(use-package purescript-mode
  :hook
  (purescript-mode . eglot-ensure)
  (purescript-mode . (lambda ()
                       (turn-on-purescript-indentation)
                       (purescript-decl-scan-mode t)
                       (setq-local tab-width 2)))
  )
#+end_src
*** Dhall
#+begin_src emacs-lisp
(use-package dhall-mode
  :mode "\\.dhall\\'")
#+end_src
*** Nix
#+begin_src emacs-lisp
(use-package nix-mode
  :hook
  (nix-mode . eglot-ensure))
#+end_src
*** YAML
#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src
*** Language Server Protocol (LSP) with eglot
Use ~eglot-upgrade-eglot~ to get newer eglot versions, see [[https://www.reddit.com/r/emacs/comments/139f8r9/comment/jj2nv6t/?utm_source=share&utm_medium=web2x&context=3][here]]

#+begin_src emacs-lisp
(use-package eglot
  :custom
  (eglot-autoshutdown t)
  (eglot-confirm-server-initiated-edits nil)
  (eglot-extend-to-xref nil) ;; Maybe enable to get LSP in dependency code
  (eglot-sync-connect nil) ;; Don't block to enable eglot
  :general
  (:keymaps 'eglot-mode-map
            "C-." 'eglot-code-actions)
  (calum/leader-def :keymaps 'eglot-mode-map
    "f" 'eglot-format
    )
  (calum/leader-def :keymaps 'eglot-mode-map
    :infix "i"
    :prefix-command 'eglot-actions-map
    "o" 'eglot-code-action-organize-imports
    "r" 'eglot-rename
    "f" 'eglot-format-buffer
    "q" 'eglot-code-action-quickfix
    "x" 'eglot-code-action-extract
    "n" 'eglot-code-action-inline
    "t" 'eglot-find-typeDefinition
    "w" 'eglot-code-action-rewrite
    "i" 'consult-imenu
    "z" '(nil :prefix-command lsp-server-actions)
    "z r" 'eglot-reconnect
    "z s" 'eglot-shutdown
    "z a" 'eglot-shutdown-all
    )
  :hook
  (eglot-managed-mode . tempel-setup-capf)
  (eglot-managed-mode . (lambda () (eglot-inlay-hints-mode -1)))
  ((js-mode python-mode c-ts-mode c++-ts-mode c-or-c++-ts-mode) . eglot-ensure)
  :config
  (setq-default eglot-workspace-configuration
                '(:purescript (
                               :formatter "purs-tidy"
                               :censorWarnings ["WildcardInferredType"])
                              :haskell (:plugin (:stan (:globalOn :json-false)))
                              ;; :rust-analyzer
                              ;; (
                              ;;  :server (:extraEnv (:RUSTUP_TOOLCHAIN "nightly")))
                              :ltex-ls (
                                        :language  "en-CA"
                                        :dictionary
                                        (
                                         :en-US [":~/scripts/ltex-ls-15.2.0/dictionary"]
                                         :en-CA [":~/scripts/ltex-ls-15.2.0/dictionary"])
                                        :disabledRules
                                        (
                                         :en-US [":~/scripts/ltex-ls-15.2.0/disabledRules"]
                                         :en-CA [":~/scripts/ltex-ls-15.2.0/disabledRules"])
                                        :enabledRules
                                        (
                                         :en-US [":~/scripts/ltex-ls-15.2.0/enabledRules"]
                                         :en-CA [":~/scripts/ltex-ls-15.2.0/enabledRules"])
                                        :hiddenFalsePositives
                                        (
                                         :en-US [":~/scripts/ltex-ls-15.2.0/hiddenFalsePositives"]
                                         :en-CA [":~/scripts/ltex-ls-15.2.0/hiddenFalsePositives"]))))
  (add-to-list 'eglot-server-programs
               '(graphql-mode . ("graphql-lsp" "server" "--method=stream")))
  (add-to-list 'eglot-server-programs
               '(haskell-mode . ("haskell-language-server-wrapper" "--lsp")))
  (add-to-list
   'eglot-server-programs
   '((js-mode js-ts-mode tsx-ts-mode typescript-ts-mode typescript-mode typescriptreact-mode)
     "typescript-language-server" "--stdio"
     :initializationOptions
     (:preferences
      (
       :includeInlayEnumMemberValueHints:disableSuggestions                                    :json-false ;; boolean
       :quotePreference                                       "double" ;; "auto" | "double" | "single"
       :includeCompletionsForModuleExports                    t ;; boolean
       :includeCompletionsForImportStatements                 t ;; boolean
       :includeCompletionsWithSnippetText                     t ;; boolean
       :includeCompletionsWithInsertText                      t ;; boolean
       :includeAutomaticOptionalChainCompletions              t ;; boolean
       :includeCompletionsWithClassMemberSnippets             t ;; boolean
       :includeCompletionsWithObjectLiteralMethodSnippets     t ;; boolean
       :useLabelDetailsInCompletionEntries                    t ;; boolean
       :allowIncompleteCompletions                            t ;; boolean
       :importModuleSpecifierPreference                       "shortest" ;; "shortest" | "project-relative" | "relative" | "non-relative"
       :importModuleSpecifierEnding                           "minimal" ;; "auto" | "minimal" | "index" | "js"
       :allowTextChangesInNewFiles                            t ;; boolean
       ;; :lazyConfiguredProjectsFromExternalProject                          ;; boolean
       :providePrefixAndSuffixTextForRename                   t ;; boolean
       :provideRefactorNotApplicableReason                    :json-false ;; boolean
       :allowRenameOfImportPath                               t ;; boolean
       ;; :includePackageJsonAutoImports                                      ;; "auto" | "on" | "off"
       :jsxAttributeCompletionStyle                           "auto" ;; "auto" | "braces" | "none"
       :displayPartsForJSDoc                                  t ;; boolean
       :generateReturnInDocTemplate                           t ;; boolean
       :includeInlayParameterNameHints                        "all" ;; "none" | "literals" | "all"
       :includeInlayParameterNameHintsWhenArgumentMatchesName t ;; boolean
       :includeInlayFunctionParameterTypeHints                t ;; boolean,
       :includeInlayVariableTypeHints                         t ;; boolean
       :includeInlayVariableTypeHintsWhenTypeMatchesName      t ;; boolean
       :includeInlayPropertyDeclarationTypeHints              t ;; boolean
       :includeInlayFunctionLikeReturnTypeHints               t ;; boolean
       :includeInlayEnumMemberValueHints                      t ;; boolean
       ;; :autoImportFileExcludePatterns                                      ;; string[]
       ;; :organizeImportsIgnoreCase                                          ;; "auto" | boolean
       ;; :organizeImportsCollation                                           ;; "ordinal" | "unicode"
       ;; :organizeImportsCollationLocale                                     ;; string
       ;; :organizeImportsNumericCollation                                    ;; boolean
       ;; :organizeImportsAccentCollation                                     ;; boolean
       ;; :organizeImportsCaseFirst                                           ;; "upper" | "lower" | false
       :disableLineTextInRe       :disableLineTextInReferences                           :json-false)))))
#+end_src
**** UI
https://github.com/casouri/eldoc-box
#+begin_src emacs-lisp
(use-package eldoc-box)
#+end_src
*** Natural language with ltex
- https://github.com/valentjn/ltex-ls
- https://github.com/emacs-languagetool/eglot-ltex

#+begin_src emacs-lisp
(use-package eglot-ltex
  :straight (eglot-ltex :type git :host github :repo "rynoV/eglot-ltex")
  :preface
  (defun calum/enable-ltex ()
    "Enable ltex for natural language checking"
    (interactive)
    (require 'eglot-ltex)
    (eglot-ensure))
  :init
  (setq eglot-languagetool-server-path "/home/calum/scripts/ltex-ls-15.2.0/"))
#+end_src

*** Flex & Bison
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.ll\\'" . c-mode))
(add-to-list 'auto-mode-alist '("\\.yy\\'" . c-mode))
#+end_src
*** Fish
#+begin_src emacs-lisp
(use-package fish-mode)
#+end_src
*** Docker
#+begin_src emacs-lisp
(use-package docker)
#+end_src
*** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :hook
  (markdown-mode . imenu-add-menubar-index)
  (markdown-mode . visual-line-mode)
  (markdown-mode . visual-fill-column-mode)
  :config
  (setq imenu-auto-rescan t))
#+end_src
*** GraphQL
#+begin_src emacs-lisp
(use-package graphql-mode
  :hook (graphql-mode . eglot-ensure))
(use-package request)
#+end_src
*** R
#+begin_src emacs-lisp
(use-package ess
  :hook (ess-r-mode . eglot-ensure))
#+end_src
*** Dart
#+begin_src emacs-lisp
(use-package dart-mode
  :hook
  (dart-mode . eglot-ensure)
  (dart-mode . (lambda ()
                 (setq-local tab-width 2)
                 (aggressive-indent-mode 0))))
#+end_src
*** JSON
#+begin_src emacs-lisp
(use-package json-mode :disabled t)
(use-package json-navigator :disabled t)
#+end_src
*** Just
#+begin_src emacs-lisp
(use-package just-mode)
#+end_src
** Miscellaneous

*** Adaptive wrap
#+begin_src emacs-lisp
(use-package adaptive-wrap
  :hook
  (text-mode . adaptive-wrap-prefix-mode))
#+end_src
*** Spacemacs

#+begin_src emacs-lisp
(defun spacemacs/mplist-get-values (plist prop)
  "Get the values associated to PROP in PLIST, a modified plist.

A modified plist is one where keys are keywords and values are
all non-keywords elements that follow it.

If there are multiple properties with the same keyword, only the first property
and its values is returned.

Currently this function infloops when the list is circular."
  (let ((tail plist)
        result)
    (while (and (consp tail) (not (eq prop (car tail))))
      (pop tail))
    ;; pop the found keyword
    (pop tail)
    (while (and (consp tail) (not (keywordp (car tail))))
      (push (pop tail) result))
    (nreverse result)))

(defmacro spacemacs||with-persp-buffer-list (&rest body)
  "This one is a brute force version of `with-persp-buffer-list'.
It maitains the order of the original `buffer-list'"
  `(cl-letf* ((org-buffer-list
               (symbol-function 'buffer-list))
              ((symbol-function 'buffer-list)
               #'(lambda (&optional frame)
                   (seq-filter
                    #'persp-contain-buffer-p
                    (funcall org-buffer-list frame)))))
     ,@body))

(defun spacemacs-layouts//advice-with-persp-buffer-list (orig-fun &rest args)
  "Advice to provide persp buffer list."
  (spacemacs||with-persp-buffer-list () (apply orig-fun args)))

(defmacro spacemacs||switch-layout (name &rest props)
  "Switch to the perspective called NAME.

Available PROPS:

`:init EXPRESSIONS'
    One or more forms, which will be evaluated after switching to perspective
    NAME if the perspective did not already exist."
  (declare (indent 1))
  (let ((init (spacemacs/mplist-get-values props :init)))
    `(let ((persp-reset-windows-on-nil-window-conf t)
           (persp-already-exists (persp-with-name-exists-p ,name)))
       (persp-switch ,name)
       (unless persp-already-exists
         ,@init))))

;; Note: shouldn't be necessary if using the projectile auto-perspective
(defun spacemacs/create-persp-with-current-project-buffers (name)
  "Create new perspective with project buffers.

If perspective NAME does not already exist, create it and add any
buffers that belong to the current buffer's project."
  (interactive (list (read-string "Perspective name: " (projectile-project-name))))
  (if (persp-with-name-exists-p name)
      (message "There is already a perspective named %s" name)
    (if-let ((project (projectile-project-p)))
        (spacemacs||switch-layout name
          :init
          (persp-add-buffer (projectile-project-buffers project)
                            (persp-get-by-name name) nil nil))
      (message "Current buffer does not belong to a project"))))

(defun spacemacs//create-persp-with-home-buffer (name)
  "Switch to perspective and display the Spacemacs home buffer.

If perspective NAME does not already exist, create it and display
the Spacemacs home buffer.  If the perspective already exists,
just switch to it."
  (spacemacs||switch-layout name :init (dashboard-open)))

(defun calum/switch-layout ()
  "Based on spacemacs/compleseus-spacemacs-layout-layouts, but filters the current workspace name."
  (interactive)
  (spacemacs//create-persp-with-home-buffer
   (completing-read
    "Layout: "
    (cl-remove-if
     (lambda (e) (string= (safe-persp-name (get-current-persp)) e))
     (persp-names)))))

(defvar consult--source-modified-buffers
  `(:name "Modified Buffers"
          :narrow   (?M . "Modified Buffers")
          :hidden   t
          :category buffer
          :face     consult-buffer
          :history  buffer-name-history
          :state    ,#'consult--buffer-state
          :items
          ,(lambda ()
             (consult--buffer-query ;; :sort 'visibility
              :predicate (lambda (buff)
                           (and (persp-contain-buffer-p buff)
                                (buffer-file-name buff)
                                (buffer-modified-p buff)))
              ;; :directory 'project
              :as #'buffer-name)))
  "Per perspective modified buffer source.")

(defvar consult--source-persp-buffers
  `(
    :name     "Buffer"
    :narrow   ?b
    :category buffer
    :face     consult-buffer
    :history  buffer-name-history
    :state    ,#'consult--buffer-state
    :default  t
    :items
    ,(lambda ()
       (consult--buffer-query
        :sort 'visibility
        :predicate #'persp-contain-buffer-p
        :as #'buffer-name)))
  "Per perspective buffer source.")

;; Change the default project recent file narrow key ("f") so it
;; doesn't conflict with regular file narrow key
(setq calum/consult--source-project-recent-file
      (plist-put consult--source-project-recent-file :narrow ?p))
;; Change the default project buffer narrow key ("b") so it
;; doesn't conflict with regular buffer narrow key
(setq calum/consult--source-project-buffer
      (plist-put consult--source-project-buffer :narrow ?v))

(defun spacemacs/compleseus-switch-to-buffer ()
  "`consult-buffer' with buffers provided by persp."
  (interactive)
  (consult-buffer
   '(consult--source-hidden-buffer
     consult--source-persp-buffers
     consult--source-modified-buffers
     consult--source-recent-file
     consult--source-bookmark
     calum/consult--source-project-buffer
     calum/consult--source-project-recent-file)))

(defun spacemacs/consult-line ()
  (interactive)
  (consult-line
   (if (region-active-p)
       (buffer-substring-no-properties
        (region-beginning) (region-end))
     nil)))

(defun spacemacs/consult-line-multi ()
  (interactive)
  (consult-line-multi
   nil
   (if (region-active-p)
       (buffer-substring-no-properties
        (region-beginning) (region-end))
     (thing-at-point 'symbol t))))
#+end_src

*** Workspaces (via persp-mode)
https://github.com/Bad-ptr/persp-mode.el

#+begin_src emacs-lisp
(use-package persp-mode
  :init
  (setq persp-keymap-prefix nil)
  :delight
  :custom
  (persp-add-buffer-on-after-change-major-mode 'free)
  (persp-set-last-persp-for-new-frames nil)
  (persp-kill-foreign-buffer-behaviour 'kill)
  ;; (persp-set-ido-hooks t)
  :general
  (calum/leader-def :infix "q" :prefix-command 'workspace-actions-map
    "l" '("next workspace" . persp-next)
    "h" '("previous workspace" . persp-prev)
    "q" '("switch workspace" . calum/switch-layout)
    "p" '("workspace with current project buffers" . spacemacs/create-persp-with-current-project-buffers)
    "r" '("rename workspace" . persp-rename)
    "c" '("copy workspace" . persp-copy)
    "C" '("kill workspace" . persp-kill)
    "a" '("add buffer to workspace" . persp-add-buffer)
    "t" '("switch to buffer without adding it" . persp-temporarily-display-buffer)
    "i" '("import buffers from other workspace" . persp-import-buffers)
    "I" '("import window config from other workspace" . persp-import-win-conf)
    "k" '("remove buffer from workspace" . persp-remove-buffer)
    "K" '("remove and kill buffer from workspace" . persp-kill-buffer)
    )
  :config
  (persp-mode t)
  )

(use-package persp-mode-projectile-bridge
  :config
  (add-hook 'persp-mode-projectile-bridge-mode-hook
            #'(lambda ()
                (if persp-mode-projectile-bridge-mode
                    (persp-mode-projectile-bridge-find-perspectives-for-all-buffers)
                  (persp-mode-projectile-bridge-kill-perspectives))))
  (persp-mode-projectile-bridge-mode 1)
  )
#+end_src

https://github.com/alphapapa/bufler.el
#+begin_src emacs-lisp
;; (use-package bufler
;;   :config
;;   (bufler-mode)
;;   (bufler-tabs-mode))
#+end_src

https://depp.brause.cc/eyebrowse/

#+begin_src emacs-lisp
;; (use-package eyebrowse
;;   :disabled
;;   :config
;;   (eyebrowse-mode t))
#+end_src

*** RSS feed
#+begin_src emacs-lisp
(use-package elfeed
  ;; HACK: without this "after" a warning will sometimes occur "Error
  ;; (use-package): elfeed/:catch: Wrong type argument: keymapp,
  ;; calum/paren-map", don't know what causes this
  :after smartparens
  :custom (elfeed-feeds '(;; "Calum Sieppert"
                          ("https://www.google.com/alerts/feeds/02264040871288465457/6509820831650285285"
                           me google-alert) ;; "sieppertcalum@gmail.com"
                          ("https://www.google.com/alerts/feeds/02264040871288465457/12490175482493423670"
                           me google-alert) ;; "Elections"
                          ("https://www.google.com/alerts/feeds/02264040871288465457/15491943474457505858"
                           gov google-alert) ;; "Crime calgary"
                          ("https://www.google.com/alerts/feeds/02264040871288465457/14297337391293499667"
                           crime google-alert) ;; "Citizen"
                          ("https://www.google.com/alerts/feeds/02264040871288465457/9134014823736871647"
                           gov google-alert) ;; "law change"
                          ("https://www.google.com/alerts/feeds/02264040871288465457/2619343814319869484"
                           gov google-alert) ;; "tax"
                          ("https://www.google.com/alerts/feeds/02264040871288465457/13264916688473436550"
                           gov google-alert) ;; "post secondary student"
                          ("https://www.google.com/alerts/feeds/02264040871288465457/911988414968213003"
                           gov google-alert) ;; "home owner"
                          ("https://www.google.com/alerts/feeds/02264040871288465457/3768905644902705351"
                           gov google-alert) ;; "metis/indigenous"
                          ("https://www.google.com/alerts/feeds/02264040871288465457/6890434555230114456"
                           gov google-alert))))
#+end_src

*** Ledger
https://github.com/ledger/ledger-mode
https://github.com/atheriel/evil-ledger
#+begin_src emacs-lisp
(use-package ledger-mode
  :mode ("\\.dat\\'"
         "\\.ledger\\'")
  :custom (ledger-clear-whole-transactions t)
  :preface
  ;; Clean up the ledger buffer before saving. `save-excursion' doesn't
  ;; work for some reason.
  (defun calum/ledger-before-save-hook ()
    (when (or (eq major-mode 'ledger-mode) (eq major-mode 'hledger-mode))
      (let ((temp-point (point)))
        (when (buffer-modified-p)
          (with-demoted-errors "Error: %S" (ledger-mode-clean-buffer)))
        (goto-char temp-point)
        (recenter))))
  :config
  (add-hook 'before-save-hook #'calum/ledger-before-save-hook)
  (add-hook 'ledger-mode-hook #'ledger-flymake-enable)
  ;; Added ledger-mode.info by downloading the texi file, using
  ;; texi2any --info, then install-info --info-dir=dir/my-docs
  ;; ledger-mode.info
  (add-to-list 'Info-directory-list (concat user-emacs-directory "my-docs")))
#+end_src

*** Hledger
#+begin_src emacs-lisp
(use-package hledger-mode
  :mode ("\\.hledger\\'"
         "\\.timedot\\'")
  :custom
  (hledger-jfile (expand-file-name "~/org/ledger/hledger/ledger.hledger"))
  (hledger-currency-string "$")
  (hledger-top-asset-account "Assets")
  (hledger-top-expense-account "Expenses")
  (hledger-top-income-account "Income")
  (hledger-year-of-birth 2001)
  (hledger-daily-report-accounts hledger-top-expense-account)
  (hledger-ratios-assets-accounts hledger-top-asset-account)
  (hledger-ratios-income-accounts hledger-top-income-account)
  (hledger-ratios-liquid-asset-accounts "Assets:Chequing Assets:Cash Assets:Paypal Assets:Wise Card")
  (hledger-ratios-essential-expense-accounts "Expenses:Home")
  (hledger-ratios-debt-accounts "Liabilities")
  :general
  (:keymaps 'hledger-mode-map
            ; Remove the default binding to the return key from
            ; hledger-mode that inserts a date
            "RET" nil)
  :preface
  (defun hledger-completion-accounts ()
    (when-let ((bounds (and (boundp 'hledger-accounts-cache)
                            (bounds-of-thing-at-point 'symbol))))
      (list (car bounds) (point) hledger-accounts-cache)))
  :hook (hledger-mode . (lambda ()
                          (add-hook 'completion-at-point-functions 'hledger-completion-accounts)))

  :config/el-patch
  ; Don't insert a date as part of indentation
  (defun hledger-indent-empty-line ()
    "Called when the line to be indented is empty."
    (cond
     ((hledger-prev-line-emptyp) (el-patch-swap (hledger-insert-date) nil))
     ((hledger-prev-has-datep) (if (= (current-indentation) tab-width)
                                   (hledger-insert-comment)
                                 (hledger-delete-cur-line)
                                 (indent-line-to tab-width)))
     ((hledger-prev-has-commentp) (hledger-insert-comment))
     ((hledger-prev-has-accp)
      (indent-line-to tab-width))))

  ; Allow inserting a date interactively
  (defun hledger-insert-date ()
    "Insert date at point."
    (el-patch-add (interactive))
    (insert (format-time-string "%Y-%m-%d ")))

  ; Don't add a space after the currency symbol
  (defun hledger-insert-rupee ()
    "Insert the amount for a transaction in hledger."
    (beginning-of-line)
    (re-search-forward hledger-whitespace-account-regex)
    (insert (concat "   " hledger-currency-string (el-patch-remove " "))))
  :config
  (require 'ob-hledger)
  )
#+end_src

#+begin_src emacs-lisp
(use-package flymake-hledger
  :custom
  (flymake-hledger-checks '("accounts" "commodities" "balanced" "ordereddates" "tags"))
  :hook
  (hledger-mode . flymake-hledger-enable)
  )
#+end_src
*** Folding
#+begin_src emacs-lisp
(use-package origami
  :general
  (calum/leader-def
    :infix "z"
    :prefix-command 'folding-map
    "z" 'origami-recursively-toggle-node
    "o" 'origami-open-all-nodes
    "c" 'origami-open-all-nodes
    "n" 'origami-forward-fold-same-level
    "p" 'origami-backward-fold-same-level
    "u" 'origami-previous-fold
    "d" 'origami-forward-fold
    "/" 'origami-undo
    "y" 'origami-redo
    "r" 'origami-reset)
  :config
  (global-origami-mode))
#+end_src

*** PDF Tools
#+begin_src emacs-lisp
(use-package pdf-tools
  :after image-roll
  :straight
  (pdf-tools
   :type git
   :host github
   :repo "vedang/pdf-tools"
   :fork
   (:host github
          :repo "dalanicolai/pdf-tools"
          :branch "pdf-roll"
          :files ("lisp/*.el"
                  "README"
                  ("build" "Makefile")
                  ("build" "server")
                  (:exclude "lisp/tablist.el" "lisp/tablist-filter.el"))
          )
   )
  :init (pdf-tools-install)
  :custom
  (pdf-view-continuous nil)
  :hook
  ;; The "cursor" wraps the whole document in pdf-view-mode, so blinking is distracting
  (pdf-view . (lambda () (blink-cursor-mode -1)))
  :config
  (add-to-list 'pdf-tools-enabled-modes 'pdf-view-themed-minor-mode)
  ;; Doesn't work with org-noter :(
  ;; (add-to-list 'pdf-tools-enabled-modes 'pdf-view-roll-minor-mode)
  )
#+end_src

**** PDF Continuous Scrolling
#+begin_src emacs-lisp
(use-package image-roll
  :straight
  (image-roll
   :type git
   :host github
   :repo "dalanicolai/image-roll.el"))
#+end_src

*** Change highlighting with goggles
Briefly highlight undo, delete, etc: https://github.com/minad/goggles

#+begin_src emacs-lisp
(use-package goggles
  :delight
  :hook ((prog-mode text-mode) . goggles-mode)
  :config
  (setq-default goggles-pulse t))
#+end_src

*** Chezmoi
#+begin_src emacs-lisp
(use-package chezmoi
  :general
  (calum/leader-def
    :infix "d"
    :prefix-command 'chezmoi-actions-map
    "f" 'chezmoi-find
    "g" 'chezmoi-magit-status
    "s" 'chezmoi-write
    "d" 'chezmoi-diff
    "e" 'chezmoi-ediff
    "o" 'chezmoi-open-other
    "t" 'chezmoi-template-buffer-display
    ;; Always enable the mode, I rarely want to disable it
    "c" #'(lambda () (interactive) (chezmoi-mode 1))
    "m" 'chezmoi-mode)
  :config
  ;; Turn off ligatures because they show up poorly.
  (add-hook 'chezmoi-mode-hook #'(lambda () (when (require 'ligature)
                                              (ligature-mode (if chezmoi-mode 0 1)))))

  (setq-default chezmoi-template-display-p t) ;; Display template values in all source buffers.
  )
#+end_src

*** Undoing

[[https://www.emacswiki.org/emacs/UndoTree][Undo Tree]] package for visualizing undo/redo chain and to allow evil to use ~C-r~.
#+begin_src emacs-lisp
(use-package undo-tree
  :delight undo-tree-mode
  :config
  (setq undo-tree-history-directory-alist '(("." . "~/.config/emacs/undotree")))
  (global-undo-tree-mode))
#+end_src

*** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :delight which-key-mode
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC

*** Restart Emacs
[[https://github.com/iqbalansari/restart-emacs][Package]] that allows for restarting Emacs by running ~restart-emacs~.
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  ;; Restart with ctrl-super-r
  :general
  ("C-M-r" 'restart-emacs))
#+END_SRC

*** MRU Buffer Switching
[[https://www.emacswiki.org/emacs/iflipb][Package]] for flipping through buffers in most recently used order.
#+begin_src emacs-lisp
(use-package iflipb
  :config
  (setq iflipb-ignore-buffers (lambda (buffer-name)
                                (and (and
                                      (not (string-match-p "\*Org Agenda\*" buffer-name))
                                      (not (string-match-p "\*info\*" buffer-name))
                                      (not (string-match-p "\*Code Review\*" buffer-name))
                                      (not (string-match-p "\*Org Src" buffer-name))
                                      (not (string-match-p "\*dashboard\*" buffer-name))
                                      (not (string-match-p "\*elfeed*\*" buffer-name))
                                      (not (string-match-p "\*Ledger Report\*" buffer-name))
                                      )
                                     (or
                                      (string-match-p "^[*]" buffer-name)
                                      (string-match-p "marginalia\.org" buffer-name)))))
  (advice-add 'iflipb-next-buffer :around 'spacemacs-layouts//advice-with-persp-buffer-list)
  (advice-add 'iflipb-previous-buffer :around 'spacemacs-layouts//advice-with-persp-buffer-list)
  ;; This should work everywhere, including magit buffers for example
  (general-def
    :keymaps 'override
    "C-<tab>" 'iflipb-next-buffer
    (if (featurep 'xemacs) (kbd "<C-iso-left-tab>") (kbd "<C-S-iso-lefttab>")) 'iflipb-previous-buffer))
#+end_src

*** Hydras
#+begin_src emacs-lisp
(use-package hydra
  :custom
  (lv-use-separator t)
  (hydra-look-for-remap t)
  :general
  ("<f2>" 'hydra-zoom/body)
  ("<f6>" 'hydra-multiple-cursors/body)
  ("<f8>" 'hydra-window/body)
  ("C-x SPC" 'hydra-rectangle/body)
  :preface
  (defun hydra-ex-point-mark ()
    "Exchange point and mark."
    (interactive)
    (if rectangle-mark-mode
        (rectangle-exchange-point-and-mark)
      (let ((mk (mark)))
        (rectangle-mark-mode 1)
        (goto-char mk))))

  (defun hydra-move-splitter-left (arg)
    "Move window splitter left."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
      (enlarge-window-horizontally arg)))

  (defun hydra-move-splitter-right (arg)
    "Move window splitter right."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
      (shrink-window-horizontally arg)))

  (defun hydra-move-splitter-up (arg)
    "Move window splitter up."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (enlarge-window arg)
      (shrink-window arg)))

  (defun hydra-move-splitter-down (arg)
    "Move window splitter down."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (shrink-window arg)
      (enlarge-window arg)))
  :config
  (defhydra hydra-zoom ()
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out"))
  ;; Note: use "r" to start selection
  (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                        :color pink
                                        :post (deactivate-mark))
    "
  ^_k_^     _d_elete    _s_tring
_h_   _l_   _o_k        _y_ank
  ^_j_^     _n_ew-copy  _r_eset
^^^^        _e_xchange  _u_ndo
^^^^        ^ ^         _x_kill
"
    ("h" rectangle-backward-char nil)
    ("l" rectangle-forward-char nil)
    ("k" rectangle-previous-line nil)
    ("j" rectangle-next-line nil)
    ("e" hydra-ex-point-mark nil)
    ("n" copy-rectangle-as-kill nil)
    ("d" delete-rectangle nil)
    ("r" (if (region-active-p)
             (deactivate-mark)
           (rectangle-mark-mode 1)) nil)
    ("y" yank-rectangle nil)
    ("u" undo nil)
    ("s" string-rectangle nil)
    ("x" kill-rectangle nil)
    ("o" nil nil))
  ;; https://github.com/abo-abo/hydra/wiki/Window-Management#deluxe-window-moving
  (defhydra hydra-window ()
    "
Movement^^        ^Split^         ^Switch^		^Resize^
----------------------------------------------------------------
_h_ ←           _v_ertical      _b_uffer		_q_ X←
_j_ ↓           _x_ horizontal	_f_ind files	_w_ X↓
_k_ ↑           _z_ undo        _a_ce 1		_e_ X↑
_l_ →           _Z_ reset       _s_wap		_r_ X→
_F_ollow		_D_lt Other     _S_ave
_SPC_ cancel	_o_nly this     _d_elete
"
    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)
    ("q" hydra-move-splitter-left)
    ("w" hydra-move-splitter-down)
    ("e" hydra-move-splitter-up)
    ("r" hydra-move-splitter-right)
    ("b" consult-buffer)
    ("f" consult-file)
    ("F" follow-mode)
    ("a" (lambda ()
           (interactive)
           (ace-window 1)
           (add-hook 'ace-window-end-once-hook
                     'hydra-window/body)))
    ("v" (lambda ()
           (interactive)
           (split-window-right)
           (windmove-right)))
    ("x" (lambda ()
           (interactive)
           (split-window-below)
           (windmove-down)))
    ("s" (lambda ()
           (interactive)
           (ace-window 4)
           (add-hook 'ace-window-end-once-hook
                     'hydra-window/body)))
    ("S" save-buffer)
    ("d" delete-window)
    ("D" (lambda ()
           (interactive)
           (ace-window 16)
           (add-hook 'ace-window-end-once-hook
                     'hydra-window/body)))
    ("o" delete-other-windows)
    ("z" (progn
           (winner-undo)
           (setq this-command 'winner-undo)))
    ("Z" winner-redo)
    ("SPC" nil))
  ;; https://github.com/abo-abo/hydra/wiki/multiple-cursors
  (defhydra hydra-multiple-cursors (:hint nil)
    "
 Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
------------------------------------------------------------------
 [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers   [_C-n_] Cycle forward
 [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters   [_C-p_] Cycle backward
 [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search      [_q_] Quit
 [_|_] Align with input CHAR       [Click] Cursor at point"
    ("C-n" mc/cycle-forward)
    ("C-p" mc/cycle-backward)
    ("l" mc/edit-lines :exit t)
    ("a" mc/mark-all-like-this :exit t)
    ("n" mc/mark-next-like-this)
    ("N" mc/skip-to-next-like-this)
    ("M-n" mc/unmark-next-like-this)
    ("p" mc/mark-previous-like-this)
    ("P" mc/skip-to-previous-like-this)
    ("M-p" mc/unmark-previous-like-this)
    ("|" mc/vertical-align)
    ("s" mc/mark-all-in-region-regexp :exit t)
    ("0" mc/insert-numbers :exit t)
    ("A" mc/insert-letters :exit t)
    ("<mouse-1>" mc/add-cursor-on-click)
    ;; Help with click recognition in this hydra
    ("<down-mouse-1>" ignore)
    ("<drag-mouse-1>" ignore)
    ("q" nil)))
#+end_src

*** Jumping with avy

#+begin_src emacs-lisp
(use-package avy
  :init
  (define-prefix-command 'calum/avy-map)
  :defines (calum/avy-map)
  :general
  (:keymaps 'calum/avy-map
            "C" 'avy-goto-char
            "c" 'avy-goto-char-timer
            "l" 'avy-goto-line
            "L" 'avy-goto-end-of-line
            "j" 'avy-goto-line-below
            "k" 'avy-goto-line-above
            "e" 'avy-goto-whitespace-end
            "[" 'avy-pop-mark
            "r" 'avy-resume
            "n" 'avy-next
            "p" 'avy-prev
            "f" 'calum/avy-goto-char-in-line
            "t" 'centaur-tabs-ace-jump)
  (:keymaps 'calum/avy-map
            :prefix "o"
            :prefix-command 'avy-org-command-map
            "h" 'avy-org-goto-heading-timer
            "r" 'avy-org-refile-as-child)
  (:keymaps 'calum/avy-map
            :prefix "y"
            :prefix-command 'avy-copy-command-map
            "l" 'avy-copy-line
            "r" 'avy-copy-region)
  (:keymaps 'calum/avy-map
            :prefix "<backspace>"
            :prefix-command 'avy-kill-command-map
            "r" 'avy-kill-region
            "l" 'avy-kill-whole-line)
  (:keymaps 'calum/avy-map
            :prefix "s"
            :prefix-command 'avy-save-command-map
            "r" 'avy-kill-ring-save-region
            "l" 'avy-kill-ring-save-whole-line)
  (:keymaps 'calum/avy-map
            :prefix "m"
            :prefix-command 'avy-move-command-map
            "r" 'avy-move-region
            "l" 'avy-move-line
            "t" 'avy-transpose-lines-in-region)
  :preface

  (defun calum/avy-goto-char-in-line (char)
    "Like the existing function, but fixes this issue: https://github.com/abo-abo/avy/issues/340"
    (interactive (list (read-char "char: " t)))
    (avy-with calum/avy-goto-char-in-line
      (avy-jump
       (regexp-quote (string char))
       :beg (line-beginning-position)
       :end (line-end-position))))

  :custom
  (avy-all-windows nil)
  (avy-style 'words)
  (avy-styles-alist '((calum/avy-goto-char-in-line . at)))
  (avy-indent-line-overlay t))
#+end_src

*** Writeroom Mode

#+begin_src emacs-lisp
(use-package writeroom-mode
  :custom
  (writeroom-width visual-fill-column-width)
  :config
  ;; Note: doesn't work to set this in ':custom'
  (setq writeroom-global-effects
        (remove 'writeroom-set-fullscreen
           (remove 'writeroom-set-alpha writeroom-global-effects))))
#+end_src


#  LocalWords:  tpope's Ido ido flx MRU LocalWords el

*** Ligatures
[[https://github.com/mickeynp/ligature.el]]
#+begin_src emacs-lisp
(use-package ligature
  :straight nil
  :load-path "/home/calum/.config/emacs/manual-plugins/ligature.el"
  :config
  ;; Enable all JetBrains Mono ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->" "///" "/=" "/=="
                                      "/>" "//" "/*" "*>" "***" "*/" "<-" "<<-" "<=>" "<=" "<|" "<||"
                                      "<|||" "<|>" "<:" "<>" "<-<" "<<<" "<==" "<<=" "<=<" "<==>" "<-|"
                                      "<<" "<~>" "<=|" "<~~" "<~" "<$>" "<$" "<+>" "<+" "</>" "</" "<*"
                                      "<*>" "<->" "<!--" ":>" ":<" ":::" "::" ":?" ":?>" ":=" "::=" "=>>"
                                      "==>" "=/=" "=!=" "=>" "===" "=:=" "==" "!==" "!!" "!=" ">]" ">:"
                                      ">>-" ">>=" "=<<" ">=>" ">>>" ">-" ">=" "&&&" "&&" "|||>" "||>" "|>" "|]"
                                      "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||" ".." ".?" ".=" ".-" "..<"
                                      "..." "+++" "+>" "++" "[||]" "[<" "[|" "{|" "??" "?." "?=" "?:" "##"
                                      "###" "####" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" ";;" "_|_"
                                      "__" "~~" "~~>" "~>" "~-" "~@" "$>" "^=" "]#"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))
#+end_src

*** Sudo edit
#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src

*** Minimap
#+begin_src emacs-lisp
(use-package minimap
  :custom (minimap-window-location 'right
           minimap-hide-cursor t))
#+end_src

*** Slack
See [[https://github.com/yuya373/emacs-slack#how-to-get-token-and-cookie][here]] for instructions on getting the slack token and cookie.
#+begin_src emacs-lisp
(use-package slack
  :disabled t
  :commands (slack-start)
  :init
  (setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
  (setq slack-prefer-current-team t)
  :config
  (slack-register-team
   :name "mlabs-corp"
   :default t
   :token "xoxc-1974274253845-3554162517520-3557821842192-0105cdaec51cf0d48965904df6424bb1acae5d90f10d2f3d71d20008dafd1215"
   :cookie "xoxd-i0LaH9nsgPgXYDRi8Iz2%2BA7Xe2jNmLIAD0Ar5BjjOGgyYbvcYVsAdFFuEm0wQSU%2BDsbV24bbtmiF3zCY%2FucHc%2BOEly0d%2FlE6czE7Re%2BvPv4n%2FUJh8%2FK4OEg%2BIQR2Ibus2o0Ol8XII9ST%2BVPfuOsXvXnF0eTH1q%2F4gBVwQ1VCyIi5GktiX2jh8EZUSw%3D%3D"
   :subscribed-channels '(iohk)
   :full-and-display-names t)
)

(use-package alert
  :commands (alert)
  :init
  (setq alert-default-style 'notifier))
#+end_src

*** Open GitHub
#+begin_src emacs-lisp
(use-package git-link
  :preface
  (defun calum/git-link ()
    (interactive)
    (call-interactively 'git-link)
    (calum/copy-current-kill-to-clipboard))
  (defun calum/git-permalink ()
    (interactive)
    (let ((git-link-use-commit t))
      (calum/git-link))))
#+end_src

*** IMenu
https://github.com/bmag/imenu-list, show imenu in a sidebar
#+begin_src emacs-lisp
(use-package imenu-list
  :bind (("C-\"" . imenu-list-smart-toggle))
  :config
  (setq imenu-list-focus-after-activation t
        imenu-list-auto-resize nil))
#+end_src

*** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :custom
  (dashboard-projects-backend 'projectile)
  (dashboard-center-content t)
  (dashboard-items '((recents . 5)
                     (bookmarks . 5)
                     (projects . 5)
                     (agenda . 5)))
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-set-navigator t)
  (dashboard-set-init-info t)
  (dashboard-week-agenda t)
  (dashboard-agenda-sort-strategy '(time-up))
  (dashboard-banner-logo-title nil)
  (dashboard-startup-banner 'logo)
  :config
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice (lambda ()
                                (get-buffer-create "*dashboard*")
                                (dashboard-refresh-buffer))))
#+end_src

*** Hungry delete
http://endlessparentheses.com/hungry-delete-mode.html
#+begin_src emacs-lisp
(use-package hungry-delete
  :delight
  :general
  ("M-<backspace>" 'hungry-delete-backward)
  ("M-DEL" 'hungry-delete-forward))
#+end_src

*** Mosey
https://github.com/alphapapa/mosey.el
#+begin_src emacs-lisp
(use-package mosey
  :general
  ("C-a" 'mosey-backward-bounce)
  ("C-e" 'mosey-forward-bounce))
#+end_src

*** Aggresive indent
https://github.com/Malabarba/aggressive-indent-mode
#+begin_src emacs-lisp
(use-package aggressive-indent
  :config
  (global-aggressive-indent-mode)
  (add-to-list 'aggressive-indent-excluded-modes 'hledger-mode))
#+end_src

*** Scroll on jump
Disabled as it was laggy
#+begin_src emacs-lisp
(use-package scroll-on-jump
  :disabled t
  :custom
  (scroll-on-jump-duration 0.4)
  (scroll-on-jump-smooth t)
  (scroll-on-jump-curve 'linear)
  :config
  (scroll-on-jump-advice-add meow-undo)
  (scroll-on-jump-advice-add undo-tree-redo)
  (scroll-on-jump-advice-add calum/meow-pop-to-mark)
  (scroll-on-jump-advice-add meow-beginning-of-thing)
  (scroll-on-jump-advice-add meow-end-of-thing)
  (scroll-on-jump-advice-add meow-cancel-selection)
  (scroll-on-jump-advice-add meow-search)
  (scroll-on-jump-advice-add meow-block)
  (scroll-on-jump-advice-add meow-to-block)
  (scroll-on-jump-advice-add meow-pop-selection)
  (scroll-on-jump-advice-add meow-find-ref)
  (scroll-on-jump-advice-add meow-pop-marker)
  (scroll-on-jump-with-scroll-advice-add scroll-down-command)
  (scroll-on-jump-with-scroll-advice-add scroll-up-command)
  (scroll-on-jump-with-scroll-advice-add recenter-top-bottom)
  )
#+end_src

*** Topsy
#+begin_src emacs-lisp
(use-package topsy
  :straight (topsy :type git :host github :repo "alphapapa/topsy.el")
  :hook (prog-mode . topsy-mode))
#+end_src

*** Expand region
https://github.com/magnars/expand-region.el
#+begin_src emacs-lisp
(use-package expand-region
  :general
  ("C-=" 'er/expand-region))
#+end_src

* Keybinds
- https://github.com/noctuid/general.el
- https://www.masteringemacs.org/article/mastering-key-bindings-emacs


- After the "/" is shifted version, e.g. for "backspace", "bksp-func/bksp-func-shifted"
- "fb" is "fallback", for meow fallback when there is no selection
- I reserve ctl+shift+alt for the OS level
- I need to add a way to type ctrl+escape to my keyboard


|            | normal                                    | Control                                | Alt                                         | Control+Alt                         | C-c/SPC                  | C-x             | Nav mode    |
|------------+-------------------------------------------+----------------------------------------+---------------------------------------------+-------------------------------------+--------------------------+-----------------+-------------|
|            | <6>                                       | <7>                                    | <3>                                         | <11>                                | <7>                      | <3>             | <8>         |
| q/Q        | meow-quit/meow-goto-line                  | emacs-surround/nil                     | fill-paragraph/nil                          | nil                                 |                          |                 | nil/-       |
| w/W        | meow-mark-word/meow-mark-symbol           | kill-region/nil                        | kill-ring-save/nil                          | append-next-kill                    | [[file:~/.local/share/chezmoi/private_dot_config/emacs/config.org::*Keybindings][windows-map]]              |                 | -/-         |
| e/E        | meow-next-word/meow-next-symbol           | move-end-of-line/nil                   | forward-sentence/nil                        | end-of-defun                        |                          |                 | -/-         |
| r/R        | meow-replace/meow-swap-grab               | isearch-backward/nil                   | move-to-window-line-top-bottom/nil          | restart-emacs                       |                          |                 | nil/nil     |
| t/T        | meow-till-expand/nil                      | transpose-chars/nil                    | transpose-words/nil                         | transpose-sexps                     | open-terminal            |                 | -/nil       |
| y/Y        | meow-save/meow-sync-grab                  | yank/nil                               | consult-yank-pop/nil                        | nil                                 |                          |                 | -/nil       |
| u/U        | meow-undo/undo-tree-redo                  | universal-argument/nil                 | upcase-word/nil                             | backward-up-list                    |                          |                 | nil/nil     |
| i/I        | meow-insert/meow-open-above               | TAB: indent-for-tab-command/nil        | tab-to-tab-stop/nil                         | complete-symbol                     | [[file:~/.local/share/chezmoi/private_dot_config/emacs/config.org::*Language Server Protocol (LSP)][lsp funcs]]                |                 | nil/nil     |
| o/O        | meow-block/meow-to-block                  | open-line/nil                          | nil/nil                                     | split-line                          | [[file:~/.local/share/chezmoi/private_dot_config/emacs/config.org::*Keybinds][org-actions-map]]          |                 | -/-         |
| p/P        | meow-yank/meow-paren-mode                 | previous-line/execute-extended-command | nil/nil                                     | previous-line                       | project funcs            |                 | nil/nil     |
| a/A        | meow-append/meow-open-below               | move-beginning-of-line/nil             | backward-sentence/nil                       | beginning-of-defun                  |                          |                 | nil/nil     |
| s/S        | meow-kill/nil                             | save-buffer/nil                        | consult searching/nil                       | isearch-forward-regexp              | [[file:~/.local/share/chezmoi/private_dot_config/emacs/config.org::*Spell Check][spell-check-map]]          |                 | -/nil       |
| d/D        | meow-delete/meow-kill-whole-line          | delete-char/nil                        | delete-word/nil                             | down-list                           | [[file:~/.local/share/chezmoi/private_dot_config/emacs/config.org::*Chezmoi][chezmoi funcs]]            |                 | nil/-       |
| f/F        | meow-find-expand/display-local-help       | forward-char/nil                       | forward-word/nil                            | forward-sexp                        | format buffer            |                 | -/nil       |
| g/G        | meow-cancel-selection/meow-grab           | keyboard-quit/nil                      | consult goto/nil                            | nil                                 | <meow C-M- prefix>       |                 | -/-         |
| h/H        | meow-left/meow-left-expand                | help-map/nil                           | mark-paragraph/nil                          | mark-defun                          | consult-history          |                 | -/-         |
| j/J        | meow-next/meow-next-expand                | electric-newline-and-maybe-indent/nil  | default-indent-new-line/nil                 | default-indent-new-line             |                          |                 | -/-         |
| k/K        | meow-prev/meow-prev-expand                | kill-line/nil                          | kill-sentence/nil                           | kill-sexp                           | consult-kmacro           |                 | -/-         |
| l/L        | meow-right/meow-right-expand              | recenter-top-bottom/nil                | downcase-word/nil                           | reposition-window                   |                          |                 | -/-         |
| z/Z        | calum/paren-map/meow-pop-selection        | suspend-frame/nil                      | zap-to-char/nil                             | nil                                 | folding actions          |                 | -/nil       |
| x/X        | meow-line/join-line                       | ctl-x-map/nil                          | execute-extended-command/-for-buffer        | nil                                 |                          |                 | -/nil       |
| c/C        | meow-change/comment-line                  | ctl-c-map/nil                          | capitalize-word/nil                         | meow-comment                        | [[file:~/.local/share/chezmoi/private_dot_config/emacs/config.org::*Cape for autocomplete extensions][completion funcs]]         |                 | nil/nil     |
| v/V        | meow-find-ref/meow-pop-marker             | scroll-up-command/nil                  | scroll-down-command/nil                     | scroll-other-window                 | calc-dispatch            |                 | -/-         |
| b/B        | meow-back-word/meow-back-symbol           | backward-char/nil                      | backward-word/nil                           | backward-sexp                       | consult-buffer           |                 | -/-         |
| n/N        | meow-search/meow-nav-mode                 | completion-at-point/completions-map    | nil/nil                                     | next-line                           |                          |                 | -/nil       |
| m/M        | meow-join/nil                             | RET: newline/nil                       | back-to-indentation/nil                     | nil                                 | meow meta key/misc funcs |                 | nil/nil     |
| tab        | indent-for-tab-command                    | iflipb-next/previous-buffer            | OS level                                    | nil                                 |                          |                 | nil         |
| space      | meow-keypad                               | set-mark-command/nil                   | just-one-space                              | mark-sexp                           |                          | rectangle hydra | -           |
| escape     | calum/meow-escape                         | nil/nil                                | prefix/nil                                  | nil                                 |                          |                 | normal-mode |
| return     |                                           | nil/nil                                | nil/nil                                     | nil                                 |                          |                 | nil         |
| backspace  |                                           | backward-delete-word/kill-whole-line   | nil/nil                                     | nil                                 |                          |                 | nil         |
| delete     |                                           | kill-word/nil                          | nil/nil                                     | nil                                 |                          |                 | nil         |
| ,/<        | meow-inner-of-thing/meow-pop-to-mark      | embark-act-noquit/nil                  | xref-pop-marker-stack/beginning-of-buffer   | nil/nil                             |                          |                 | -/-         |
| ./>        | meow-bounds-of-thing/repeat               | nil/"repeater" bindings                | xref-find-definitions/end-of-buffer         | xref-find-apropos/nil               |                          |                 | -/-         |
| //?        | meow-visit/nil                            | undo-tree-undo/undo-tree-redo          | dabbrev-expand/xref-find-references         | dabbrev-completion/nil              |                          |                 | -/nil       |
| ;/:        | meow-reverse/nil                          | embark-dwim/nil                        | comment-dwim/eval-expression                | iedit-execute-last-modification/nil |                          |                 | -/nil       |
| '/"        | avy-map/multiple-cursor-map               | nil/imenu-list-smart-toggle            | consult-register-store/nil                  | nil/nil                             |                          |                 | -/nil       |
| left/right |                                           | left/right-word/nil                    | nil/nil/nil/nil                             | forward-sexp/backward-sexp          |                          |                 | nil/nil     |
| up/down    |                                           | forward/backward-paragraph/nil         | nil/nil/nil/nil                             | backward-up-list/down-list          |                          |                 | nil/nil     |
| !/1        | nil/meow-expand-1                         | nil/digit-argument                     | shell-command/digit-argument                | nil/digit-argument                  | /meow-digit-argument     |                 | nil/-       |
| @/2        | nil/meow-expand-2                         | set-mark-command/digit-argument        | mark-word/digit-argument                    | mark-sexp/digit-argument            | /meow-digit-argument     |                 | nil/-       |
| #/3        | nil/meow-expand-3                         | nil/digit-argument                     | consult-register-load/digit-argument        | consult-register/digit-argument     | /meow-digit-argument     |                 | nil/-       |
| $/4        | query-replace-map/meow-expand-4           | nil/digit-argument                     | ispell-word/digit-argument                  | nil/digit-argument                  | /meow-digit-argument     |                 | nil/-       |
| %/5        | nil/meow-expand-5                         | nil/digit-argument                     | query-replace/digit-argument                | query-replace-regexp/digit-argument | /meow-digit-argument     |                 | nil/-       |
| ^/6        | nil/meow-expand-6                         | nil/digit-argument                     | delete-indentation/digit-argument           | nil/digit-argument                  | /meow-digit-argument     |                 | nil/-       |
| &/7        | nil/meow-expand-7                         | nil/digit-argument                     | async-shell-command/digit-argument          | nil/digit-argument                  | /meow-digit-argument     |                 | nil/-       |
| */8        | nil/meow-expand-8                         | nil/digit-argument                     | nil/digit-argument                          | nil/digit-argument                  | /meow-digit-argument     |                 | nil/-       |
| (/9        | nil/meow-expand-9                         | nil/digit-argument                     | insert-parentheses/digit-argument           | nil/digit-argument                  | /meow-digit-argument     |                 | nil/-       |
| )/0        | nil/meow-expand-0                         | nil/digit-argument                     | move-past-close-and-reindent/digit-argument | nil/digit-argument                  | /meow-digit-argument     |                 | nil/-       |
| \[/\]      | meow-beginning-of-thing/meow-end-of-thing | ESC/abort-recursive-edit               | nil/nil                                     | M-ESC/nil                           |                          |                 | -/-         |
| {/}        | nil/nil                                   | nil/nil                                | backward-/forward-paragraph                 | nil/nil                             |                          |                 | nil/nil     |
| <f2>       | text-scale hydra                          |                                        |                                             |                                     |                          |                 |             |
| <f3>       | macro-start                               |                                        |                                             |                                     |                          |                 |             |
| <f4>       | meow-kmacro-lines fb meow call kmacro     |                                        |                                             |                                     |                          |                 |             |
| <f5>       | meow-kmacro-matches                       |                                        |                                             |                                     |                          |                 |             |
| <f6>       | multiple cursors hydra                    |                                        |                                             |                                     |                          |                 |             |
| <f7>       | calum/edit-config                         |                                        |                                             |                                     |                          |                 |             |
| <f8>       | window hydra                              |                                        |                                             |                                     |                          |                 |             |
| <f9>       | nil                                       |                                        |                                             |                                     |                          |                 |             |
| <f10>      | nil                                       |                                        |                                             |                                     |                          |                 |             |
| <f11>      | nil                                       |                                        |                                             |                                     |                          |                 |             |
| <f12>      | nil                                       |                                        |                                             |                                     |                          |                 |             |
