;; -*- mode: lisp-data; eval: (outline-minor-mode 1); -*-

prog-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK ")

text-mode

(asciibox "+-" (make-string (length str) ?-) "-+" n
          "| " (s str)                       " |" n
          "+-" (make-string (length str) ?-) "-+" n)

purescript-mode haskell-mode

(f (p "name" name) " :: " p n name " " p " = " q)
(udf "undefined" q)

org-mode latex-mode

(m "\\(" q "\\)")
;; On a line with text in it already, expanding this will insert an
;; extra newline
(d & n "\\[" n> q n "\\]")
(c "~" q "~")

org-mode

(ttl "#+title: " p n "#+author: " p n "#+language: " p n n)
(qt "#+begin_quote" n> r> n> "#+end_quote")
(exmpl "#+begin_example" n> r> n> "#+end_example")
(cntr "#+begin_center" n> r> n> "#+end_center")
(comm "#+begin_comment" n> r> n> "#+end_comment")
(vrs "#+begin_verse" n> r> n> "#+end_verse")
(src "#+begin_src " p n> r> n> "#+end_src" :post (org-edit-src-code))
(elsp "#+begin_src emacs-lisp" n> r> n "#+end_src")
(rimg "#+begin_src R :results file graphics :file images/" p ".png" n> q n "#+end_src")
(py "#+begin_src python" n q n "#+end_src")
(R "#+begin_src R" n q n "#+end_src")

emacs-lisp-mode org-mode

(pkg "(use-package " q ")")

graphql-mode

(doc "\"\"\"" n q n "\"\"\"")

;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
